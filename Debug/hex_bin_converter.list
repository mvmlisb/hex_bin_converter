
hex_bin_converter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025b8  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08002670  08002670  00012670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002790  08002790  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08002790  08002790  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002790  08002790  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002790  08002790  00012790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002794  08002794  00012794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08002798  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000088  08002820  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  08002820  000201e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e2e  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001991  00000000  00000000  00029ede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  0002b870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b0  00000000  00000000  0002c2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013ec7  00000000  00000000  0002cc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b76d  00000000  00000000  00040b5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080562  00000000  00000000  0004c2cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cc82e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002550  00000000  00000000  000cc880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000088 	.word	0x20000088
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002658 	.word	0x08002658

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000008c 	.word	0x2000008c
 80000fc:	08002658 	.word	0x08002658

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <initConfigurationPin>:
PinParams INPUT_DISPLAY_E_PIN;
PinParams INPUT_DISPLAY_F_PIN;
PinParams INPUT_DISPLAY_G_PIN;
PinParams LS_DISPLAY_DOT_PIN;

void initConfigurationPin() {
 8000218:	b580      	push	{r7, lr}
 800021a:	b086      	sub	sp, #24
 800021c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	0018      	movs	r0, r3
 8000222:	2314      	movs	r3, #20
 8000224:	001a      	movs	r2, r3
 8000226:	2100      	movs	r1, #0
 8000228:	f002 fa0e 	bl	8002648 <memset>
  GPIO_InitStruct.Pin = (uint32_t)BOARD_MODE_PIN.pin;
 800022c:	4b0a      	ldr	r3, [pc, #40]	; (8000258 <initConfigurationPin+0x40>)
 800022e:	889b      	ldrh	r3, [r3, #4]
 8000230:	001a      	movs	r2, r3
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	2200      	movs	r2, #0
 800023a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	2200      	movs	r2, #0
 8000240:	609a      	str	r2, [r3, #8]

  HAL_GPIO_Init(BOARD_MODE_PIN.gpio, &GPIO_InitStruct);
 8000242:	4b05      	ldr	r3, [pc, #20]	; (8000258 <initConfigurationPin+0x40>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	1d3a      	adds	r2, r7, #4
 8000248:	0011      	movs	r1, r2
 800024a:	0018      	movs	r0, r3
 800024c:	f001 f8dc 	bl	8001408 <HAL_GPIO_Init>
}
 8000250:	46c0      	nop			; (mov r8, r8)
 8000252:	46bd      	mov	sp, r7
 8000254:	b006      	add	sp, #24
 8000256:	bd80      	pop	{r7, pc}
 8000258:	20000000 	.word	0x20000000

0800025c <initBinToHexMode>:

void initBinToHexMode(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b086      	sub	sp, #24
 8000260:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	0018      	movs	r0, r3
 8000266:	2314      	movs	r3, #20
 8000268:	001a      	movs	r2, r3
 800026a:	2100      	movs	r1, #0
 800026c:	f002 f9ec 	bl	8002648 <memset>

  HAL_GPIO_WritePin(GPIOA,
		  DISPLAY_SWITCH_PIN.pin|
 8000270:	4b67      	ldr	r3, [pc, #412]	; (8000410 <initBinToHexMode+0x1b4>)
 8000272:	889a      	ldrh	r2, [r3, #4]
		  OUTPUT_DISPLAY_A_PIN.pin|
 8000274:	4b67      	ldr	r3, [pc, #412]	; (8000414 <initBinToHexMode+0x1b8>)
 8000276:	889b      	ldrh	r3, [r3, #4]
  HAL_GPIO_WritePin(GPIOA,
 8000278:	4313      	orrs	r3, r2
 800027a:	b29a      	uxth	r2, r3
		  OUTPUT_DISPLAY_B_PIN.pin|
 800027c:	4b66      	ldr	r3, [pc, #408]	; (8000418 <initBinToHexMode+0x1bc>)
 800027e:	889b      	ldrh	r3, [r3, #4]
  HAL_GPIO_WritePin(GPIOA,
 8000280:	4313      	orrs	r3, r2
 8000282:	b29a      	uxth	r2, r3
		  OUTPUT_DISPLAY_C_PIN.pin|
 8000284:	4b65      	ldr	r3, [pc, #404]	; (800041c <initBinToHexMode+0x1c0>)
 8000286:	889b      	ldrh	r3, [r3, #4]
  HAL_GPIO_WritePin(GPIOA,
 8000288:	4313      	orrs	r3, r2
 800028a:	b29a      	uxth	r2, r3
          OUTPUT_DISPLAY_D_PIN.pin|
 800028c:	4b64      	ldr	r3, [pc, #400]	; (8000420 <initBinToHexMode+0x1c4>)
 800028e:	889b      	ldrh	r3, [r3, #4]
  HAL_GPIO_WritePin(GPIOA,
 8000290:	4313      	orrs	r3, r2
 8000292:	b29a      	uxth	r2, r3
		  OUTPUT_DISPLAY_E_PIN.pin|
 8000294:	4b63      	ldr	r3, [pc, #396]	; (8000424 <initBinToHexMode+0x1c8>)
 8000296:	889b      	ldrh	r3, [r3, #4]
  HAL_GPIO_WritePin(GPIOA,
 8000298:	4313      	orrs	r3, r2
 800029a:	b29a      	uxth	r2, r3
		  OUTPUT_DISPLAY_F_PIN.pin|
 800029c:	4b62      	ldr	r3, [pc, #392]	; (8000428 <initBinToHexMode+0x1cc>)
 800029e:	889b      	ldrh	r3, [r3, #4]
  HAL_GPIO_WritePin(GPIOA,
 80002a0:	4313      	orrs	r3, r2
 80002a2:	b29a      	uxth	r2, r3
		  OUTPUT_DISPLAY_G_PIN.pin,
 80002a4:	4b61      	ldr	r3, [pc, #388]	; (800042c <initBinToHexMode+0x1d0>)
 80002a6:	889b      	ldrh	r3, [r3, #4]
  HAL_GPIO_WritePin(GPIOA,
 80002a8:	4313      	orrs	r3, r2
 80002aa:	b299      	uxth	r1, r3
 80002ac:	23a0      	movs	r3, #160	; 0xa0
 80002ae:	05db      	lsls	r3, r3, #23
 80002b0:	2200      	movs	r2, #0
 80002b2:	0018      	movs	r0, r3
 80002b4:	f001 fa29 	bl	800170a <HAL_GPIO_WritePin>
		  GPIO_PIN_RESET
		  );

  HAL_GPIO_WritePin(GPIOB, LS_DISPLAY_DOT_PIN.pin, GPIO_PIN_RESET);
 80002b8:	4b5d      	ldr	r3, [pc, #372]	; (8000430 <initBinToHexMode+0x1d4>)
 80002ba:	889b      	ldrh	r3, [r3, #4]
 80002bc:	485d      	ldr	r0, [pc, #372]	; (8000434 <initBinToHexMode+0x1d8>)
 80002be:	2200      	movs	r2, #0
 80002c0:	0019      	movs	r1, r3
 80002c2:	f001 fa22 	bl	800170a <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin =
		  DISPLAY_SWITCH_PIN.pin|
 80002c6:	4b52      	ldr	r3, [pc, #328]	; (8000410 <initBinToHexMode+0x1b4>)
 80002c8:	889a      	ldrh	r2, [r3, #4]
		  OUTPUT_DISPLAY_A_PIN.pin|
 80002ca:	4b52      	ldr	r3, [pc, #328]	; (8000414 <initBinToHexMode+0x1b8>)
 80002cc:	889b      	ldrh	r3, [r3, #4]
		  OUTPUT_DISPLAY_B_PIN.pin|
		  OUTPUT_DISPLAY_C_PIN.pin|
		  OUTPUT_DISPLAY_D_PIN.pin|
		  OUTPUT_DISPLAY_E_PIN.pin|
		  OUTPUT_DISPLAY_F_PIN.pin|
 80002ce:	4313      	orrs	r3, r2
 80002d0:	b29a      	uxth	r2, r3
		  OUTPUT_DISPLAY_B_PIN.pin|
 80002d2:	4b51      	ldr	r3, [pc, #324]	; (8000418 <initBinToHexMode+0x1bc>)
 80002d4:	889b      	ldrh	r3, [r3, #4]
		  OUTPUT_DISPLAY_F_PIN.pin|
 80002d6:	4313      	orrs	r3, r2
 80002d8:	b29a      	uxth	r2, r3
		  OUTPUT_DISPLAY_C_PIN.pin|
 80002da:	4b50      	ldr	r3, [pc, #320]	; (800041c <initBinToHexMode+0x1c0>)
 80002dc:	889b      	ldrh	r3, [r3, #4]
		  OUTPUT_DISPLAY_F_PIN.pin|
 80002de:	4313      	orrs	r3, r2
 80002e0:	b29a      	uxth	r2, r3
		  OUTPUT_DISPLAY_D_PIN.pin|
 80002e2:	4b4f      	ldr	r3, [pc, #316]	; (8000420 <initBinToHexMode+0x1c4>)
 80002e4:	889b      	ldrh	r3, [r3, #4]
		  OUTPUT_DISPLAY_F_PIN.pin|
 80002e6:	4313      	orrs	r3, r2
 80002e8:	b29a      	uxth	r2, r3
		  OUTPUT_DISPLAY_E_PIN.pin|
 80002ea:	4b4e      	ldr	r3, [pc, #312]	; (8000424 <initBinToHexMode+0x1c8>)
 80002ec:	889b      	ldrh	r3, [r3, #4]
		  OUTPUT_DISPLAY_F_PIN.pin|
 80002ee:	4313      	orrs	r3, r2
 80002f0:	b29a      	uxth	r2, r3
 80002f2:	4b4d      	ldr	r3, [pc, #308]	; (8000428 <initBinToHexMode+0x1cc>)
 80002f4:	889b      	ldrh	r3, [r3, #4]
 80002f6:	4313      	orrs	r3, r2
 80002f8:	b29a      	uxth	r2, r3
		  OUTPUT_DISPLAY_G_PIN.pin;
 80002fa:	4b4c      	ldr	r3, [pc, #304]	; (800042c <initBinToHexMode+0x1d0>)
 80002fc:	889b      	ldrh	r3, [r3, #4]
		  OUTPUT_DISPLAY_F_PIN.pin|
 80002fe:	4313      	orrs	r3, r2
 8000300:	b29b      	uxth	r3, r3
 8000302:	001a      	movs	r2, r3
  GPIO_InitStruct.Pin =
 8000304:	1d3b      	adds	r3, r7, #4
 8000306:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000308:	1d3b      	adds	r3, r7, #4
 800030a:	2201      	movs	r2, #1
 800030c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	2200      	movs	r2, #0
 8000312:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000314:	1d3b      	adds	r3, r7, #4
 8000316:	2200      	movs	r2, #0
 8000318:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800031a:	1d3a      	adds	r2, r7, #4
 800031c:	23a0      	movs	r3, #160	; 0xa0
 800031e:	05db      	lsls	r3, r3, #23
 8000320:	0011      	movs	r1, r2
 8000322:	0018      	movs	r0, r3
 8000324:	f001 f870 	bl	8001408 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin =
		  MS_BINARY_1_PIN.pin|
 8000328:	4b43      	ldr	r3, [pc, #268]	; (8000438 <initBinToHexMode+0x1dc>)
 800032a:	889a      	ldrh	r2, [r3, #4]
		  MS_BINARY_2_PIN.pin|
 800032c:	4b43      	ldr	r3, [pc, #268]	; (800043c <initBinToHexMode+0x1e0>)
 800032e:	889b      	ldrh	r3, [r3, #4]
		  MS_BINARY_4_PIN.pin|
		  MS_BINARY_8_PIN.pin|
		  LS_BINARY_1_PIN.pin|
 8000330:	4313      	orrs	r3, r2
 8000332:	b29a      	uxth	r2, r3
		  MS_BINARY_4_PIN.pin|
 8000334:	4b42      	ldr	r3, [pc, #264]	; (8000440 <initBinToHexMode+0x1e4>)
 8000336:	889b      	ldrh	r3, [r3, #4]
		  LS_BINARY_1_PIN.pin|
 8000338:	4313      	orrs	r3, r2
 800033a:	b29a      	uxth	r2, r3
		  MS_BINARY_8_PIN.pin|
 800033c:	4b41      	ldr	r3, [pc, #260]	; (8000444 <initBinToHexMode+0x1e8>)
 800033e:	889b      	ldrh	r3, [r3, #4]
		  LS_BINARY_1_PIN.pin|
 8000340:	4313      	orrs	r3, r2
 8000342:	b29a      	uxth	r2, r3
 8000344:	4b40      	ldr	r3, [pc, #256]	; (8000448 <initBinToHexMode+0x1ec>)
 8000346:	889b      	ldrh	r3, [r3, #4]
 8000348:	4313      	orrs	r3, r2
 800034a:	b29a      	uxth	r2, r3
		  LS_BINARY_8_PIN.pin;
 800034c:	4b3f      	ldr	r3, [pc, #252]	; (800044c <initBinToHexMode+0x1f0>)
 800034e:	889b      	ldrh	r3, [r3, #4]
		  LS_BINARY_1_PIN.pin|
 8000350:	4313      	orrs	r3, r2
 8000352:	b29b      	uxth	r3, r3
 8000354:	001a      	movs	r2, r3
  GPIO_InitStruct.Pin =
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	2200      	movs	r2, #0
 800035e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000360:	1d3b      	adds	r3, r7, #4
 8000362:	2200      	movs	r2, #0
 8000364:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000366:	1d3a      	adds	r2, r7, #4
 8000368:	23a0      	movs	r3, #160	; 0xa0
 800036a:	05db      	lsls	r3, r3, #23
 800036c:	0011      	movs	r1, r2
 800036e:	0018      	movs	r0, r3
 8000370:	f001 f84a 	bl	8001408 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LS_DISPLAY_DOT_PIN.pin;
 8000374:	4b2e      	ldr	r3, [pc, #184]	; (8000430 <initBinToHexMode+0x1d4>)
 8000376:	889b      	ldrh	r3, [r3, #4]
 8000378:	001a      	movs	r2, r3
 800037a:	1d3b      	adds	r3, r7, #4
 800037c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	2201      	movs	r2, #1
 8000382:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000384:	1d3b      	adds	r3, r7, #4
 8000386:	2200      	movs	r2, #0
 8000388:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	2200      	movs	r2, #0
 800038e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000390:	1d3b      	adds	r3, r7, #4
 8000392:	4a28      	ldr	r2, [pc, #160]	; (8000434 <initBinToHexMode+0x1d8>)
 8000394:	0019      	movs	r1, r3
 8000396:	0010      	movs	r0, r2
 8000398:	f001 f836 	bl	8001408 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin =
		  LS_BINARY_2_PIN.pin|
 800039c:	4b2c      	ldr	r3, [pc, #176]	; (8000450 <initBinToHexMode+0x1f4>)
 800039e:	889a      	ldrh	r2, [r3, #4]
		  LS_BINARY_4_PIN.pin|
 80003a0:	4b2c      	ldr	r3, [pc, #176]	; (8000454 <initBinToHexMode+0x1f8>)
 80003a2:	889b      	ldrh	r3, [r3, #4]
		  INPUT_DISPLAY_D_PIN.pin|
		  INPUT_DISPLAY_E_PIN.pin|
		  INPUT_DISPLAY_F_PIN.pin|
		  INPUT_DISPLAY_G_PIN.pin|
		  INPUT_DISPLAY_A_PIN.pin|
		  INPUT_DISPLAY_B_PIN.pin|
 80003a4:	4313      	orrs	r3, r2
 80003a6:	b29a      	uxth	r2, r3
		  DISPLAY_MODE_PIN.pin|
 80003a8:	4b2b      	ldr	r3, [pc, #172]	; (8000458 <initBinToHexMode+0x1fc>)
 80003aa:	889b      	ldrh	r3, [r3, #4]
		  INPUT_DISPLAY_B_PIN.pin|
 80003ac:	4313      	orrs	r3, r2
 80003ae:	b29a      	uxth	r2, r3
		  INPUT_DISPLAY_D_PIN.pin|
 80003b0:	4b2a      	ldr	r3, [pc, #168]	; (800045c <initBinToHexMode+0x200>)
 80003b2:	889b      	ldrh	r3, [r3, #4]
		  INPUT_DISPLAY_B_PIN.pin|
 80003b4:	4313      	orrs	r3, r2
 80003b6:	b29a      	uxth	r2, r3
		  INPUT_DISPLAY_E_PIN.pin|
 80003b8:	4b29      	ldr	r3, [pc, #164]	; (8000460 <initBinToHexMode+0x204>)
 80003ba:	889b      	ldrh	r3, [r3, #4]
		  INPUT_DISPLAY_B_PIN.pin|
 80003bc:	4313      	orrs	r3, r2
 80003be:	b29a      	uxth	r2, r3
		  INPUT_DISPLAY_F_PIN.pin|
 80003c0:	4b28      	ldr	r3, [pc, #160]	; (8000464 <initBinToHexMode+0x208>)
 80003c2:	889b      	ldrh	r3, [r3, #4]
		  INPUT_DISPLAY_B_PIN.pin|
 80003c4:	4313      	orrs	r3, r2
 80003c6:	b29a      	uxth	r2, r3
		  INPUT_DISPLAY_G_PIN.pin|
 80003c8:	4b27      	ldr	r3, [pc, #156]	; (8000468 <initBinToHexMode+0x20c>)
 80003ca:	889b      	ldrh	r3, [r3, #4]
		  INPUT_DISPLAY_B_PIN.pin|
 80003cc:	4313      	orrs	r3, r2
 80003ce:	b29a      	uxth	r2, r3
		  INPUT_DISPLAY_A_PIN.pin|
 80003d0:	4b26      	ldr	r3, [pc, #152]	; (800046c <initBinToHexMode+0x210>)
 80003d2:	889b      	ldrh	r3, [r3, #4]
		  INPUT_DISPLAY_B_PIN.pin|
 80003d4:	4313      	orrs	r3, r2
 80003d6:	b29a      	uxth	r2, r3
 80003d8:	4b25      	ldr	r3, [pc, #148]	; (8000470 <initBinToHexMode+0x214>)
 80003da:	889b      	ldrh	r3, [r3, #4]
 80003dc:	4313      	orrs	r3, r2
 80003de:	b29a      	uxth	r2, r3
		  INPUT_DISPLAY_C_PIN.pin;
 80003e0:	4b24      	ldr	r3, [pc, #144]	; (8000474 <initBinToHexMode+0x218>)
 80003e2:	889b      	ldrh	r3, [r3, #4]
		  INPUT_DISPLAY_B_PIN.pin|
 80003e4:	4313      	orrs	r3, r2
 80003e6:	b29b      	uxth	r3, r3
 80003e8:	001a      	movs	r2, r3
  GPIO_InitStruct.Pin =
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003ee:	1d3b      	adds	r3, r7, #4
 80003f0:	2200      	movs	r2, #0
 80003f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f4:	1d3b      	adds	r3, r7, #4
 80003f6:	2200      	movs	r2, #0
 80003f8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	4a0d      	ldr	r2, [pc, #52]	; (8000434 <initBinToHexMode+0x1d8>)
 80003fe:	0019      	movs	r1, r3
 8000400:	0010      	movs	r0, r2
 8000402:	f001 f801 	bl	8001408 <HAL_GPIO_Init>
}
 8000406:	46c0      	nop			; (mov r8, r8)
 8000408:	46bd      	mov	sp, r7
 800040a:	b006      	add	sp, #24
 800040c:	bd80      	pop	{r7, pc}
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	200000a4 	.word	0x200000a4
 8000414:	200000ac 	.word	0x200000ac
 8000418:	200000b4 	.word	0x200000b4
 800041c:	200000bc 	.word	0x200000bc
 8000420:	200000c4 	.word	0x200000c4
 8000424:	200000cc 	.word	0x200000cc
 8000428:	200000d4 	.word	0x200000d4
 800042c:	200000dc 	.word	0x200000dc
 8000430:	20000184 	.word	0x20000184
 8000434:	50000400 	.word	0x50000400
 8000438:	20000104 	.word	0x20000104
 800043c:	2000010c 	.word	0x2000010c
 8000440:	20000114 	.word	0x20000114
 8000444:	2000011c 	.word	0x2000011c
 8000448:	20000124 	.word	0x20000124
 800044c:	2000012c 	.word	0x2000012c
 8000450:	20000134 	.word	0x20000134
 8000454:	2000013c 	.word	0x2000013c
 8000458:	20000144 	.word	0x20000144
 800045c:	20000164 	.word	0x20000164
 8000460:	2000016c 	.word	0x2000016c
 8000464:	20000174 	.word	0x20000174
 8000468:	2000017c 	.word	0x2000017c
 800046c:	2000014c 	.word	0x2000014c
 8000470:	20000154 	.word	0x20000154
 8000474:	2000015c 	.word	0x2000015c

08000478 <initHexToBinMode>:

void initHexToBinMode(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
//  GPIO_InitStruct.Pin = LS_BINARY_1_Pin|MS_BINARY_4_Pin;
//  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//  GPIO_InitStruct.Pull = GPIO_NOPULL;
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}
 800047c:	46c0      	nop			; (mov r8, r8)
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
	...

08000484 <initPinParams>:
BoardMode boardMode;

uint8_t lsNumber;
uint8_t msNumber;

void initPinParams(void) {
 8000484:	b580      	push	{r7, lr}
 8000486:	b0ba      	sub	sp, #232	; 0xe8
 8000488:	af00      	add	r7, sp, #0
	DISPLAY_SWITCH_PIN = (PinParams) {GPIOA, GPIO_PIN_0};
 800048a:	4b3e      	ldr	r3, [pc, #248]	; (8000584 <initPinParams+0x100>)
 800048c:	4a3e      	ldr	r2, [pc, #248]	; (8000588 <initPinParams+0x104>)
 800048e:	ca03      	ldmia	r2!, {r0, r1}
 8000490:	c303      	stmia	r3!, {r0, r1}
	OUTPUT_DISPLAY_A_PIN = (PinParams) {GPIOA, GPIO_PIN_1};
 8000492:	4b3e      	ldr	r3, [pc, #248]	; (800058c <initPinParams+0x108>)
 8000494:	4a3e      	ldr	r2, [pc, #248]	; (8000590 <initPinParams+0x10c>)
 8000496:	ca03      	ldmia	r2!, {r0, r1}
 8000498:	c303      	stmia	r3!, {r0, r1}
	OUTPUT_DISPLAY_B_PIN = (PinParams) {GPIOA, GPIO_PIN_2};
 800049a:	4b3e      	ldr	r3, [pc, #248]	; (8000594 <initPinParams+0x110>)
 800049c:	4a3e      	ldr	r2, [pc, #248]	; (8000598 <initPinParams+0x114>)
 800049e:	ca03      	ldmia	r2!, {r0, r1}
 80004a0:	c303      	stmia	r3!, {r0, r1}
	OUTPUT_DISPLAY_C_PIN = (PinParams) {GPIOA, GPIO_PIN_3};
 80004a2:	4b3e      	ldr	r3, [pc, #248]	; (800059c <initPinParams+0x118>)
 80004a4:	4a3e      	ldr	r2, [pc, #248]	; (80005a0 <initPinParams+0x11c>)
 80004a6:	ca03      	ldmia	r2!, {r0, r1}
 80004a8:	c303      	stmia	r3!, {r0, r1}
	OUTPUT_DISPLAY_D_PIN = (PinParams) {GPIOA, GPIO_PIN_4};
 80004aa:	4b3e      	ldr	r3, [pc, #248]	; (80005a4 <initPinParams+0x120>)
 80004ac:	4a3e      	ldr	r2, [pc, #248]	; (80005a8 <initPinParams+0x124>)
 80004ae:	ca03      	ldmia	r2!, {r0, r1}
 80004b0:	c303      	stmia	r3!, {r0, r1}
	OUTPUT_DISPLAY_E_PIN = (PinParams) {GPIOA, GPIO_PIN_5};
 80004b2:	4b3e      	ldr	r3, [pc, #248]	; (80005ac <initPinParams+0x128>)
 80004b4:	4a3e      	ldr	r2, [pc, #248]	; (80005b0 <initPinParams+0x12c>)
 80004b6:	ca03      	ldmia	r2!, {r0, r1}
 80004b8:	c303      	stmia	r3!, {r0, r1}
	OUTPUT_DISPLAY_F_PIN = (PinParams) {GPIOA, GPIO_PIN_6};
 80004ba:	4b3e      	ldr	r3, [pc, #248]	; (80005b4 <initPinParams+0x130>)
 80004bc:	4a3e      	ldr	r2, [pc, #248]	; (80005b8 <initPinParams+0x134>)
 80004be:	ca03      	ldmia	r2!, {r0, r1}
 80004c0:	c303      	stmia	r3!, {r0, r1}
	OUTPUT_DISPLAY_G_PIN = (PinParams) {GPIOA, GPIO_PIN_7};
 80004c2:	4b3e      	ldr	r3, [pc, #248]	; (80005bc <initPinParams+0x138>)
 80004c4:	4a3e      	ldr	r2, [pc, #248]	; (80005c0 <initPinParams+0x13c>)
 80004c6:	ca03      	ldmia	r2!, {r0, r1}
 80004c8:	c303      	stmia	r3!, {r0, r1}

	if(boardMode == HEX_TO_BIN_MODE) {
 80004ca:	4b3e      	ldr	r3, [pc, #248]	; (80005c4 <initPinParams+0x140>)
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d110      	bne.n	80004f4 <initPinParams+0x70>
		MS_INCREMENT_BUTTON_PIN = (PinParams) {GPIOB, GPIO_PIN_0};
 80004d2:	4b3d      	ldr	r3, [pc, #244]	; (80005c8 <initPinParams+0x144>)
 80004d4:	4a3d      	ldr	r2, [pc, #244]	; (80005cc <initPinParams+0x148>)
 80004d6:	ca03      	ldmia	r2!, {r0, r1}
 80004d8:	c303      	stmia	r3!, {r0, r1}
		MS_DECREMENT_BUTTON_PIN = (PinParams) {GPIOB, GPIO_PIN_1};
 80004da:	4b3d      	ldr	r3, [pc, #244]	; (80005d0 <initPinParams+0x14c>)
 80004dc:	4a3d      	ldr	r2, [pc, #244]	; (80005d4 <initPinParams+0x150>)
 80004de:	ca03      	ldmia	r2!, {r0, r1}
 80004e0:	c303      	stmia	r3!, {r0, r1}
		LS_INCREMENT_BUTTON_PIN = (PinParams) {GPIOB, GPIO_PIN_2};
 80004e2:	4b3d      	ldr	r3, [pc, #244]	; (80005d8 <initPinParams+0x154>)
 80004e4:	4a3d      	ldr	r2, [pc, #244]	; (80005dc <initPinParams+0x158>)
 80004e6:	ca03      	ldmia	r2!, {r0, r1}
 80004e8:	c303      	stmia	r3!, {r0, r1}
		LS_DECREMENT_BUTTON_PIN = (PinParams) {GPIOB, GPIO_PIN_3};
 80004ea:	4b3d      	ldr	r3, [pc, #244]	; (80005e0 <initPinParams+0x15c>)
 80004ec:	4a3d      	ldr	r2, [pc, #244]	; (80005e4 <initPinParams+0x160>)
 80004ee:	ca03      	ldmia	r2!, {r0, r1}
 80004f0:	c303      	stmia	r3!, {r0, r1}
		INPUT_DISPLAY_E_PIN = (PinParams) {GPIOB, GPIO_PIN_11};
		INPUT_DISPLAY_F_PIN = (PinParams) {GPIOB, GPIO_PIN_12};
		INPUT_DISPLAY_G_PIN = (PinParams) {GPIOB, GPIO_PIN_13};
		LS_DISPLAY_DOT_PIN = (PinParams) {GPIOB, GPIO_PIN_0};
	}
}
 80004f2:	e043      	b.n	800057c <initPinParams+0xf8>
		MS_BINARY_1_PIN = (PinParams) {GPIOA, GPIO_PIN_8};
 80004f4:	4b3c      	ldr	r3, [pc, #240]	; (80005e8 <initPinParams+0x164>)
 80004f6:	4a3d      	ldr	r2, [pc, #244]	; (80005ec <initPinParams+0x168>)
 80004f8:	ca03      	ldmia	r2!, {r0, r1}
 80004fa:	c303      	stmia	r3!, {r0, r1}
		MS_BINARY_2_PIN = (PinParams) {GPIOA, GPIO_PIN_9};
 80004fc:	4b3c      	ldr	r3, [pc, #240]	; (80005f0 <initPinParams+0x16c>)
 80004fe:	4a3d      	ldr	r2, [pc, #244]	; (80005f4 <initPinParams+0x170>)
 8000500:	ca03      	ldmia	r2!, {r0, r1}
 8000502:	c303      	stmia	r3!, {r0, r1}
		MS_BINARY_4_PIN = (PinParams) {GPIOA, GPIO_PIN_10};
 8000504:	4b3c      	ldr	r3, [pc, #240]	; (80005f8 <initPinParams+0x174>)
 8000506:	4a3d      	ldr	r2, [pc, #244]	; (80005fc <initPinParams+0x178>)
 8000508:	ca03      	ldmia	r2!, {r0, r1}
 800050a:	c303      	stmia	r3!, {r0, r1}
		MS_BINARY_8_PIN = (PinParams) {GPIOA, GPIO_PIN_11};
 800050c:	4b3c      	ldr	r3, [pc, #240]	; (8000600 <initPinParams+0x17c>)
 800050e:	4a3d      	ldr	r2, [pc, #244]	; (8000604 <initPinParams+0x180>)
 8000510:	ca03      	ldmia	r2!, {r0, r1}
 8000512:	c303      	stmia	r3!, {r0, r1}
		LS_BINARY_1_PIN = (PinParams) {GPIOA, GPIO_PIN_12};
 8000514:	4b3c      	ldr	r3, [pc, #240]	; (8000608 <initPinParams+0x184>)
 8000516:	4a3d      	ldr	r2, [pc, #244]	; (800060c <initPinParams+0x188>)
 8000518:	ca03      	ldmia	r2!, {r0, r1}
 800051a:	c303      	stmia	r3!, {r0, r1}
		LS_BINARY_2_PIN = (PinParams) {GPIOB, GPIO_PIN_4};
 800051c:	4b3c      	ldr	r3, [pc, #240]	; (8000610 <initPinParams+0x18c>)
 800051e:	4a3d      	ldr	r2, [pc, #244]	; (8000614 <initPinParams+0x190>)
 8000520:	ca03      	ldmia	r2!, {r0, r1}
 8000522:	c303      	stmia	r3!, {r0, r1}
		LS_BINARY_4_PIN = (PinParams) {GPIOB, GPIO_PIN_5};
 8000524:	4b3c      	ldr	r3, [pc, #240]	; (8000618 <initPinParams+0x194>)
 8000526:	4a3d      	ldr	r2, [pc, #244]	; (800061c <initPinParams+0x198>)
 8000528:	ca03      	ldmia	r2!, {r0, r1}
 800052a:	c303      	stmia	r3!, {r0, r1}
		LS_BINARY_8_PIN = (PinParams) {GPIOA, GPIO_PIN_15};
 800052c:	4b3c      	ldr	r3, [pc, #240]	; (8000620 <initPinParams+0x19c>)
 800052e:	4a3d      	ldr	r2, [pc, #244]	; (8000624 <initPinParams+0x1a0>)
 8000530:	ca03      	ldmia	r2!, {r0, r1}
 8000532:	c303      	stmia	r3!, {r0, r1}
		DISPLAY_MODE_PIN = (PinParams) {GPIOB, GPIO_PIN_15};
 8000534:	4b3c      	ldr	r3, [pc, #240]	; (8000628 <initPinParams+0x1a4>)
 8000536:	4a3d      	ldr	r2, [pc, #244]	; (800062c <initPinParams+0x1a8>)
 8000538:	ca03      	ldmia	r2!, {r0, r1}
 800053a:	c303      	stmia	r3!, {r0, r1}
		INPUT_DISPLAY_A_PIN = (PinParams) {GPIOB, GPIO_PIN_7};
 800053c:	4b3c      	ldr	r3, [pc, #240]	; (8000630 <initPinParams+0x1ac>)
 800053e:	4a3d      	ldr	r2, [pc, #244]	; (8000634 <initPinParams+0x1b0>)
 8000540:	ca03      	ldmia	r2!, {r0, r1}
 8000542:	c303      	stmia	r3!, {r0, r1}
		INPUT_DISPLAY_B_PIN = (PinParams) {GPIOB, GPIO_PIN_8};
 8000544:	4b3c      	ldr	r3, [pc, #240]	; (8000638 <initPinParams+0x1b4>)
 8000546:	4a3d      	ldr	r2, [pc, #244]	; (800063c <initPinParams+0x1b8>)
 8000548:	ca03      	ldmia	r2!, {r0, r1}
 800054a:	c303      	stmia	r3!, {r0, r1}
		INPUT_DISPLAY_C_PIN = (PinParams) {GPIOB, GPIO_PIN_9};
 800054c:	4b3c      	ldr	r3, [pc, #240]	; (8000640 <initPinParams+0x1bc>)
 800054e:	4a3d      	ldr	r2, [pc, #244]	; (8000644 <initPinParams+0x1c0>)
 8000550:	ca03      	ldmia	r2!, {r0, r1}
 8000552:	c303      	stmia	r3!, {r0, r1}
		INPUT_DISPLAY_D_PIN = (PinParams) {GPIOB, GPIO_PIN_10};
 8000554:	4b3c      	ldr	r3, [pc, #240]	; (8000648 <initPinParams+0x1c4>)
 8000556:	4a3d      	ldr	r2, [pc, #244]	; (800064c <initPinParams+0x1c8>)
 8000558:	ca03      	ldmia	r2!, {r0, r1}
 800055a:	c303      	stmia	r3!, {r0, r1}
		INPUT_DISPLAY_E_PIN = (PinParams) {GPIOB, GPIO_PIN_11};
 800055c:	4b3c      	ldr	r3, [pc, #240]	; (8000650 <initPinParams+0x1cc>)
 800055e:	4a3d      	ldr	r2, [pc, #244]	; (8000654 <initPinParams+0x1d0>)
 8000560:	ca03      	ldmia	r2!, {r0, r1}
 8000562:	c303      	stmia	r3!, {r0, r1}
		INPUT_DISPLAY_F_PIN = (PinParams) {GPIOB, GPIO_PIN_12};
 8000564:	4b3c      	ldr	r3, [pc, #240]	; (8000658 <initPinParams+0x1d4>)
 8000566:	4a3d      	ldr	r2, [pc, #244]	; (800065c <initPinParams+0x1d8>)
 8000568:	ca03      	ldmia	r2!, {r0, r1}
 800056a:	c303      	stmia	r3!, {r0, r1}
		INPUT_DISPLAY_G_PIN = (PinParams) {GPIOB, GPIO_PIN_13};
 800056c:	4b3c      	ldr	r3, [pc, #240]	; (8000660 <initPinParams+0x1dc>)
 800056e:	4a3d      	ldr	r2, [pc, #244]	; (8000664 <initPinParams+0x1e0>)
 8000570:	ca03      	ldmia	r2!, {r0, r1}
 8000572:	c303      	stmia	r3!, {r0, r1}
		LS_DISPLAY_DOT_PIN = (PinParams) {GPIOB, GPIO_PIN_0};
 8000574:	4b3c      	ldr	r3, [pc, #240]	; (8000668 <initPinParams+0x1e4>)
 8000576:	4a15      	ldr	r2, [pc, #84]	; (80005cc <initPinParams+0x148>)
 8000578:	ca03      	ldmia	r2!, {r0, r1}
 800057a:	c303      	stmia	r3!, {r0, r1}
}
 800057c:	46c0      	nop			; (mov r8, r8)
 800057e:	46bd      	mov	sp, r7
 8000580:	b03a      	add	sp, #232	; 0xe8
 8000582:	bd80      	pop	{r7, pc}
 8000584:	200000a4 	.word	0x200000a4
 8000588:	08002670 	.word	0x08002670
 800058c:	200000ac 	.word	0x200000ac
 8000590:	08002678 	.word	0x08002678
 8000594:	200000b4 	.word	0x200000b4
 8000598:	08002680 	.word	0x08002680
 800059c:	200000bc 	.word	0x200000bc
 80005a0:	08002688 	.word	0x08002688
 80005a4:	200000c4 	.word	0x200000c4
 80005a8:	08002690 	.word	0x08002690
 80005ac:	200000cc 	.word	0x200000cc
 80005b0:	08002698 	.word	0x08002698
 80005b4:	200000d4 	.word	0x200000d4
 80005b8:	080026a0 	.word	0x080026a0
 80005bc:	200000dc 	.word	0x200000dc
 80005c0:	080026a8 	.word	0x080026a8
 80005c4:	2000018d 	.word	0x2000018d
 80005c8:	200000e4 	.word	0x200000e4
 80005cc:	080026b0 	.word	0x080026b0
 80005d0:	200000ec 	.word	0x200000ec
 80005d4:	080026b8 	.word	0x080026b8
 80005d8:	200000f4 	.word	0x200000f4
 80005dc:	080026c0 	.word	0x080026c0
 80005e0:	200000fc 	.word	0x200000fc
 80005e4:	080026c8 	.word	0x080026c8
 80005e8:	20000104 	.word	0x20000104
 80005ec:	080026d0 	.word	0x080026d0
 80005f0:	2000010c 	.word	0x2000010c
 80005f4:	080026d8 	.word	0x080026d8
 80005f8:	20000114 	.word	0x20000114
 80005fc:	080026e0 	.word	0x080026e0
 8000600:	2000011c 	.word	0x2000011c
 8000604:	080026e8 	.word	0x080026e8
 8000608:	20000124 	.word	0x20000124
 800060c:	080026f0 	.word	0x080026f0
 8000610:	20000134 	.word	0x20000134
 8000614:	080026f8 	.word	0x080026f8
 8000618:	2000013c 	.word	0x2000013c
 800061c:	08002700 	.word	0x08002700
 8000620:	2000012c 	.word	0x2000012c
 8000624:	08002708 	.word	0x08002708
 8000628:	20000144 	.word	0x20000144
 800062c:	08002710 	.word	0x08002710
 8000630:	2000014c 	.word	0x2000014c
 8000634:	08002718 	.word	0x08002718
 8000638:	20000154 	.word	0x20000154
 800063c:	08002720 	.word	0x08002720
 8000640:	2000015c 	.word	0x2000015c
 8000644:	08002728 	.word	0x08002728
 8000648:	20000164 	.word	0x20000164
 800064c:	08002730 	.word	0x08002730
 8000650:	2000016c 	.word	0x2000016c
 8000654:	08002738 	.word	0x08002738
 8000658:	20000174 	.word	0x20000174
 800065c:	08002740 	.word	0x08002740
 8000660:	2000017c 	.word	0x2000017c
 8000664:	08002748 	.word	0x08002748
 8000668:	20000184 	.word	0x20000184

0800066c <updateDisplayMode>:

void updateDisplayMode() {
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	displayMode = (DisplayMode)HAL_GPIO_ReadPin(DISPLAY_MODE_PIN.gpio, DISPLAY_MODE_PIN.pin);
 8000670:	4b07      	ldr	r3, [pc, #28]	; (8000690 <updateDisplayMode+0x24>)
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <updateDisplayMode+0x24>)
 8000676:	889b      	ldrh	r3, [r3, #4]
 8000678:	0019      	movs	r1, r3
 800067a:	0010      	movs	r0, r2
 800067c:	f001 f828 	bl	80016d0 <HAL_GPIO_ReadPin>
 8000680:	0003      	movs	r3, r0
 8000682:	001a      	movs	r2, r3
 8000684:	4b03      	ldr	r3, [pc, #12]	; (8000694 <updateDisplayMode+0x28>)
 8000686:	701a      	strb	r2, [r3, #0]
}
 8000688:	46c0      	nop			; (mov r8, r8)
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	20000144 	.word	0x20000144
 8000694:	2000018c 	.word	0x2000018c

08000698 <updateDisplay>:

void updateDisplay() {
 8000698:	b5b0      	push	{r4, r5, r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
	if(boardMode == HEX_TO_BIN_MODE || (boardMode == BIN_TO_HEX_MODE && displayMode == READ_FROM_BITS)) {
 800069e:	4b93      	ldr	r3, [pc, #588]	; (80008ec <updateDisplay+0x254>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d009      	beq.n	80006ba <updateDisplay+0x22>
 80006a6:	4b91      	ldr	r3, [pc, #580]	; (80008ec <updateDisplay+0x254>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d000      	beq.n	80006b0 <updateDisplay+0x18>
 80006ae:	e085      	b.n	80007bc <updateDisplay+0x124>
 80006b0:	4b8f      	ldr	r3, [pc, #572]	; (80008f0 <updateDisplay+0x258>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d000      	beq.n	80006ba <updateDisplay+0x22>
 80006b8:	e080      	b.n	80007bc <updateDisplay+0x124>
		ActiveDisplay notActiveDisplay = activeDisplay == MS_DISPLAY ? LS_DISPLAY : MS_DISPLAY;
 80006ba:	4b8e      	ldr	r3, [pc, #568]	; (80008f4 <updateDisplay+0x25c>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	425a      	negs	r2, r3
 80006c0:	4153      	adcs	r3, r2
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	240d      	movs	r4, #13
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(DISPLAY_SWITCH_PIN.gpio, DISPLAY_SWITCH_PIN.pin, notActiveDisplay);
 80006ca:	4b8b      	ldr	r3, [pc, #556]	; (80008f8 <updateDisplay+0x260>)
 80006cc:	6818      	ldr	r0, [r3, #0]
 80006ce:	4b8a      	ldr	r3, [pc, #552]	; (80008f8 <updateDisplay+0x260>)
 80006d0:	8899      	ldrh	r1, [r3, #4]
 80006d2:	193b      	adds	r3, r7, r4
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	001a      	movs	r2, r3
 80006d8:	f001 f817 	bl	800170a <HAL_GPIO_WritePin>
		for (uint8_t i = 0; i < DISPLAY_SEGMENT_COUNT; i++) {
 80006dc:	230f      	movs	r3, #15
 80006de:	18fb      	adds	r3, r7, r3
 80006e0:	2200      	movs	r2, #0
 80006e2:	701a      	strb	r2, [r3, #0]
 80006e4:	e013      	b.n	800070e <updateDisplay+0x76>
		    PinParams *displayPinParams = DisplayPins[i];
 80006e6:	240f      	movs	r4, #15
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	781a      	ldrb	r2, [r3, #0]
 80006ec:	4b83      	ldr	r3, [pc, #524]	; (80008fc <updateDisplay+0x264>)
 80006ee:	0092      	lsls	r2, r2, #2
 80006f0:	58d3      	ldr	r3, [r2, r3]
 80006f2:	607b      	str	r3, [r7, #4]
		    HAL_GPIO_WritePin(displayPinParams->gpio, displayPinParams->pin, GPIO_PIN_RESET);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	6818      	ldr	r0, [r3, #0]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	889b      	ldrh	r3, [r3, #4]
 80006fc:	2200      	movs	r2, #0
 80006fe:	0019      	movs	r1, r3
 8000700:	f001 f803 	bl	800170a <HAL_GPIO_WritePin>
		for (uint8_t i = 0; i < DISPLAY_SEGMENT_COUNT; i++) {
 8000704:	193b      	adds	r3, r7, r4
 8000706:	781a      	ldrb	r2, [r3, #0]
 8000708:	193b      	adds	r3, r7, r4
 800070a:	3201      	adds	r2, #1
 800070c:	701a      	strb	r2, [r3, #0]
 800070e:	230f      	movs	r3, #15
 8000710:	18fb      	adds	r3, r7, r3
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b06      	cmp	r3, #6
 8000716:	d9e6      	bls.n	80006e6 <updateDisplay+0x4e>
		}

		uint8_t number = activeDisplay == MS_DISPLAY ? msNumber : lsNumber;
 8000718:	4b76      	ldr	r3, [pc, #472]	; (80008f4 <updateDisplay+0x25c>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d102      	bne.n	8000726 <updateDisplay+0x8e>
 8000720:	4b77      	ldr	r3, [pc, #476]	; (8000900 <updateDisplay+0x268>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	e001      	b.n	800072a <updateDisplay+0x92>
 8000726:	4b77      	ldr	r3, [pc, #476]	; (8000904 <updateDisplay+0x26c>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	220c      	movs	r2, #12
 800072c:	18ba      	adds	r2, r7, r2
 800072e:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(DISPLAY_SWITCH_PIN.gpio, DISPLAY_SWITCH_PIN.pin, activeDisplay);
 8000730:	4b71      	ldr	r3, [pc, #452]	; (80008f8 <updateDisplay+0x260>)
 8000732:	6818      	ldr	r0, [r3, #0]
 8000734:	4b70      	ldr	r3, [pc, #448]	; (80008f8 <updateDisplay+0x260>)
 8000736:	8899      	ldrh	r1, [r3, #4]
 8000738:	4b6e      	ldr	r3, [pc, #440]	; (80008f4 <updateDisplay+0x25c>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	001a      	movs	r2, r3
 800073e:	f000 ffe4 	bl	800170a <HAL_GPIO_WritePin>
		for (uint8_t i = 0; i < DISPLAY_SEGMENT_COUNT; i++) {
 8000742:	230e      	movs	r3, #14
 8000744:	18fb      	adds	r3, r7, r3
 8000746:	2200      	movs	r2, #0
 8000748:	701a      	strb	r2, [r3, #0]
 800074a:	e020      	b.n	800078e <updateDisplay+0xf6>
		    PinParams *displayPinParams = DisplayPins[i];
 800074c:	240e      	movs	r4, #14
 800074e:	193b      	adds	r3, r7, r4
 8000750:	781a      	ldrb	r2, [r3, #0]
 8000752:	4b6a      	ldr	r3, [pc, #424]	; (80008fc <updateDisplay+0x264>)
 8000754:	0092      	lsls	r2, r2, #2
 8000756:	58d3      	ldr	r3, [r2, r3]
 8000758:	60bb      	str	r3, [r7, #8]
		    HAL_GPIO_WritePin(displayPinParams->gpio, displayPinParams->pin, NumberToDisplaySegments[number] << i & 0x40);
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	6818      	ldr	r0, [r3, #0]
 800075e:	68bb      	ldr	r3, [r7, #8]
 8000760:	8899      	ldrh	r1, [r3, #4]
 8000762:	230c      	movs	r3, #12
 8000764:	18fb      	adds	r3, r7, r3
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	4a67      	ldr	r2, [pc, #412]	; (8000908 <updateDisplay+0x270>)
 800076a:	5cd3      	ldrb	r3, [r2, r3]
 800076c:	001a      	movs	r2, r3
 800076e:	193b      	adds	r3, r7, r4
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	409a      	lsls	r2, r3
 8000774:	0013      	movs	r3, r2
 8000776:	b2db      	uxtb	r3, r3
 8000778:	2240      	movs	r2, #64	; 0x40
 800077a:	4013      	ands	r3, r2
 800077c:	b2db      	uxtb	r3, r3
 800077e:	001a      	movs	r2, r3
 8000780:	f000 ffc3 	bl	800170a <HAL_GPIO_WritePin>
		for (uint8_t i = 0; i < DISPLAY_SEGMENT_COUNT; i++) {
 8000784:	193b      	adds	r3, r7, r4
 8000786:	781a      	ldrb	r2, [r3, #0]
 8000788:	193b      	adds	r3, r7, r4
 800078a:	3201      	adds	r2, #1
 800078c:	701a      	strb	r2, [r3, #0]
 800078e:	230e      	movs	r3, #14
 8000790:	18fb      	adds	r3, r7, r3
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b06      	cmp	r3, #6
 8000796:	d9d9      	bls.n	800074c <updateDisplay+0xb4>
		}

		if(boardMode == BIN_TO_HEX_MODE)
 8000798:	4b54      	ldr	r3, [pc, #336]	; (80008ec <updateDisplay+0x254>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b01      	cmp	r3, #1
 800079e:	d107      	bne.n	80007b0 <updateDisplay+0x118>
			HAL_GPIO_WritePin(LS_DISPLAY_DOT_PIN.gpio, LS_DISPLAY_DOT_PIN.pin, GPIO_PIN_RESET);
 80007a0:	4b5a      	ldr	r3, [pc, #360]	; (800090c <updateDisplay+0x274>)
 80007a2:	6818      	ldr	r0, [r3, #0]
 80007a4:	4b59      	ldr	r3, [pc, #356]	; (800090c <updateDisplay+0x274>)
 80007a6:	889b      	ldrh	r3, [r3, #4]
 80007a8:	2200      	movs	r2, #0
 80007aa:	0019      	movs	r1, r3
 80007ac:	f000 ffad 	bl	800170a <HAL_GPIO_WritePin>

		activeDisplay = notActiveDisplay;
 80007b0:	4b50      	ldr	r3, [pc, #320]	; (80008f4 <updateDisplay+0x25c>)
 80007b2:	220d      	movs	r2, #13
 80007b4:	18ba      	adds	r2, r7, r2
 80007b6:	7812      	ldrb	r2, [r2, #0]
 80007b8:	701a      	strb	r2, [r3, #0]
	if(boardMode == HEX_TO_BIN_MODE || (boardMode == BIN_TO_HEX_MODE && displayMode == READ_FROM_BITS)) {
 80007ba:	e092      	b.n	80008e2 <updateDisplay+0x24a>
	} else {
		activeDisplay = LS_DISPLAY;
 80007bc:	4b4d      	ldr	r3, [pc, #308]	; (80008f4 <updateDisplay+0x25c>)
 80007be:	2201      	movs	r2, #1
 80007c0:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(DISPLAY_SWITCH_PIN.gpio, DISPLAY_SWITCH_PIN.pin, activeDisplay);
 80007c2:	4b4d      	ldr	r3, [pc, #308]	; (80008f8 <updateDisplay+0x260>)
 80007c4:	6818      	ldr	r0, [r3, #0]
 80007c6:	4b4c      	ldr	r3, [pc, #304]	; (80008f8 <updateDisplay+0x260>)
 80007c8:	8899      	ldrh	r1, [r3, #4]
 80007ca:	4b4a      	ldr	r3, [pc, #296]	; (80008f4 <updateDisplay+0x25c>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	001a      	movs	r2, r3
 80007d0:	f000 ff9b 	bl	800170a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(OUTPUT_DISPLAY_A_PIN.gpio, OUTPUT_DISPLAY_A_PIN.pin, HAL_GPIO_ReadPin(INPUT_DISPLAY_A_PIN.gpio, INPUT_DISPLAY_A_PIN.pin));
 80007d4:	4b4e      	ldr	r3, [pc, #312]	; (8000910 <updateDisplay+0x278>)
 80007d6:	681c      	ldr	r4, [r3, #0]
 80007d8:	4b4d      	ldr	r3, [pc, #308]	; (8000910 <updateDisplay+0x278>)
 80007da:	889d      	ldrh	r5, [r3, #4]
 80007dc:	4b4d      	ldr	r3, [pc, #308]	; (8000914 <updateDisplay+0x27c>)
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	4b4c      	ldr	r3, [pc, #304]	; (8000914 <updateDisplay+0x27c>)
 80007e2:	889b      	ldrh	r3, [r3, #4]
 80007e4:	0019      	movs	r1, r3
 80007e6:	0010      	movs	r0, r2
 80007e8:	f000 ff72 	bl	80016d0 <HAL_GPIO_ReadPin>
 80007ec:	0003      	movs	r3, r0
 80007ee:	001a      	movs	r2, r3
 80007f0:	0029      	movs	r1, r5
 80007f2:	0020      	movs	r0, r4
 80007f4:	f000 ff89 	bl	800170a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUTPUT_DISPLAY_B_PIN.gpio, OUTPUT_DISPLAY_B_PIN.pin, HAL_GPIO_ReadPin(INPUT_DISPLAY_B_PIN.gpio, INPUT_DISPLAY_B_PIN.pin));
 80007f8:	4b47      	ldr	r3, [pc, #284]	; (8000918 <updateDisplay+0x280>)
 80007fa:	681c      	ldr	r4, [r3, #0]
 80007fc:	4b46      	ldr	r3, [pc, #280]	; (8000918 <updateDisplay+0x280>)
 80007fe:	889d      	ldrh	r5, [r3, #4]
 8000800:	4b46      	ldr	r3, [pc, #280]	; (800091c <updateDisplay+0x284>)
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	4b45      	ldr	r3, [pc, #276]	; (800091c <updateDisplay+0x284>)
 8000806:	889b      	ldrh	r3, [r3, #4]
 8000808:	0019      	movs	r1, r3
 800080a:	0010      	movs	r0, r2
 800080c:	f000 ff60 	bl	80016d0 <HAL_GPIO_ReadPin>
 8000810:	0003      	movs	r3, r0
 8000812:	001a      	movs	r2, r3
 8000814:	0029      	movs	r1, r5
 8000816:	0020      	movs	r0, r4
 8000818:	f000 ff77 	bl	800170a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUTPUT_DISPLAY_C_PIN.gpio, OUTPUT_DISPLAY_C_PIN.pin, HAL_GPIO_ReadPin(INPUT_DISPLAY_C_PIN.gpio, INPUT_DISPLAY_C_PIN.pin));
 800081c:	4b40      	ldr	r3, [pc, #256]	; (8000920 <updateDisplay+0x288>)
 800081e:	681c      	ldr	r4, [r3, #0]
 8000820:	4b3f      	ldr	r3, [pc, #252]	; (8000920 <updateDisplay+0x288>)
 8000822:	889d      	ldrh	r5, [r3, #4]
 8000824:	4b3f      	ldr	r3, [pc, #252]	; (8000924 <updateDisplay+0x28c>)
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	4b3e      	ldr	r3, [pc, #248]	; (8000924 <updateDisplay+0x28c>)
 800082a:	889b      	ldrh	r3, [r3, #4]
 800082c:	0019      	movs	r1, r3
 800082e:	0010      	movs	r0, r2
 8000830:	f000 ff4e 	bl	80016d0 <HAL_GPIO_ReadPin>
 8000834:	0003      	movs	r3, r0
 8000836:	001a      	movs	r2, r3
 8000838:	0029      	movs	r1, r5
 800083a:	0020      	movs	r0, r4
 800083c:	f000 ff65 	bl	800170a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUTPUT_DISPLAY_D_PIN.gpio, OUTPUT_DISPLAY_D_PIN.pin, HAL_GPIO_ReadPin(INPUT_DISPLAY_D_PIN.gpio, INPUT_DISPLAY_D_PIN.pin));
 8000840:	4b39      	ldr	r3, [pc, #228]	; (8000928 <updateDisplay+0x290>)
 8000842:	681c      	ldr	r4, [r3, #0]
 8000844:	4b38      	ldr	r3, [pc, #224]	; (8000928 <updateDisplay+0x290>)
 8000846:	889d      	ldrh	r5, [r3, #4]
 8000848:	4b38      	ldr	r3, [pc, #224]	; (800092c <updateDisplay+0x294>)
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	4b37      	ldr	r3, [pc, #220]	; (800092c <updateDisplay+0x294>)
 800084e:	889b      	ldrh	r3, [r3, #4]
 8000850:	0019      	movs	r1, r3
 8000852:	0010      	movs	r0, r2
 8000854:	f000 ff3c 	bl	80016d0 <HAL_GPIO_ReadPin>
 8000858:	0003      	movs	r3, r0
 800085a:	001a      	movs	r2, r3
 800085c:	0029      	movs	r1, r5
 800085e:	0020      	movs	r0, r4
 8000860:	f000 ff53 	bl	800170a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUTPUT_DISPLAY_E_PIN.gpio, OUTPUT_DISPLAY_E_PIN.pin, HAL_GPIO_ReadPin(INPUT_DISPLAY_E_PIN.gpio, INPUT_DISPLAY_E_PIN.pin));
 8000864:	4b32      	ldr	r3, [pc, #200]	; (8000930 <updateDisplay+0x298>)
 8000866:	681c      	ldr	r4, [r3, #0]
 8000868:	4b31      	ldr	r3, [pc, #196]	; (8000930 <updateDisplay+0x298>)
 800086a:	889d      	ldrh	r5, [r3, #4]
 800086c:	4b31      	ldr	r3, [pc, #196]	; (8000934 <updateDisplay+0x29c>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	4b30      	ldr	r3, [pc, #192]	; (8000934 <updateDisplay+0x29c>)
 8000872:	889b      	ldrh	r3, [r3, #4]
 8000874:	0019      	movs	r1, r3
 8000876:	0010      	movs	r0, r2
 8000878:	f000 ff2a 	bl	80016d0 <HAL_GPIO_ReadPin>
 800087c:	0003      	movs	r3, r0
 800087e:	001a      	movs	r2, r3
 8000880:	0029      	movs	r1, r5
 8000882:	0020      	movs	r0, r4
 8000884:	f000 ff41 	bl	800170a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUTPUT_DISPLAY_F_PIN.gpio, OUTPUT_DISPLAY_F_PIN.pin, HAL_GPIO_ReadPin(INPUT_DISPLAY_F_PIN.gpio, INPUT_DISPLAY_F_PIN.pin));
 8000888:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <updateDisplay+0x2a0>)
 800088a:	681c      	ldr	r4, [r3, #0]
 800088c:	4b2a      	ldr	r3, [pc, #168]	; (8000938 <updateDisplay+0x2a0>)
 800088e:	889d      	ldrh	r5, [r3, #4]
 8000890:	4b2a      	ldr	r3, [pc, #168]	; (800093c <updateDisplay+0x2a4>)
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	4b29      	ldr	r3, [pc, #164]	; (800093c <updateDisplay+0x2a4>)
 8000896:	889b      	ldrh	r3, [r3, #4]
 8000898:	0019      	movs	r1, r3
 800089a:	0010      	movs	r0, r2
 800089c:	f000 ff18 	bl	80016d0 <HAL_GPIO_ReadPin>
 80008a0:	0003      	movs	r3, r0
 80008a2:	001a      	movs	r2, r3
 80008a4:	0029      	movs	r1, r5
 80008a6:	0020      	movs	r0, r4
 80008a8:	f000 ff2f 	bl	800170a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUTPUT_DISPLAY_G_PIN.gpio, OUTPUT_DISPLAY_G_PIN.pin, HAL_GPIO_ReadPin(INPUT_DISPLAY_G_PIN.gpio, INPUT_DISPLAY_G_PIN.pin));
 80008ac:	4b24      	ldr	r3, [pc, #144]	; (8000940 <updateDisplay+0x2a8>)
 80008ae:	681c      	ldr	r4, [r3, #0]
 80008b0:	4b23      	ldr	r3, [pc, #140]	; (8000940 <updateDisplay+0x2a8>)
 80008b2:	889d      	ldrh	r5, [r3, #4]
 80008b4:	4b23      	ldr	r3, [pc, #140]	; (8000944 <updateDisplay+0x2ac>)
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	4b22      	ldr	r3, [pc, #136]	; (8000944 <updateDisplay+0x2ac>)
 80008ba:	889b      	ldrh	r3, [r3, #4]
 80008bc:	0019      	movs	r1, r3
 80008be:	0010      	movs	r0, r2
 80008c0:	f000 ff06 	bl	80016d0 <HAL_GPIO_ReadPin>
 80008c4:	0003      	movs	r3, r0
 80008c6:	001a      	movs	r2, r3
 80008c8:	0029      	movs	r1, r5
 80008ca:	0020      	movs	r0, r4
 80008cc:	f000 ff1d 	bl	800170a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LS_DISPLAY_DOT_PIN.gpio, LS_DISPLAY_DOT_PIN.pin, GPIO_PIN_SET);
 80008d0:	4b0e      	ldr	r3, [pc, #56]	; (800090c <updateDisplay+0x274>)
 80008d2:	6818      	ldr	r0, [r3, #0]
 80008d4:	4b0d      	ldr	r3, [pc, #52]	; (800090c <updateDisplay+0x274>)
 80008d6:	889b      	ldrh	r3, [r3, #4]
 80008d8:	2201      	movs	r2, #1
 80008da:	0019      	movs	r1, r3
 80008dc:	f000 ff15 	bl	800170a <HAL_GPIO_WritePin>
	}
}
 80008e0:	46c0      	nop			; (mov r8, r8)
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	46bd      	mov	sp, r7
 80008e6:	b004      	add	sp, #16
 80008e8:	bdb0      	pop	{r4, r5, r7, pc}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	2000018d 	.word	0x2000018d
 80008f0:	2000018c 	.word	0x2000018c
 80008f4:	20000008 	.word	0x20000008
 80008f8:	200000a4 	.word	0x200000a4
 80008fc:	2000000c 	.word	0x2000000c
 8000900:	2000018f 	.word	0x2000018f
 8000904:	2000018e 	.word	0x2000018e
 8000908:	20000028 	.word	0x20000028
 800090c:	20000184 	.word	0x20000184
 8000910:	200000ac 	.word	0x200000ac
 8000914:	2000014c 	.word	0x2000014c
 8000918:	200000b4 	.word	0x200000b4
 800091c:	20000154 	.word	0x20000154
 8000920:	200000bc 	.word	0x200000bc
 8000924:	2000015c 	.word	0x2000015c
 8000928:	200000c4 	.word	0x200000c4
 800092c:	20000164 	.word	0x20000164
 8000930:	200000cc 	.word	0x200000cc
 8000934:	2000016c 	.word	0x2000016c
 8000938:	200000d4 	.word	0x200000d4
 800093c:	20000174 	.word	0x20000174
 8000940:	200000dc 	.word	0x200000dc
 8000944:	2000017c 	.word	0x2000017c

08000948 <updateButton>:

void updateButton(Button *button) {
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	if((ButtonPinState)HAL_GPIO_ReadPin(button->pinParams->gpio, button->pinParams->pin) == BUTTON_IS_PRESSED && button->isButtonPressed) {
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	889b      	ldrh	r3, [r3, #4]
 800095c:	0019      	movs	r1, r3
 800095e:	0010      	movs	r0, r2
 8000960:	f000 feb6 	bl	80016d0 <HAL_GPIO_ReadPin>
 8000964:	1e03      	subs	r3, r0, #0
 8000966:	d10e      	bne.n	8000986 <updateButton+0x3e>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	791b      	ldrb	r3, [r3, #4]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d00a      	beq.n	8000986 <updateButton+0x3e>
		button->isButtonPressed = 0;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2200      	movs	r2, #0
 8000974:	711a      	strb	r2, [r3, #4]
		button->needToProcces = 1;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2201      	movs	r2, #1
 800097a:	731a      	strb	r2, [r3, #12]
		button->pressedMillis = HAL_GetTick();
 800097c:	f000 fc5c 	bl	8001238 <HAL_GetTick>
 8000980:	0002      	movs	r2, r0
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	609a      	str	r2, [r3, #8]
	}

	if(!button->isButtonPressed && (HAL_GetTick() - button->pressedMillis) > BUTTON_DEBOUNCE_MILLIS)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	791b      	ldrb	r3, [r3, #4]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d10c      	bne.n	80009a8 <updateButton+0x60>
 800098e:	f000 fc53 	bl	8001238 <HAL_GetTick>
 8000992:	0002      	movs	r2, r0
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	689b      	ldr	r3, [r3, #8]
 8000998:	1ad2      	subs	r2, r2, r3
 800099a:	238a      	movs	r3, #138	; 0x8a
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	429a      	cmp	r2, r3
 80009a0:	d302      	bcc.n	80009a8 <updateButton+0x60>
		button->isButtonPressed = 1;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2201      	movs	r2, #1
 80009a6:	711a      	strb	r2, [r3, #4]
}
 80009a8:	46c0      	nop			; (mov r8, r8)
 80009aa:	46bd      	mov	sp, r7
 80009ac:	b002      	add	sp, #8
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <getIncrementedNumber>:

uint8_t getIncrementedNumber(uint8_t number) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	0002      	movs	r2, r0
 80009b8:	1dfb      	adds	r3, r7, #7
 80009ba:	701a      	strb	r2, [r3, #0]
	return number == MAX_NUMBER ? MIN_NUMBER : number + 1;
 80009bc:	1dfb      	adds	r3, r7, #7
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b0f      	cmp	r3, #15
 80009c2:	d004      	beq.n	80009ce <getIncrementedNumber+0x1e>
 80009c4:	1dfb      	adds	r3, r7, #7
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	3301      	adds	r3, #1
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	e000      	b.n	80009d0 <getIncrementedNumber+0x20>
 80009ce:	2300      	movs	r3, #0
}
 80009d0:	0018      	movs	r0, r3
 80009d2:	46bd      	mov	sp, r7
 80009d4:	b002      	add	sp, #8
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <getDecrementedNumber>:

uint8_t getDecrementedNumber(uint8_t number) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	0002      	movs	r2, r0
 80009e0:	1dfb      	adds	r3, r7, #7
 80009e2:	701a      	strb	r2, [r3, #0]
	return number == MIN_NUMBER ? MAX_NUMBER : number - 1;
 80009e4:	1dfb      	adds	r3, r7, #7
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d004      	beq.n	80009f6 <getDecrementedNumber+0x1e>
 80009ec:	1dfb      	adds	r3, r7, #7
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	3b01      	subs	r3, #1
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	e000      	b.n	80009f8 <getDecrementedNumber+0x20>
 80009f6:	230f      	movs	r3, #15
}
 80009f8:	0018      	movs	r0, r3
 80009fa:	46bd      	mov	sp, r7
 80009fc:	b002      	add	sp, #8
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <proccesButton>:

void proccesButton(PinParams *buttonPinParams) {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	if(buttonPinParams->gpio == MS_INCREMENT_BUTTON_PIN.gpio && buttonPinParams->pin == MS_INCREMENT_BUTTON_PIN.pin)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	4b2a      	ldr	r3, [pc, #168]	; (8000ab8 <proccesButton+0xb8>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d10e      	bne.n	8000a32 <proccesButton+0x32>
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	889a      	ldrh	r2, [r3, #4]
 8000a18:	4b27      	ldr	r3, [pc, #156]	; (8000ab8 <proccesButton+0xb8>)
 8000a1a:	889b      	ldrh	r3, [r3, #4]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d108      	bne.n	8000a32 <proccesButton+0x32>
		msNumber = getIncrementedNumber(msNumber);
 8000a20:	4b26      	ldr	r3, [pc, #152]	; (8000abc <proccesButton+0xbc>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	0018      	movs	r0, r3
 8000a26:	f7ff ffc3 	bl	80009b0 <getIncrementedNumber>
 8000a2a:	0003      	movs	r3, r0
 8000a2c:	001a      	movs	r2, r3
 8000a2e:	4b23      	ldr	r3, [pc, #140]	; (8000abc <proccesButton+0xbc>)
 8000a30:	701a      	strb	r2, [r3, #0]

	if(buttonPinParams->gpio == MS_DECREMENT_BUTTON_PIN.gpio && buttonPinParams->pin == MS_DECREMENT_BUTTON_PIN.pin)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	4b22      	ldr	r3, [pc, #136]	; (8000ac0 <proccesButton+0xc0>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	d10e      	bne.n	8000a5c <proccesButton+0x5c>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	889a      	ldrh	r2, [r3, #4]
 8000a42:	4b1f      	ldr	r3, [pc, #124]	; (8000ac0 <proccesButton+0xc0>)
 8000a44:	889b      	ldrh	r3, [r3, #4]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d108      	bne.n	8000a5c <proccesButton+0x5c>
		msNumber = getDecrementedNumber(msNumber);
 8000a4a:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <proccesButton+0xbc>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f7ff ffc2 	bl	80009d8 <getDecrementedNumber>
 8000a54:	0003      	movs	r3, r0
 8000a56:	001a      	movs	r2, r3
 8000a58:	4b18      	ldr	r3, [pc, #96]	; (8000abc <proccesButton+0xbc>)
 8000a5a:	701a      	strb	r2, [r3, #0]

	if(buttonPinParams->gpio == LS_INCREMENT_BUTTON_PIN.gpio && buttonPinParams->pin == LS_INCREMENT_BUTTON_PIN.pin)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	4b18      	ldr	r3, [pc, #96]	; (8000ac4 <proccesButton+0xc4>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d10e      	bne.n	8000a86 <proccesButton+0x86>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	889a      	ldrh	r2, [r3, #4]
 8000a6c:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <proccesButton+0xc4>)
 8000a6e:	889b      	ldrh	r3, [r3, #4]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d108      	bne.n	8000a86 <proccesButton+0x86>
		lsNumber = getIncrementedNumber(lsNumber);
 8000a74:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <proccesButton+0xc8>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f7ff ff99 	bl	80009b0 <getIncrementedNumber>
 8000a7e:	0003      	movs	r3, r0
 8000a80:	001a      	movs	r2, r3
 8000a82:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <proccesButton+0xc8>)
 8000a84:	701a      	strb	r2, [r3, #0]

	if(buttonPinParams->gpio == LS_DECREMENT_BUTTON_PIN.gpio && buttonPinParams->pin == LS_DECREMENT_BUTTON_PIN.pin)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <proccesButton+0xcc>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d10e      	bne.n	8000ab0 <proccesButton+0xb0>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	889a      	ldrh	r2, [r3, #4]
 8000a96:	4b0d      	ldr	r3, [pc, #52]	; (8000acc <proccesButton+0xcc>)
 8000a98:	889b      	ldrh	r3, [r3, #4]
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d108      	bne.n	8000ab0 <proccesButton+0xb0>
		lsNumber = getDecrementedNumber(lsNumber);
 8000a9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <proccesButton+0xc8>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f7ff ff98 	bl	80009d8 <getDecrementedNumber>
 8000aa8:	0003      	movs	r3, r0
 8000aaa:	001a      	movs	r2, r3
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <proccesButton+0xc8>)
 8000aae:	701a      	strb	r2, [r3, #0]
}
 8000ab0:	46c0      	nop			; (mov r8, r8)
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	b002      	add	sp, #8
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	200000e4 	.word	0x200000e4
 8000abc:	2000018f 	.word	0x2000018f
 8000ac0:	200000ec 	.word	0x200000ec
 8000ac4:	200000f4 	.word	0x200000f4
 8000ac8:	2000018e 	.word	0x2000018e
 8000acc:	200000fc 	.word	0x200000fc

08000ad0 <getInvertedBit>:

uint8_t getInvertedBit(uint8_t number, uint8_t bitPosition) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	0002      	movs	r2, r0
 8000ad8:	1dfb      	adds	r3, r7, #7
 8000ada:	701a      	strb	r2, [r3, #0]
 8000adc:	1dbb      	adds	r3, r7, #6
 8000ade:	1c0a      	adds	r2, r1, #0
 8000ae0:	701a      	strb	r2, [r3, #0]
	return ~number >> bitPosition & 1;
 8000ae2:	1dfb      	adds	r3, r7, #7
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	43da      	mvns	r2, r3
 8000ae8:	1dbb      	adds	r3, r7, #6
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	411a      	asrs	r2, r3
 8000aee:	0013      	movs	r3, r2
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	2201      	movs	r2, #1
 8000af4:	4013      	ands	r3, r2
 8000af6:	b2db      	uxtb	r3, r3
}
 8000af8:	0018      	movs	r0, r3
 8000afa:	46bd      	mov	sp, r7
 8000afc:	b002      	add	sp, #8
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <writeBinaryRepresention>:

void writeBinaryRepresention() {
 8000b00:	b5b0      	push	{r4, r5, r7, lr}
 8000b02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MS_BINARY_1_PIN.gpio, MS_BINARY_1_PIN.pin, getInvertedBit(msNumber, 0));
 8000b04:	4b41      	ldr	r3, [pc, #260]	; (8000c0c <writeBinaryRepresention+0x10c>)
 8000b06:	681c      	ldr	r4, [r3, #0]
 8000b08:	4b40      	ldr	r3, [pc, #256]	; (8000c0c <writeBinaryRepresention+0x10c>)
 8000b0a:	889d      	ldrh	r5, [r3, #4]
 8000b0c:	4b40      	ldr	r3, [pc, #256]	; (8000c10 <writeBinaryRepresention+0x110>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2100      	movs	r1, #0
 8000b12:	0018      	movs	r0, r3
 8000b14:	f7ff ffdc 	bl	8000ad0 <getInvertedBit>
 8000b18:	0003      	movs	r3, r0
 8000b1a:	001a      	movs	r2, r3
 8000b1c:	0029      	movs	r1, r5
 8000b1e:	0020      	movs	r0, r4
 8000b20:	f000 fdf3 	bl	800170a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MS_BINARY_2_PIN.gpio, MS_BINARY_2_PIN.pin, getInvertedBit(msNumber, 1));
 8000b24:	4b3b      	ldr	r3, [pc, #236]	; (8000c14 <writeBinaryRepresention+0x114>)
 8000b26:	681c      	ldr	r4, [r3, #0]
 8000b28:	4b3a      	ldr	r3, [pc, #232]	; (8000c14 <writeBinaryRepresention+0x114>)
 8000b2a:	889d      	ldrh	r5, [r3, #4]
 8000b2c:	4b38      	ldr	r3, [pc, #224]	; (8000c10 <writeBinaryRepresention+0x110>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2101      	movs	r1, #1
 8000b32:	0018      	movs	r0, r3
 8000b34:	f7ff ffcc 	bl	8000ad0 <getInvertedBit>
 8000b38:	0003      	movs	r3, r0
 8000b3a:	001a      	movs	r2, r3
 8000b3c:	0029      	movs	r1, r5
 8000b3e:	0020      	movs	r0, r4
 8000b40:	f000 fde3 	bl	800170a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MS_BINARY_4_PIN.gpio, MS_BINARY_4_PIN.pin, getInvertedBit(msNumber, 2));
 8000b44:	4b34      	ldr	r3, [pc, #208]	; (8000c18 <writeBinaryRepresention+0x118>)
 8000b46:	681c      	ldr	r4, [r3, #0]
 8000b48:	4b33      	ldr	r3, [pc, #204]	; (8000c18 <writeBinaryRepresention+0x118>)
 8000b4a:	889d      	ldrh	r5, [r3, #4]
 8000b4c:	4b30      	ldr	r3, [pc, #192]	; (8000c10 <writeBinaryRepresention+0x110>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2102      	movs	r1, #2
 8000b52:	0018      	movs	r0, r3
 8000b54:	f7ff ffbc 	bl	8000ad0 <getInvertedBit>
 8000b58:	0003      	movs	r3, r0
 8000b5a:	001a      	movs	r2, r3
 8000b5c:	0029      	movs	r1, r5
 8000b5e:	0020      	movs	r0, r4
 8000b60:	f000 fdd3 	bl	800170a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MS_BINARY_8_PIN.gpio, MS_BINARY_8_PIN.pin, getInvertedBit(msNumber, 3));
 8000b64:	4b2d      	ldr	r3, [pc, #180]	; (8000c1c <writeBinaryRepresention+0x11c>)
 8000b66:	681c      	ldr	r4, [r3, #0]
 8000b68:	4b2c      	ldr	r3, [pc, #176]	; (8000c1c <writeBinaryRepresention+0x11c>)
 8000b6a:	889d      	ldrh	r5, [r3, #4]
 8000b6c:	4b28      	ldr	r3, [pc, #160]	; (8000c10 <writeBinaryRepresention+0x110>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2103      	movs	r1, #3
 8000b72:	0018      	movs	r0, r3
 8000b74:	f7ff ffac 	bl	8000ad0 <getInvertedBit>
 8000b78:	0003      	movs	r3, r0
 8000b7a:	001a      	movs	r2, r3
 8000b7c:	0029      	movs	r1, r5
 8000b7e:	0020      	movs	r0, r4
 8000b80:	f000 fdc3 	bl	800170a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LS_BINARY_1_PIN.gpio, LS_BINARY_1_PIN.pin, getInvertedBit(lsNumber, 0));
 8000b84:	4b26      	ldr	r3, [pc, #152]	; (8000c20 <writeBinaryRepresention+0x120>)
 8000b86:	681c      	ldr	r4, [r3, #0]
 8000b88:	4b25      	ldr	r3, [pc, #148]	; (8000c20 <writeBinaryRepresention+0x120>)
 8000b8a:	889d      	ldrh	r5, [r3, #4]
 8000b8c:	4b25      	ldr	r3, [pc, #148]	; (8000c24 <writeBinaryRepresention+0x124>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2100      	movs	r1, #0
 8000b92:	0018      	movs	r0, r3
 8000b94:	f7ff ff9c 	bl	8000ad0 <getInvertedBit>
 8000b98:	0003      	movs	r3, r0
 8000b9a:	001a      	movs	r2, r3
 8000b9c:	0029      	movs	r1, r5
 8000b9e:	0020      	movs	r0, r4
 8000ba0:	f000 fdb3 	bl	800170a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LS_BINARY_2_PIN.gpio, LS_BINARY_2_PIN.pin, getInvertedBit(lsNumber, 1));
 8000ba4:	4b20      	ldr	r3, [pc, #128]	; (8000c28 <writeBinaryRepresention+0x128>)
 8000ba6:	681c      	ldr	r4, [r3, #0]
 8000ba8:	4b1f      	ldr	r3, [pc, #124]	; (8000c28 <writeBinaryRepresention+0x128>)
 8000baa:	889d      	ldrh	r5, [r3, #4]
 8000bac:	4b1d      	ldr	r3, [pc, #116]	; (8000c24 <writeBinaryRepresention+0x124>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f7ff ff8c 	bl	8000ad0 <getInvertedBit>
 8000bb8:	0003      	movs	r3, r0
 8000bba:	001a      	movs	r2, r3
 8000bbc:	0029      	movs	r1, r5
 8000bbe:	0020      	movs	r0, r4
 8000bc0:	f000 fda3 	bl	800170a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LS_BINARY_4_PIN.gpio, LS_BINARY_4_PIN.pin, getInvertedBit(lsNumber, 2));
 8000bc4:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <writeBinaryRepresention+0x12c>)
 8000bc6:	681c      	ldr	r4, [r3, #0]
 8000bc8:	4b18      	ldr	r3, [pc, #96]	; (8000c2c <writeBinaryRepresention+0x12c>)
 8000bca:	889d      	ldrh	r5, [r3, #4]
 8000bcc:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <writeBinaryRepresention+0x124>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2102      	movs	r1, #2
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f7ff ff7c 	bl	8000ad0 <getInvertedBit>
 8000bd8:	0003      	movs	r3, r0
 8000bda:	001a      	movs	r2, r3
 8000bdc:	0029      	movs	r1, r5
 8000bde:	0020      	movs	r0, r4
 8000be0:	f000 fd93 	bl	800170a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LS_BINARY_8_PIN.gpio, LS_BINARY_8_PIN.pin, getInvertedBit(lsNumber, 3));
 8000be4:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <writeBinaryRepresention+0x130>)
 8000be6:	681c      	ldr	r4, [r3, #0]
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <writeBinaryRepresention+0x130>)
 8000bea:	889d      	ldrh	r5, [r3, #4]
 8000bec:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <writeBinaryRepresention+0x124>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2103      	movs	r1, #3
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f7ff ff6c 	bl	8000ad0 <getInvertedBit>
 8000bf8:	0003      	movs	r3, r0
 8000bfa:	001a      	movs	r2, r3
 8000bfc:	0029      	movs	r1, r5
 8000bfe:	0020      	movs	r0, r4
 8000c00:	f000 fd83 	bl	800170a <HAL_GPIO_WritePin>
}
 8000c04:	46c0      	nop			; (mov r8, r8)
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bdb0      	pop	{r4, r5, r7, pc}
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	20000104 	.word	0x20000104
 8000c10:	2000018f 	.word	0x2000018f
 8000c14:	2000010c 	.word	0x2000010c
 8000c18:	20000114 	.word	0x20000114
 8000c1c:	2000011c 	.word	0x2000011c
 8000c20:	20000124 	.word	0x20000124
 8000c24:	2000018e 	.word	0x2000018e
 8000c28:	20000134 	.word	0x20000134
 8000c2c:	2000013c 	.word	0x2000013c
 8000c30:	2000012c 	.word	0x2000012c

08000c34 <pollAndProcessButtons>:

void pollAndProcessButtons() {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < ButtonCount; i++)
 8000c3a:	1dfb      	adds	r3, r7, #7
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
 8000c40:	e00c      	b.n	8000c5c <pollAndProcessButtons+0x28>
		updateButton(&buttons[i]);
 8000c42:	1dfb      	adds	r3, r7, #7
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	011a      	lsls	r2, r3, #4
 8000c48:	4b20      	ldr	r3, [pc, #128]	; (8000ccc <pollAndProcessButtons+0x98>)
 8000c4a:	18d3      	adds	r3, r2, r3
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f7ff fe7b 	bl	8000948 <updateButton>
	for (uint8_t i = 0; i < ButtonCount; i++)
 8000c52:	1dfb      	adds	r3, r7, #7
 8000c54:	781a      	ldrb	r2, [r3, #0]
 8000c56:	1dfb      	adds	r3, r7, #7
 8000c58:	3201      	adds	r2, #1
 8000c5a:	701a      	strb	r2, [r3, #0]
 8000c5c:	1dfb      	adds	r3, r7, #7
 8000c5e:	781a      	ldrb	r2, [r3, #0]
 8000c60:	4b1b      	ldr	r3, [pc, #108]	; (8000cd0 <pollAndProcessButtons+0x9c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d3ec      	bcc.n	8000c42 <pollAndProcessButtons+0xe>

	uint8_t updateBinaryRepresentation = 0;
 8000c68:	1dbb      	adds	r3, r7, #6
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i < ButtonCount; i++) {
 8000c6e:	1d7b      	adds	r3, r7, #5
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]
 8000c74:	e019      	b.n	8000caa <pollAndProcessButtons+0x76>
		Button *button = &buttons[i];
 8000c76:	1d7b      	adds	r3, r7, #5
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	011a      	lsls	r2, r3, #4
 8000c7c:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <pollAndProcessButtons+0x98>)
 8000c7e:	18d3      	adds	r3, r2, r3
 8000c80:	603b      	str	r3, [r7, #0]
		if(button->needToProcces) {
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	7b1b      	ldrb	r3, [r3, #12]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d00a      	beq.n	8000ca0 <pollAndProcessButtons+0x6c>
			proccesButton(button->pinParams);
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f7ff feb6 	bl	8000a00 <proccesButton>
			button->needToProcces = 0;
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	2200      	movs	r2, #0
 8000c98:	731a      	strb	r2, [r3, #12]

			updateBinaryRepresentation = 1;
 8000c9a:	1dbb      	adds	r3, r7, #6
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < ButtonCount; i++) {
 8000ca0:	1d7b      	adds	r3, r7, #5
 8000ca2:	781a      	ldrb	r2, [r3, #0]
 8000ca4:	1d7b      	adds	r3, r7, #5
 8000ca6:	3201      	adds	r2, #1
 8000ca8:	701a      	strb	r2, [r3, #0]
 8000caa:	1d7b      	adds	r3, r7, #5
 8000cac:	781a      	ldrb	r2, [r3, #0]
 8000cae:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <pollAndProcessButtons+0x9c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	d3df      	bcc.n	8000c76 <pollAndProcessButtons+0x42>
		}
	}

	if(updateBinaryRepresentation)
 8000cb6:	1dbb      	adds	r3, r7, #6
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <pollAndProcessButtons+0x8e>
		writeBinaryRepresention();
 8000cbe:	f7ff ff1f 	bl	8000b00 <writeBinaryRepresention>
}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	b002      	add	sp, #8
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	20000038 	.word	0x20000038
 8000cd0:	20000078 	.word	0x20000078

08000cd4 <getNumberFromInvertedBits>:

uint8_t getNumberFromInvertedBits(uint8_t bit0, uint8_t bit1, uint8_t bit2, uint8_t bit3) {
 8000cd4:	b5b0      	push	{r4, r5, r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	0005      	movs	r5, r0
 8000cdc:	000c      	movs	r4, r1
 8000cde:	0010      	movs	r0, r2
 8000ce0:	0019      	movs	r1, r3
 8000ce2:	1dfb      	adds	r3, r7, #7
 8000ce4:	1c2a      	adds	r2, r5, #0
 8000ce6:	701a      	strb	r2, [r3, #0]
 8000ce8:	1dbb      	adds	r3, r7, #6
 8000cea:	1c22      	adds	r2, r4, #0
 8000cec:	701a      	strb	r2, [r3, #0]
 8000cee:	1d7b      	adds	r3, r7, #5
 8000cf0:	1c02      	adds	r2, r0, #0
 8000cf2:	701a      	strb	r2, [r3, #0]
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	1c0a      	adds	r2, r1, #0
 8000cf8:	701a      	strb	r2, [r3, #0]
	uint8_t res = 0;
 8000cfa:	200f      	movs	r0, #15
 8000cfc:	183b      	adds	r3, r7, r0
 8000cfe:	2200      	movs	r2, #0
 8000d00:	701a      	strb	r2, [r3, #0]

	res|= bit0;
 8000d02:	183b      	adds	r3, r7, r0
 8000d04:	1839      	adds	r1, r7, r0
 8000d06:	1dfa      	adds	r2, r7, #7
 8000d08:	7809      	ldrb	r1, [r1, #0]
 8000d0a:	7812      	ldrb	r2, [r2, #0]
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	701a      	strb	r2, [r3, #0]
	res|= bit1 << 1;
 8000d10:	1dbb      	adds	r3, r7, #6
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	b25a      	sxtb	r2, r3
 8000d18:	0001      	movs	r1, r0
 8000d1a:	187b      	adds	r3, r7, r1
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	b25b      	sxtb	r3, r3
 8000d20:	4313      	orrs	r3, r2
 8000d22:	b25a      	sxtb	r2, r3
 8000d24:	187b      	adds	r3, r7, r1
 8000d26:	701a      	strb	r2, [r3, #0]
	res|= bit2 << 2;
 8000d28:	1d7b      	adds	r3, r7, #5
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	b25a      	sxtb	r2, r3
 8000d30:	187b      	adds	r3, r7, r1
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	b25b      	sxtb	r3, r3
 8000d36:	4313      	orrs	r3, r2
 8000d38:	b25a      	sxtb	r2, r3
 8000d3a:	187b      	adds	r3, r7, r1
 8000d3c:	701a      	strb	r2, [r3, #0]
	res|= bit3 << 3;
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	00db      	lsls	r3, r3, #3
 8000d44:	b25a      	sxtb	r2, r3
 8000d46:	187b      	adds	r3, r7, r1
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	b25b      	sxtb	r3, r3
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	b25a      	sxtb	r2, r3
 8000d50:	187b      	adds	r3, r7, r1
 8000d52:	701a      	strb	r2, [r3, #0]

	return ~res & 0xF;
 8000d54:	187b      	adds	r3, r7, r1
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	220f      	movs	r2, #15
 8000d5e:	4013      	ands	r3, r2
 8000d60:	b2db      	uxtb	r3, r3
}
 8000d62:	0018      	movs	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	b004      	add	sp, #16
 8000d68:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000d6c <readBinaryRepresention>:

void readBinaryRepresention() {
 8000d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
	msNumber = getNumberFromInvertedBits(
		HAL_GPIO_ReadPin(MS_BINARY_1_PIN.gpio, MS_BINARY_1_PIN.pin),
 8000d70:	4b31      	ldr	r3, [pc, #196]	; (8000e38 <readBinaryRepresention+0xcc>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	4b30      	ldr	r3, [pc, #192]	; (8000e38 <readBinaryRepresention+0xcc>)
 8000d76:	889b      	ldrh	r3, [r3, #4]
 8000d78:	0019      	movs	r1, r3
 8000d7a:	0010      	movs	r0, r2
 8000d7c:	f000 fca8 	bl	80016d0 <HAL_GPIO_ReadPin>
 8000d80:	0003      	movs	r3, r0
 8000d82:	001c      	movs	r4, r3
		HAL_GPIO_ReadPin(MS_BINARY_2_PIN.gpio, MS_BINARY_2_PIN.pin),
 8000d84:	4b2d      	ldr	r3, [pc, #180]	; (8000e3c <readBinaryRepresention+0xd0>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4b2c      	ldr	r3, [pc, #176]	; (8000e3c <readBinaryRepresention+0xd0>)
 8000d8a:	889b      	ldrh	r3, [r3, #4]
 8000d8c:	0019      	movs	r1, r3
 8000d8e:	0010      	movs	r0, r2
 8000d90:	f000 fc9e 	bl	80016d0 <HAL_GPIO_ReadPin>
 8000d94:	0003      	movs	r3, r0
 8000d96:	001d      	movs	r5, r3
		HAL_GPIO_ReadPin(MS_BINARY_4_PIN.gpio, MS_BINARY_4_PIN.pin),
 8000d98:	4b29      	ldr	r3, [pc, #164]	; (8000e40 <readBinaryRepresention+0xd4>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	4b28      	ldr	r3, [pc, #160]	; (8000e40 <readBinaryRepresention+0xd4>)
 8000d9e:	889b      	ldrh	r3, [r3, #4]
 8000da0:	0019      	movs	r1, r3
 8000da2:	0010      	movs	r0, r2
 8000da4:	f000 fc94 	bl	80016d0 <HAL_GPIO_ReadPin>
 8000da8:	0003      	movs	r3, r0
 8000daa:	001e      	movs	r6, r3
		HAL_GPIO_ReadPin(MS_BINARY_8_PIN.gpio, MS_BINARY_8_PIN.pin)
 8000dac:	4b25      	ldr	r3, [pc, #148]	; (8000e44 <readBinaryRepresention+0xd8>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4b24      	ldr	r3, [pc, #144]	; (8000e44 <readBinaryRepresention+0xd8>)
 8000db2:	889b      	ldrh	r3, [r3, #4]
 8000db4:	0019      	movs	r1, r3
 8000db6:	0010      	movs	r0, r2
 8000db8:	f000 fc8a 	bl	80016d0 <HAL_GPIO_ReadPin>
 8000dbc:	0003      	movs	r3, r0
	msNumber = getNumberFromInvertedBits(
 8000dbe:	0032      	movs	r2, r6
 8000dc0:	0029      	movs	r1, r5
 8000dc2:	0020      	movs	r0, r4
 8000dc4:	f7ff ff86 	bl	8000cd4 <getNumberFromInvertedBits>
 8000dc8:	0003      	movs	r3, r0
 8000dca:	001a      	movs	r2, r3
 8000dcc:	4b1e      	ldr	r3, [pc, #120]	; (8000e48 <readBinaryRepresention+0xdc>)
 8000dce:	701a      	strb	r2, [r3, #0]
	);
	lsNumber = getNumberFromInvertedBits(
		HAL_GPIO_ReadPin(LS_BINARY_1_PIN.gpio, LS_BINARY_1_PIN.pin),
 8000dd0:	4b1e      	ldr	r3, [pc, #120]	; (8000e4c <readBinaryRepresention+0xe0>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4b1d      	ldr	r3, [pc, #116]	; (8000e4c <readBinaryRepresention+0xe0>)
 8000dd6:	889b      	ldrh	r3, [r3, #4]
 8000dd8:	0019      	movs	r1, r3
 8000dda:	0010      	movs	r0, r2
 8000ddc:	f000 fc78 	bl	80016d0 <HAL_GPIO_ReadPin>
 8000de0:	0003      	movs	r3, r0
 8000de2:	001c      	movs	r4, r3
		HAL_GPIO_ReadPin(LS_BINARY_2_PIN.gpio, LS_BINARY_2_PIN.pin),
 8000de4:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <readBinaryRepresention+0xe4>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <readBinaryRepresention+0xe4>)
 8000dea:	889b      	ldrh	r3, [r3, #4]
 8000dec:	0019      	movs	r1, r3
 8000dee:	0010      	movs	r0, r2
 8000df0:	f000 fc6e 	bl	80016d0 <HAL_GPIO_ReadPin>
 8000df4:	0003      	movs	r3, r0
 8000df6:	001d      	movs	r5, r3
		HAL_GPIO_ReadPin(LS_BINARY_4_PIN.gpio, LS_BINARY_4_PIN.pin),
 8000df8:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <readBinaryRepresention+0xe8>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <readBinaryRepresention+0xe8>)
 8000dfe:	889b      	ldrh	r3, [r3, #4]
 8000e00:	0019      	movs	r1, r3
 8000e02:	0010      	movs	r0, r2
 8000e04:	f000 fc64 	bl	80016d0 <HAL_GPIO_ReadPin>
 8000e08:	0003      	movs	r3, r0
 8000e0a:	001e      	movs	r6, r3
		HAL_GPIO_ReadPin(LS_BINARY_8_PIN.gpio, LS_BINARY_8_PIN.pin)
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <readBinaryRepresention+0xec>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <readBinaryRepresention+0xec>)
 8000e12:	889b      	ldrh	r3, [r3, #4]
 8000e14:	0019      	movs	r1, r3
 8000e16:	0010      	movs	r0, r2
 8000e18:	f000 fc5a 	bl	80016d0 <HAL_GPIO_ReadPin>
 8000e1c:	0003      	movs	r3, r0
	lsNumber = getNumberFromInvertedBits(
 8000e1e:	0032      	movs	r2, r6
 8000e20:	0029      	movs	r1, r5
 8000e22:	0020      	movs	r0, r4
 8000e24:	f7ff ff56 	bl	8000cd4 <getNumberFromInvertedBits>
 8000e28:	0003      	movs	r3, r0
 8000e2a:	001a      	movs	r2, r3
 8000e2c:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <readBinaryRepresention+0xf0>)
 8000e2e:	701a      	strb	r2, [r3, #0]
	);
}
 8000e30:	46c0      	nop			; (mov r8, r8)
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	20000104 	.word	0x20000104
 8000e3c:	2000010c 	.word	0x2000010c
 8000e40:	20000114 	.word	0x20000114
 8000e44:	2000011c 	.word	0x2000011c
 8000e48:	2000018f 	.word	0x2000018f
 8000e4c:	20000124 	.word	0x20000124
 8000e50:	20000134 	.word	0x20000134
 8000e54:	2000013c 	.word	0x2000013c
 8000e58:	2000012c 	.word	0x2000012c
 8000e5c:	2000018e 	.word	0x2000018e

08000e60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e66:	f000 f96b 	bl	8001140 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e6a:	f000 f853 	bl	8000f14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM14_Init();
 8000e6e:	f000 f8ef 	bl	8001050 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	4b23      	ldr	r3, [pc, #140]	; (8000f00 <main+0xa0>)
 8000e74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e76:	4b22      	ldr	r3, [pc, #136]	; (8000f00 <main+0xa0>)
 8000e78:	2101      	movs	r1, #1
 8000e7a:	430a      	orrs	r2, r1
 8000e7c:	635a      	str	r2, [r3, #52]	; 0x34
 8000e7e:	4b20      	ldr	r3, [pc, #128]	; (8000f00 <main+0xa0>)
 8000e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e82:	2201      	movs	r2, #1
 8000e84:	4013      	ands	r3, r2
 8000e86:	607b      	str	r3, [r7, #4]
 8000e88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8a:	4b1d      	ldr	r3, [pc, #116]	; (8000f00 <main+0xa0>)
 8000e8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e8e:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <main+0xa0>)
 8000e90:	2102      	movs	r1, #2
 8000e92:	430a      	orrs	r2, r1
 8000e94:	635a      	str	r2, [r3, #52]	; 0x34
 8000e96:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <main+0xa0>)
 8000e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e9a:	2202      	movs	r2, #2
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	603b      	str	r3, [r7, #0]
 8000ea0:	683b      	ldr	r3, [r7, #0]
  initConfigurationPin();
 8000ea2:	f7ff f9b9 	bl	8000218 <initConfigurationPin>
  boardMode = HAL_GPIO_ReadPin(BOARD_MODE_PIN.gpio, BOARD_MODE_PIN.pin);
 8000ea6:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <main+0xa4>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <main+0xa4>)
 8000eac:	889b      	ldrh	r3, [r3, #4]
 8000eae:	0019      	movs	r1, r3
 8000eb0:	0010      	movs	r0, r2
 8000eb2:	f000 fc0d 	bl	80016d0 <HAL_GPIO_ReadPin>
 8000eb6:	0003      	movs	r3, r0
 8000eb8:	001a      	movs	r2, r3
 8000eba:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <main+0xa8>)
 8000ebc:	701a      	strb	r2, [r3, #0]

  initPinParams();
 8000ebe:	f7ff fae1 	bl	8000484 <initPinParams>

  if(boardMode == HEX_TO_BIN_MODE){
 8000ec2:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <main+0xa8>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d104      	bne.n	8000ed4 <main+0x74>
	  initHexToBinMode();
 8000eca:	f7ff fad5 	bl	8000478 <initHexToBinMode>
	  writeBinaryRepresention();
 8000ece:	f7ff fe17 	bl	8000b00 <writeBinaryRepresention>
 8000ed2:	e001      	b.n	8000ed8 <main+0x78>
  }
  else
	  initBinToHexMode();
 8000ed4:	f7ff f9c2 	bl	800025c <initBinToHexMode>

  HAL_TIM_Base_Start_IT(&htim14);
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <main+0xac>)
 8000eda:	0018      	movs	r0, r3
 8000edc:	f001 f964 	bl	80021a8 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(boardMode == HEX_TO_BIN_MODE)
 8000ee0:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <main+0xa8>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d102      	bne.n	8000eee <main+0x8e>
		  pollAndProcessButtons();
 8000ee8:	f7ff fea4 	bl	8000c34 <pollAndProcessButtons>
 8000eec:	e7f8      	b.n	8000ee0 <main+0x80>
	  else{
		  updateDisplayMode();
 8000eee:	f7ff fbbd 	bl	800066c <updateDisplayMode>
		  if(displayMode == READ_FROM_BITS)
 8000ef2:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <main+0xb0>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d1f2      	bne.n	8000ee0 <main+0x80>
			  readBinaryRepresention();
 8000efa:	f7ff ff37 	bl	8000d6c <readBinaryRepresention>
	  if(boardMode == HEX_TO_BIN_MODE)
 8000efe:	e7ef      	b.n	8000ee0 <main+0x80>
 8000f00:	40021000 	.word	0x40021000
 8000f04:	20000000 	.word	0x20000000
 8000f08:	2000018d 	.word	0x2000018d
 8000f0c:	20000190 	.word	0x20000190
 8000f10:	2000018c 	.word	0x2000018c

08000f14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f14:	b590      	push	{r4, r7, lr}
 8000f16:	b093      	sub	sp, #76	; 0x4c
 8000f18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1a:	2414      	movs	r4, #20
 8000f1c:	193b      	adds	r3, r7, r4
 8000f1e:	0018      	movs	r0, r3
 8000f20:	2334      	movs	r3, #52	; 0x34
 8000f22:	001a      	movs	r2, r3
 8000f24:	2100      	movs	r1, #0
 8000f26:	f001 fb8f 	bl	8002648 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	2310      	movs	r3, #16
 8000f30:	001a      	movs	r2, r3
 8000f32:	2100      	movs	r1, #0
 8000f34:	f001 fb88 	bl	8002648 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f38:	2380      	movs	r3, #128	; 0x80
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f000 fc01 	bl	8001744 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f42:	193b      	adds	r3, r7, r4
 8000f44:	2202      	movs	r2, #2
 8000f46:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f48:	193b      	adds	r3, r7, r4
 8000f4a:	2280      	movs	r2, #128	; 0x80
 8000f4c:	0052      	lsls	r2, r2, #1
 8000f4e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000f50:	193b      	adds	r3, r7, r4
 8000f52:	2200      	movs	r2, #0
 8000f54:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f56:	193b      	adds	r3, r7, r4
 8000f58:	2240      	movs	r2, #64	; 0x40
 8000f5a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f5c:	193b      	adds	r3, r7, r4
 8000f5e:	2200      	movs	r2, #0
 8000f60:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f62:	193b      	adds	r3, r7, r4
 8000f64:	0018      	movs	r0, r3
 8000f66:	f000 fc2d 	bl	80017c4 <HAL_RCC_OscConfig>
 8000f6a:	1e03      	subs	r3, r0, #0
 8000f6c:	d001      	beq.n	8000f72 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000f6e:	f000 f819 	bl	8000fa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	2207      	movs	r2, #7
 8000f76:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	2200      	movs	r2, #0
 8000f88:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f000 ff28 	bl	8001de4 <HAL_RCC_ClockConfig>
 8000f94:	1e03      	subs	r3, r0, #0
 8000f96:	d001      	beq.n	8000f9c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000f98:	f000 f804 	bl	8000fa4 <Error_Handler>
  }
}
 8000f9c:	46c0      	nop			; (mov r8, r8)
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	b013      	add	sp, #76	; 0x4c
 8000fa2:	bd90      	pop	{r4, r7, pc}

08000fa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa8:	b672      	cpsid	i
}
 8000faa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fac:	e7fe      	b.n	8000fac <Error_Handler+0x8>
	...

08000fb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <HAL_MspInit+0x44>)
 8000fb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <HAL_MspInit+0x44>)
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	641a      	str	r2, [r3, #64]	; 0x40
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <HAL_MspInit+0x44>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	4013      	ands	r3, r2
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <HAL_MspInit+0x44>)
 8000fd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <HAL_MspInit+0x44>)
 8000fd4:	2180      	movs	r1, #128	; 0x80
 8000fd6:	0549      	lsls	r1, r1, #21
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fdc:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <HAL_MspInit+0x44>)
 8000fde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fe0:	2380      	movs	r3, #128	; 0x80
 8000fe2:	055b      	lsls	r3, r3, #21
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	603b      	str	r3, [r7, #0]
 8000fe8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	46bd      	mov	sp, r7
 8000fee:	b002      	add	sp, #8
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	46c0      	nop			; (mov r8, r8)
 8000ff4:	40021000 	.word	0x40021000

08000ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <NMI_Handler+0x4>

08000ffe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001002:	e7fe      	b.n	8001002 <HardFault_Handler+0x4>

08001004 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001008:	46c0      	nop			; (mov r8, r8)
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800101c:	f000 f8fa 	bl	8001214 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001020:	46c0      	nop			; (mov r8, r8)
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */
  updateDisplay();
 800102c:	f7ff fb34 	bl	8000698 <updateDisplay>
  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001030:	4b03      	ldr	r3, [pc, #12]	; (8001040 <TIM14_IRQHandler+0x18>)
 8001032:	0018      	movs	r0, r3
 8001034:	f001 f906 	bl	8002244 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001038:	46c0      	nop			; (mov r8, r8)
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	20000190 	.word	0x20000190

08001044 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001048:	46c0      	nop			; (mov r8, r8)
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
	...

08001050 <MX_TIM14_Init>:

TIM_HandleTypeDef htim14;

/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001054:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <MX_TIM14_Init+0x40>)
 8001056:	4a0f      	ldr	r2, [pc, #60]	; (8001094 <MX_TIM14_Init+0x44>)
 8001058:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800105a:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <MX_TIM14_Init+0x40>)
 800105c:	2200      	movs	r2, #0
 800105e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <MX_TIM14_Init+0x40>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001066:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <MX_TIM14_Init+0x40>)
 8001068:	4a0b      	ldr	r2, [pc, #44]	; (8001098 <MX_TIM14_Init+0x48>)
 800106a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <MX_TIM14_Init+0x40>)
 800106e:	2200      	movs	r2, #0
 8001070:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <MX_TIM14_Init+0x40>)
 8001074:	2200      	movs	r2, #0
 8001076:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <MX_TIM14_Init+0x40>)
 800107a:	0018      	movs	r0, r3
 800107c:	f001 f83c 	bl	80020f8 <HAL_TIM_Base_Init>
 8001080:	1e03      	subs	r3, r0, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8001084:	f7ff ff8e 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001088:	46c0      	nop			; (mov r8, r8)
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	20000190 	.word	0x20000190
 8001094:	40002000 	.word	0x40002000
 8001098:	0000ffff 	.word	0x0000ffff

0800109c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a0e      	ldr	r2, [pc, #56]	; (80010e4 <HAL_TIM_Base_MspInit+0x48>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d115      	bne.n	80010da <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <HAL_TIM_Base_MspInit+0x4c>)
 80010b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010b2:	4b0d      	ldr	r3, [pc, #52]	; (80010e8 <HAL_TIM_Base_MspInit+0x4c>)
 80010b4:	2180      	movs	r1, #128	; 0x80
 80010b6:	0209      	lsls	r1, r1, #8
 80010b8:	430a      	orrs	r2, r1
 80010ba:	641a      	str	r2, [r3, #64]	; 0x40
 80010bc:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <HAL_TIM_Base_MspInit+0x4c>)
 80010be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010c0:	2380      	movs	r3, #128	; 0x80
 80010c2:	021b      	lsls	r3, r3, #8
 80010c4:	4013      	ands	r3, r2
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]

    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2100      	movs	r1, #0
 80010ce:	2013      	movs	r0, #19
 80010d0:	f000 f968 	bl	80013a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80010d4:	2013      	movs	r0, #19
 80010d6:	f000 f97a 	bl	80013ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	46bd      	mov	sp, r7
 80010de:	b004      	add	sp, #16
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	40002000 	.word	0x40002000
 80010e8:	40021000 	.word	0x40021000

080010ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010ec:	480d      	ldr	r0, [pc, #52]	; (8001124 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010ee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010f0:	f7ff ffa8 	bl	8001044 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010f4:	480c      	ldr	r0, [pc, #48]	; (8001128 <LoopForever+0x6>)
  ldr r1, =_edata
 80010f6:	490d      	ldr	r1, [pc, #52]	; (800112c <LoopForever+0xa>)
  ldr r2, =_sidata
 80010f8:	4a0d      	ldr	r2, [pc, #52]	; (8001130 <LoopForever+0xe>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010fc:	e002      	b.n	8001104 <LoopCopyDataInit>

080010fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001100:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001102:	3304      	adds	r3, #4

08001104 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001104:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001106:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001108:	d3f9      	bcc.n	80010fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800110a:	4a0a      	ldr	r2, [pc, #40]	; (8001134 <LoopForever+0x12>)
  ldr r4, =_ebss
 800110c:	4c0a      	ldr	r4, [pc, #40]	; (8001138 <LoopForever+0x16>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001110:	e001      	b.n	8001116 <LoopFillZerobss>

08001112 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001112:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001114:	3204      	adds	r2, #4

08001116 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001116:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001118:	d3fb      	bcc.n	8001112 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800111a:	f001 fa71 	bl	8002600 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800111e:	f7ff fe9f 	bl	8000e60 <main>

08001122 <LoopForever>:

LoopForever:
  b LoopForever
 8001122:	e7fe      	b.n	8001122 <LoopForever>
  ldr   r0, =_estack
 8001124:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001128:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800112c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001130:	08002798 	.word	0x08002798
  ldr r2, =_sbss
 8001134:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001138:	200001e0 	.word	0x200001e0

0800113c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800113c:	e7fe      	b.n	800113c <ADC1_IRQHandler>
	...

08001140 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001146:	1dfb      	adds	r3, r7, #7
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800114c:	4b0b      	ldr	r3, [pc, #44]	; (800117c <HAL_Init+0x3c>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4b0a      	ldr	r3, [pc, #40]	; (800117c <HAL_Init+0x3c>)
 8001152:	2180      	movs	r1, #128	; 0x80
 8001154:	0049      	lsls	r1, r1, #1
 8001156:	430a      	orrs	r2, r1
 8001158:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800115a:	2003      	movs	r0, #3
 800115c:	f000 f810 	bl	8001180 <HAL_InitTick>
 8001160:	1e03      	subs	r3, r0, #0
 8001162:	d003      	beq.n	800116c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001164:	1dfb      	adds	r3, r7, #7
 8001166:	2201      	movs	r2, #1
 8001168:	701a      	strb	r2, [r3, #0]
 800116a:	e001      	b.n	8001170 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800116c:	f7ff ff20 	bl	8000fb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001170:	1dfb      	adds	r3, r7, #7
 8001172:	781b      	ldrb	r3, [r3, #0]
}
 8001174:	0018      	movs	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	b002      	add	sp, #8
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40022000 	.word	0x40022000

08001180 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001180:	b590      	push	{r4, r7, lr}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001188:	230f      	movs	r3, #15
 800118a:	18fb      	adds	r3, r7, r3
 800118c:	2200      	movs	r2, #0
 800118e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001190:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <HAL_InitTick+0x88>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d02b      	beq.n	80011f0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001198:	4b1c      	ldr	r3, [pc, #112]	; (800120c <HAL_InitTick+0x8c>)
 800119a:	681c      	ldr	r4, [r3, #0]
 800119c:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <HAL_InitTick+0x88>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	0019      	movs	r1, r3
 80011a2:	23fa      	movs	r3, #250	; 0xfa
 80011a4:	0098      	lsls	r0, r3, #2
 80011a6:	f7fe ffab 	bl	8000100 <__udivsi3>
 80011aa:	0003      	movs	r3, r0
 80011ac:	0019      	movs	r1, r3
 80011ae:	0020      	movs	r0, r4
 80011b0:	f7fe ffa6 	bl	8000100 <__udivsi3>
 80011b4:	0003      	movs	r3, r0
 80011b6:	0018      	movs	r0, r3
 80011b8:	f000 f919 	bl	80013ee <HAL_SYSTICK_Config>
 80011bc:	1e03      	subs	r3, r0, #0
 80011be:	d112      	bne.n	80011e6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b03      	cmp	r3, #3
 80011c4:	d80a      	bhi.n	80011dc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	2301      	movs	r3, #1
 80011ca:	425b      	negs	r3, r3
 80011cc:	2200      	movs	r2, #0
 80011ce:	0018      	movs	r0, r3
 80011d0:	f000 f8e8 	bl	80013a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011d4:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <HAL_InitTick+0x90>)
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	e00d      	b.n	80011f8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80011dc:	230f      	movs	r3, #15
 80011de:	18fb      	adds	r3, r7, r3
 80011e0:	2201      	movs	r2, #1
 80011e2:	701a      	strb	r2, [r3, #0]
 80011e4:	e008      	b.n	80011f8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011e6:	230f      	movs	r3, #15
 80011e8:	18fb      	adds	r3, r7, r3
 80011ea:	2201      	movs	r2, #1
 80011ec:	701a      	strb	r2, [r3, #0]
 80011ee:	e003      	b.n	80011f8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011f0:	230f      	movs	r3, #15
 80011f2:	18fb      	adds	r3, r7, r3
 80011f4:	2201      	movs	r2, #1
 80011f6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80011f8:	230f      	movs	r3, #15
 80011fa:	18fb      	adds	r3, r7, r3
 80011fc:	781b      	ldrb	r3, [r3, #0]
}
 80011fe:	0018      	movs	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	b005      	add	sp, #20
 8001204:	bd90      	pop	{r4, r7, pc}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	20000084 	.word	0x20000084
 800120c:	2000007c 	.word	0x2000007c
 8001210:	20000080 	.word	0x20000080

08001214 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <HAL_IncTick+0x1c>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	001a      	movs	r2, r3
 800121e:	4b05      	ldr	r3, [pc, #20]	; (8001234 <HAL_IncTick+0x20>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	18d2      	adds	r2, r2, r3
 8001224:	4b03      	ldr	r3, [pc, #12]	; (8001234 <HAL_IncTick+0x20>)
 8001226:	601a      	str	r2, [r3, #0]
}
 8001228:	46c0      	nop			; (mov r8, r8)
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	20000084 	.word	0x20000084
 8001234:	200001dc 	.word	0x200001dc

08001238 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  return uwTick;
 800123c:	4b02      	ldr	r3, [pc, #8]	; (8001248 <HAL_GetTick+0x10>)
 800123e:	681b      	ldr	r3, [r3, #0]
}
 8001240:	0018      	movs	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	200001dc 	.word	0x200001dc

0800124c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	0002      	movs	r2, r0
 8001254:	1dfb      	adds	r3, r7, #7
 8001256:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001258:	1dfb      	adds	r3, r7, #7
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b7f      	cmp	r3, #127	; 0x7f
 800125e:	d809      	bhi.n	8001274 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001260:	1dfb      	adds	r3, r7, #7
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	001a      	movs	r2, r3
 8001266:	231f      	movs	r3, #31
 8001268:	401a      	ands	r2, r3
 800126a:	4b04      	ldr	r3, [pc, #16]	; (800127c <__NVIC_EnableIRQ+0x30>)
 800126c:	2101      	movs	r1, #1
 800126e:	4091      	lsls	r1, r2
 8001270:	000a      	movs	r2, r1
 8001272:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001274:	46c0      	nop			; (mov r8, r8)
 8001276:	46bd      	mov	sp, r7
 8001278:	b002      	add	sp, #8
 800127a:	bd80      	pop	{r7, pc}
 800127c:	e000e100 	.word	0xe000e100

08001280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	0002      	movs	r2, r0
 8001288:	6039      	str	r1, [r7, #0]
 800128a:	1dfb      	adds	r3, r7, #7
 800128c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800128e:	1dfb      	adds	r3, r7, #7
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b7f      	cmp	r3, #127	; 0x7f
 8001294:	d828      	bhi.n	80012e8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001296:	4a2f      	ldr	r2, [pc, #188]	; (8001354 <__NVIC_SetPriority+0xd4>)
 8001298:	1dfb      	adds	r3, r7, #7
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	b25b      	sxtb	r3, r3
 800129e:	089b      	lsrs	r3, r3, #2
 80012a0:	33c0      	adds	r3, #192	; 0xc0
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	589b      	ldr	r3, [r3, r2]
 80012a6:	1dfa      	adds	r2, r7, #7
 80012a8:	7812      	ldrb	r2, [r2, #0]
 80012aa:	0011      	movs	r1, r2
 80012ac:	2203      	movs	r2, #3
 80012ae:	400a      	ands	r2, r1
 80012b0:	00d2      	lsls	r2, r2, #3
 80012b2:	21ff      	movs	r1, #255	; 0xff
 80012b4:	4091      	lsls	r1, r2
 80012b6:	000a      	movs	r2, r1
 80012b8:	43d2      	mvns	r2, r2
 80012ba:	401a      	ands	r2, r3
 80012bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	019b      	lsls	r3, r3, #6
 80012c2:	22ff      	movs	r2, #255	; 0xff
 80012c4:	401a      	ands	r2, r3
 80012c6:	1dfb      	adds	r3, r7, #7
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	0018      	movs	r0, r3
 80012cc:	2303      	movs	r3, #3
 80012ce:	4003      	ands	r3, r0
 80012d0:	00db      	lsls	r3, r3, #3
 80012d2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012d4:	481f      	ldr	r0, [pc, #124]	; (8001354 <__NVIC_SetPriority+0xd4>)
 80012d6:	1dfb      	adds	r3, r7, #7
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	b25b      	sxtb	r3, r3
 80012dc:	089b      	lsrs	r3, r3, #2
 80012de:	430a      	orrs	r2, r1
 80012e0:	33c0      	adds	r3, #192	; 0xc0
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80012e6:	e031      	b.n	800134c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012e8:	4a1b      	ldr	r2, [pc, #108]	; (8001358 <__NVIC_SetPriority+0xd8>)
 80012ea:	1dfb      	adds	r3, r7, #7
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	0019      	movs	r1, r3
 80012f0:	230f      	movs	r3, #15
 80012f2:	400b      	ands	r3, r1
 80012f4:	3b08      	subs	r3, #8
 80012f6:	089b      	lsrs	r3, r3, #2
 80012f8:	3306      	adds	r3, #6
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	18d3      	adds	r3, r2, r3
 80012fe:	3304      	adds	r3, #4
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	1dfa      	adds	r2, r7, #7
 8001304:	7812      	ldrb	r2, [r2, #0]
 8001306:	0011      	movs	r1, r2
 8001308:	2203      	movs	r2, #3
 800130a:	400a      	ands	r2, r1
 800130c:	00d2      	lsls	r2, r2, #3
 800130e:	21ff      	movs	r1, #255	; 0xff
 8001310:	4091      	lsls	r1, r2
 8001312:	000a      	movs	r2, r1
 8001314:	43d2      	mvns	r2, r2
 8001316:	401a      	ands	r2, r3
 8001318:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	019b      	lsls	r3, r3, #6
 800131e:	22ff      	movs	r2, #255	; 0xff
 8001320:	401a      	ands	r2, r3
 8001322:	1dfb      	adds	r3, r7, #7
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	0018      	movs	r0, r3
 8001328:	2303      	movs	r3, #3
 800132a:	4003      	ands	r3, r0
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001330:	4809      	ldr	r0, [pc, #36]	; (8001358 <__NVIC_SetPriority+0xd8>)
 8001332:	1dfb      	adds	r3, r7, #7
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	001c      	movs	r4, r3
 8001338:	230f      	movs	r3, #15
 800133a:	4023      	ands	r3, r4
 800133c:	3b08      	subs	r3, #8
 800133e:	089b      	lsrs	r3, r3, #2
 8001340:	430a      	orrs	r2, r1
 8001342:	3306      	adds	r3, #6
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	18c3      	adds	r3, r0, r3
 8001348:	3304      	adds	r3, #4
 800134a:	601a      	str	r2, [r3, #0]
}
 800134c:	46c0      	nop			; (mov r8, r8)
 800134e:	46bd      	mov	sp, r7
 8001350:	b003      	add	sp, #12
 8001352:	bd90      	pop	{r4, r7, pc}
 8001354:	e000e100 	.word	0xe000e100
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	1e5a      	subs	r2, r3, #1
 8001368:	2380      	movs	r3, #128	; 0x80
 800136a:	045b      	lsls	r3, r3, #17
 800136c:	429a      	cmp	r2, r3
 800136e:	d301      	bcc.n	8001374 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001370:	2301      	movs	r3, #1
 8001372:	e010      	b.n	8001396 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001374:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <SysTick_Config+0x44>)
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	3a01      	subs	r2, #1
 800137a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800137c:	2301      	movs	r3, #1
 800137e:	425b      	negs	r3, r3
 8001380:	2103      	movs	r1, #3
 8001382:	0018      	movs	r0, r3
 8001384:	f7ff ff7c 	bl	8001280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <SysTick_Config+0x44>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800138e:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <SysTick_Config+0x44>)
 8001390:	2207      	movs	r2, #7
 8001392:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001394:	2300      	movs	r3, #0
}
 8001396:	0018      	movs	r0, r3
 8001398:	46bd      	mov	sp, r7
 800139a:	b002      	add	sp, #8
 800139c:	bd80      	pop	{r7, pc}
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	e000e010 	.word	0xe000e010

080013a4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
 80013ae:	210f      	movs	r1, #15
 80013b0:	187b      	adds	r3, r7, r1
 80013b2:	1c02      	adds	r2, r0, #0
 80013b4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80013b6:	68ba      	ldr	r2, [r7, #8]
 80013b8:	187b      	adds	r3, r7, r1
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	b25b      	sxtb	r3, r3
 80013be:	0011      	movs	r1, r2
 80013c0:	0018      	movs	r0, r3
 80013c2:	f7ff ff5d 	bl	8001280 <__NVIC_SetPriority>
}
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	46bd      	mov	sp, r7
 80013ca:	b004      	add	sp, #16
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	0002      	movs	r2, r0
 80013d6:	1dfb      	adds	r3, r7, #7
 80013d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013da:	1dfb      	adds	r3, r7, #7
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	b25b      	sxtb	r3, r3
 80013e0:	0018      	movs	r0, r3
 80013e2:	f7ff ff33 	bl	800124c <__NVIC_EnableIRQ>
}
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	46bd      	mov	sp, r7
 80013ea:	b002      	add	sp, #8
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	0018      	movs	r0, r3
 80013fa:	f7ff ffaf 	bl	800135c <SysTick_Config>
 80013fe:	0003      	movs	r3, r0
}
 8001400:	0018      	movs	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	b002      	add	sp, #8
 8001406:	bd80      	pop	{r7, pc}

08001408 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001416:	e147      	b.n	80016a8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2101      	movs	r1, #1
 800141e:	697a      	ldr	r2, [r7, #20]
 8001420:	4091      	lsls	r1, r2
 8001422:	000a      	movs	r2, r1
 8001424:	4013      	ands	r3, r2
 8001426:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d100      	bne.n	8001430 <HAL_GPIO_Init+0x28>
 800142e:	e138      	b.n	80016a2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2203      	movs	r2, #3
 8001436:	4013      	ands	r3, r2
 8001438:	2b01      	cmp	r3, #1
 800143a:	d005      	beq.n	8001448 <HAL_GPIO_Init+0x40>
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2203      	movs	r2, #3
 8001442:	4013      	ands	r3, r2
 8001444:	2b02      	cmp	r3, #2
 8001446:	d130      	bne.n	80014aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	2203      	movs	r2, #3
 8001454:	409a      	lsls	r2, r3
 8001456:	0013      	movs	r3, r2
 8001458:	43da      	mvns	r2, r3
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	4013      	ands	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	68da      	ldr	r2, [r3, #12]
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	409a      	lsls	r2, r3
 800146a:	0013      	movs	r3, r2
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	4313      	orrs	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800147e:	2201      	movs	r2, #1
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	409a      	lsls	r2, r3
 8001484:	0013      	movs	r3, r2
 8001486:	43da      	mvns	r2, r3
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	4013      	ands	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	091b      	lsrs	r3, r3, #4
 8001494:	2201      	movs	r2, #1
 8001496:	401a      	ands	r2, r3
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	409a      	lsls	r2, r3
 800149c:	0013      	movs	r3, r2
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2203      	movs	r2, #3
 80014b0:	4013      	ands	r3, r2
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	d017      	beq.n	80014e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	2203      	movs	r2, #3
 80014c2:	409a      	lsls	r2, r3
 80014c4:	0013      	movs	r3, r2
 80014c6:	43da      	mvns	r2, r3
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	4013      	ands	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	689a      	ldr	r2, [r3, #8]
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	409a      	lsls	r2, r3
 80014d8:	0013      	movs	r3, r2
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	4313      	orrs	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2203      	movs	r2, #3
 80014ec:	4013      	ands	r3, r2
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d123      	bne.n	800153a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	08da      	lsrs	r2, r3, #3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	3208      	adds	r2, #8
 80014fa:	0092      	lsls	r2, r2, #2
 80014fc:	58d3      	ldr	r3, [r2, r3]
 80014fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	2207      	movs	r2, #7
 8001504:	4013      	ands	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	220f      	movs	r2, #15
 800150a:	409a      	lsls	r2, r3
 800150c:	0013      	movs	r3, r2
 800150e:	43da      	mvns	r2, r3
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	4013      	ands	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	691a      	ldr	r2, [r3, #16]
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	2107      	movs	r1, #7
 800151e:	400b      	ands	r3, r1
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	409a      	lsls	r2, r3
 8001524:	0013      	movs	r3, r2
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	4313      	orrs	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	08da      	lsrs	r2, r3, #3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3208      	adds	r2, #8
 8001534:	0092      	lsls	r2, r2, #2
 8001536:	6939      	ldr	r1, [r7, #16]
 8001538:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	2203      	movs	r2, #3
 8001546:	409a      	lsls	r2, r3
 8001548:	0013      	movs	r3, r2
 800154a:	43da      	mvns	r2, r3
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	4013      	ands	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2203      	movs	r2, #3
 8001558:	401a      	ands	r2, r3
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	409a      	lsls	r2, r3
 8001560:	0013      	movs	r3, r2
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	4313      	orrs	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	23c0      	movs	r3, #192	; 0xc0
 8001574:	029b      	lsls	r3, r3, #10
 8001576:	4013      	ands	r3, r2
 8001578:	d100      	bne.n	800157c <HAL_GPIO_Init+0x174>
 800157a:	e092      	b.n	80016a2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800157c:	4a50      	ldr	r2, [pc, #320]	; (80016c0 <HAL_GPIO_Init+0x2b8>)
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	089b      	lsrs	r3, r3, #2
 8001582:	3318      	adds	r3, #24
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	589b      	ldr	r3, [r3, r2]
 8001588:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	2203      	movs	r2, #3
 800158e:	4013      	ands	r3, r2
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	220f      	movs	r2, #15
 8001594:	409a      	lsls	r2, r3
 8001596:	0013      	movs	r3, r2
 8001598:	43da      	mvns	r2, r3
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	4013      	ands	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	23a0      	movs	r3, #160	; 0xa0
 80015a4:	05db      	lsls	r3, r3, #23
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d013      	beq.n	80015d2 <HAL_GPIO_Init+0x1ca>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a45      	ldr	r2, [pc, #276]	; (80016c4 <HAL_GPIO_Init+0x2bc>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d00d      	beq.n	80015ce <HAL_GPIO_Init+0x1c6>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a44      	ldr	r2, [pc, #272]	; (80016c8 <HAL_GPIO_Init+0x2c0>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d007      	beq.n	80015ca <HAL_GPIO_Init+0x1c2>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a43      	ldr	r2, [pc, #268]	; (80016cc <HAL_GPIO_Init+0x2c4>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d101      	bne.n	80015c6 <HAL_GPIO_Init+0x1be>
 80015c2:	2303      	movs	r3, #3
 80015c4:	e006      	b.n	80015d4 <HAL_GPIO_Init+0x1cc>
 80015c6:	2305      	movs	r3, #5
 80015c8:	e004      	b.n	80015d4 <HAL_GPIO_Init+0x1cc>
 80015ca:	2302      	movs	r3, #2
 80015cc:	e002      	b.n	80015d4 <HAL_GPIO_Init+0x1cc>
 80015ce:	2301      	movs	r3, #1
 80015d0:	e000      	b.n	80015d4 <HAL_GPIO_Init+0x1cc>
 80015d2:	2300      	movs	r3, #0
 80015d4:	697a      	ldr	r2, [r7, #20]
 80015d6:	2103      	movs	r1, #3
 80015d8:	400a      	ands	r2, r1
 80015da:	00d2      	lsls	r2, r2, #3
 80015dc:	4093      	lsls	r3, r2
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80015e4:	4936      	ldr	r1, [pc, #216]	; (80016c0 <HAL_GPIO_Init+0x2b8>)
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	089b      	lsrs	r3, r3, #2
 80015ea:	3318      	adds	r3, #24
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015f2:	4b33      	ldr	r3, [pc, #204]	; (80016c0 <HAL_GPIO_Init+0x2b8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	43da      	mvns	r2, r3
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	4013      	ands	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	2380      	movs	r3, #128	; 0x80
 8001608:	035b      	lsls	r3, r3, #13
 800160a:	4013      	ands	r3, r2
 800160c:	d003      	beq.n	8001616 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4313      	orrs	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001616:	4b2a      	ldr	r3, [pc, #168]	; (80016c0 <HAL_GPIO_Init+0x2b8>)
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800161c:	4b28      	ldr	r3, [pc, #160]	; (80016c0 <HAL_GPIO_Init+0x2b8>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	43da      	mvns	r2, r3
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	4013      	ands	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	2380      	movs	r3, #128	; 0x80
 8001632:	039b      	lsls	r3, r3, #14
 8001634:	4013      	ands	r3, r2
 8001636:	d003      	beq.n	8001640 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	4313      	orrs	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001640:	4b1f      	ldr	r3, [pc, #124]	; (80016c0 <HAL_GPIO_Init+0x2b8>)
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001646:	4a1e      	ldr	r2, [pc, #120]	; (80016c0 <HAL_GPIO_Init+0x2b8>)
 8001648:	2384      	movs	r3, #132	; 0x84
 800164a:	58d3      	ldr	r3, [r2, r3]
 800164c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	43da      	mvns	r2, r3
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	4013      	ands	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685a      	ldr	r2, [r3, #4]
 800165c:	2380      	movs	r3, #128	; 0x80
 800165e:	029b      	lsls	r3, r3, #10
 8001660:	4013      	ands	r3, r2
 8001662:	d003      	beq.n	800166c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	4313      	orrs	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800166c:	4914      	ldr	r1, [pc, #80]	; (80016c0 <HAL_GPIO_Init+0x2b8>)
 800166e:	2284      	movs	r2, #132	; 0x84
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001674:	4a12      	ldr	r2, [pc, #72]	; (80016c0 <HAL_GPIO_Init+0x2b8>)
 8001676:	2380      	movs	r3, #128	; 0x80
 8001678:	58d3      	ldr	r3, [r2, r3]
 800167a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	43da      	mvns	r2, r3
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685a      	ldr	r2, [r3, #4]
 800168a:	2380      	movs	r3, #128	; 0x80
 800168c:	025b      	lsls	r3, r3, #9
 800168e:	4013      	ands	r3, r2
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800169a:	4909      	ldr	r1, [pc, #36]	; (80016c0 <HAL_GPIO_Init+0x2b8>)
 800169c:	2280      	movs	r2, #128	; 0x80
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	3301      	adds	r3, #1
 80016a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	40da      	lsrs	r2, r3
 80016b0:	1e13      	subs	r3, r2, #0
 80016b2:	d000      	beq.n	80016b6 <HAL_GPIO_Init+0x2ae>
 80016b4:	e6b0      	b.n	8001418 <HAL_GPIO_Init+0x10>
  }
}
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	46c0      	nop			; (mov r8, r8)
 80016ba:	46bd      	mov	sp, r7
 80016bc:	b006      	add	sp, #24
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40021800 	.word	0x40021800
 80016c4:	50000400 	.word	0x50000400
 80016c8:	50000800 	.word	0x50000800
 80016cc:	50000c00 	.word	0x50000c00

080016d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	000a      	movs	r2, r1
 80016da:	1cbb      	adds	r3, r7, #2
 80016dc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	1cba      	adds	r2, r7, #2
 80016e4:	8812      	ldrh	r2, [r2, #0]
 80016e6:	4013      	ands	r3, r2
 80016e8:	d004      	beq.n	80016f4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80016ea:	230f      	movs	r3, #15
 80016ec:	18fb      	adds	r3, r7, r3
 80016ee:	2201      	movs	r2, #1
 80016f0:	701a      	strb	r2, [r3, #0]
 80016f2:	e003      	b.n	80016fc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016f4:	230f      	movs	r3, #15
 80016f6:	18fb      	adds	r3, r7, r3
 80016f8:	2200      	movs	r2, #0
 80016fa:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80016fc:	230f      	movs	r3, #15
 80016fe:	18fb      	adds	r3, r7, r3
 8001700:	781b      	ldrb	r3, [r3, #0]
}
 8001702:	0018      	movs	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	b004      	add	sp, #16
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
 8001712:	0008      	movs	r0, r1
 8001714:	0011      	movs	r1, r2
 8001716:	1cbb      	adds	r3, r7, #2
 8001718:	1c02      	adds	r2, r0, #0
 800171a:	801a      	strh	r2, [r3, #0]
 800171c:	1c7b      	adds	r3, r7, #1
 800171e:	1c0a      	adds	r2, r1, #0
 8001720:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001722:	1c7b      	adds	r3, r7, #1
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d004      	beq.n	8001734 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800172a:	1cbb      	adds	r3, r7, #2
 800172c:	881a      	ldrh	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001732:	e003      	b.n	800173c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001734:	1cbb      	adds	r3, r7, #2
 8001736:	881a      	ldrh	r2, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800173c:	46c0      	nop			; (mov r8, r8)
 800173e:	46bd      	mov	sp, r7
 8001740:	b002      	add	sp, #8
 8001742:	bd80      	pop	{r7, pc}

08001744 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800174c:	4b19      	ldr	r3, [pc, #100]	; (80017b4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a19      	ldr	r2, [pc, #100]	; (80017b8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001752:	4013      	ands	r3, r2
 8001754:	0019      	movs	r1, r3
 8001756:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	430a      	orrs	r2, r1
 800175c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	2380      	movs	r3, #128	; 0x80
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	429a      	cmp	r2, r3
 8001766:	d11f      	bne.n	80017a8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001768:	4b14      	ldr	r3, [pc, #80]	; (80017bc <HAL_PWREx_ControlVoltageScaling+0x78>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	0013      	movs	r3, r2
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	189b      	adds	r3, r3, r2
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	4912      	ldr	r1, [pc, #72]	; (80017c0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001776:	0018      	movs	r0, r3
 8001778:	f7fe fcc2 	bl	8000100 <__udivsi3>
 800177c:	0003      	movs	r3, r0
 800177e:	3301      	adds	r3, #1
 8001780:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001782:	e008      	b.n	8001796 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	3b01      	subs	r3, #1
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	e001      	b.n	8001796 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e009      	b.n	80017aa <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001796:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001798:	695a      	ldr	r2, [r3, #20]
 800179a:	2380      	movs	r3, #128	; 0x80
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	401a      	ands	r2, r3
 80017a0:	2380      	movs	r3, #128	; 0x80
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d0ed      	beq.n	8001784 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	0018      	movs	r0, r3
 80017ac:	46bd      	mov	sp, r7
 80017ae:	b004      	add	sp, #16
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	46c0      	nop			; (mov r8, r8)
 80017b4:	40007000 	.word	0x40007000
 80017b8:	fffff9ff 	.word	0xfffff9ff
 80017bc:	2000007c 	.word	0x2000007c
 80017c0:	000f4240 	.word	0x000f4240

080017c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b088      	sub	sp, #32
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e2f3      	b.n	8001dbe <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2201      	movs	r2, #1
 80017dc:	4013      	ands	r3, r2
 80017de:	d100      	bne.n	80017e2 <HAL_RCC_OscConfig+0x1e>
 80017e0:	e07c      	b.n	80018dc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017e2:	4bc3      	ldr	r3, [pc, #780]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	2238      	movs	r2, #56	; 0x38
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017ec:	4bc0      	ldr	r3, [pc, #768]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	2203      	movs	r2, #3
 80017f2:	4013      	ands	r3, r2
 80017f4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	2b10      	cmp	r3, #16
 80017fa:	d102      	bne.n	8001802 <HAL_RCC_OscConfig+0x3e>
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	2b03      	cmp	r3, #3
 8001800:	d002      	beq.n	8001808 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	2b08      	cmp	r3, #8
 8001806:	d10b      	bne.n	8001820 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001808:	4bb9      	ldr	r3, [pc, #740]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	2380      	movs	r3, #128	; 0x80
 800180e:	029b      	lsls	r3, r3, #10
 8001810:	4013      	ands	r3, r2
 8001812:	d062      	beq.n	80018da <HAL_RCC_OscConfig+0x116>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d15e      	bne.n	80018da <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e2ce      	b.n	8001dbe <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	2380      	movs	r3, #128	; 0x80
 8001826:	025b      	lsls	r3, r3, #9
 8001828:	429a      	cmp	r2, r3
 800182a:	d107      	bne.n	800183c <HAL_RCC_OscConfig+0x78>
 800182c:	4bb0      	ldr	r3, [pc, #704]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4baf      	ldr	r3, [pc, #700]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001832:	2180      	movs	r1, #128	; 0x80
 8001834:	0249      	lsls	r1, r1, #9
 8001836:	430a      	orrs	r2, r1
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	e020      	b.n	800187e <HAL_RCC_OscConfig+0xba>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	23a0      	movs	r3, #160	; 0xa0
 8001842:	02db      	lsls	r3, r3, #11
 8001844:	429a      	cmp	r2, r3
 8001846:	d10e      	bne.n	8001866 <HAL_RCC_OscConfig+0xa2>
 8001848:	4ba9      	ldr	r3, [pc, #676]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	4ba8      	ldr	r3, [pc, #672]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 800184e:	2180      	movs	r1, #128	; 0x80
 8001850:	02c9      	lsls	r1, r1, #11
 8001852:	430a      	orrs	r2, r1
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	4ba6      	ldr	r3, [pc, #664]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	4ba5      	ldr	r3, [pc, #660]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 800185c:	2180      	movs	r1, #128	; 0x80
 800185e:	0249      	lsls	r1, r1, #9
 8001860:	430a      	orrs	r2, r1
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	e00b      	b.n	800187e <HAL_RCC_OscConfig+0xba>
 8001866:	4ba2      	ldr	r3, [pc, #648]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	4ba1      	ldr	r3, [pc, #644]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 800186c:	49a1      	ldr	r1, [pc, #644]	; (8001af4 <HAL_RCC_OscConfig+0x330>)
 800186e:	400a      	ands	r2, r1
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	4b9f      	ldr	r3, [pc, #636]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	4b9e      	ldr	r3, [pc, #632]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001878:	499f      	ldr	r1, [pc, #636]	; (8001af8 <HAL_RCC_OscConfig+0x334>)
 800187a:	400a      	ands	r2, r1
 800187c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d014      	beq.n	80018b0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001886:	f7ff fcd7 	bl	8001238 <HAL_GetTick>
 800188a:	0003      	movs	r3, r0
 800188c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001890:	f7ff fcd2 	bl	8001238 <HAL_GetTick>
 8001894:	0002      	movs	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b64      	cmp	r3, #100	; 0x64
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e28d      	b.n	8001dbe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018a2:	4b93      	ldr	r3, [pc, #588]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	2380      	movs	r3, #128	; 0x80
 80018a8:	029b      	lsls	r3, r3, #10
 80018aa:	4013      	ands	r3, r2
 80018ac:	d0f0      	beq.n	8001890 <HAL_RCC_OscConfig+0xcc>
 80018ae:	e015      	b.n	80018dc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b0:	f7ff fcc2 	bl	8001238 <HAL_GetTick>
 80018b4:	0003      	movs	r3, r0
 80018b6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018ba:	f7ff fcbd 	bl	8001238 <HAL_GetTick>
 80018be:	0002      	movs	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b64      	cmp	r3, #100	; 0x64
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e278      	b.n	8001dbe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018cc:	4b88      	ldr	r3, [pc, #544]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	2380      	movs	r3, #128	; 0x80
 80018d2:	029b      	lsls	r3, r3, #10
 80018d4:	4013      	ands	r3, r2
 80018d6:	d1f0      	bne.n	80018ba <HAL_RCC_OscConfig+0xf6>
 80018d8:	e000      	b.n	80018dc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018da:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2202      	movs	r2, #2
 80018e2:	4013      	ands	r3, r2
 80018e4:	d100      	bne.n	80018e8 <HAL_RCC_OscConfig+0x124>
 80018e6:	e099      	b.n	8001a1c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018e8:	4b81      	ldr	r3, [pc, #516]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	2238      	movs	r2, #56	; 0x38
 80018ee:	4013      	ands	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018f2:	4b7f      	ldr	r3, [pc, #508]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	2203      	movs	r2, #3
 80018f8:	4013      	ands	r3, r2
 80018fa:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	2b10      	cmp	r3, #16
 8001900:	d102      	bne.n	8001908 <HAL_RCC_OscConfig+0x144>
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	2b02      	cmp	r3, #2
 8001906:	d002      	beq.n	800190e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d135      	bne.n	800197a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800190e:	4b78      	ldr	r3, [pc, #480]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	2380      	movs	r3, #128	; 0x80
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	4013      	ands	r3, r2
 8001918:	d005      	beq.n	8001926 <HAL_RCC_OscConfig+0x162>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e24b      	b.n	8001dbe <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001926:	4b72      	ldr	r3, [pc, #456]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	4a74      	ldr	r2, [pc, #464]	; (8001afc <HAL_RCC_OscConfig+0x338>)
 800192c:	4013      	ands	r3, r2
 800192e:	0019      	movs	r1, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	695b      	ldr	r3, [r3, #20]
 8001934:	021a      	lsls	r2, r3, #8
 8001936:	4b6e      	ldr	r3, [pc, #440]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001938:	430a      	orrs	r2, r1
 800193a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d112      	bne.n	8001968 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001942:	4b6b      	ldr	r3, [pc, #428]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a6e      	ldr	r2, [pc, #440]	; (8001b00 <HAL_RCC_OscConfig+0x33c>)
 8001948:	4013      	ands	r3, r2
 800194a:	0019      	movs	r1, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	691a      	ldr	r2, [r3, #16]
 8001950:	4b67      	ldr	r3, [pc, #412]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001952:	430a      	orrs	r2, r1
 8001954:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001956:	4b66      	ldr	r3, [pc, #408]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	0adb      	lsrs	r3, r3, #11
 800195c:	2207      	movs	r2, #7
 800195e:	4013      	ands	r3, r2
 8001960:	4a68      	ldr	r2, [pc, #416]	; (8001b04 <HAL_RCC_OscConfig+0x340>)
 8001962:	40da      	lsrs	r2, r3
 8001964:	4b68      	ldr	r3, [pc, #416]	; (8001b08 <HAL_RCC_OscConfig+0x344>)
 8001966:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001968:	4b68      	ldr	r3, [pc, #416]	; (8001b0c <HAL_RCC_OscConfig+0x348>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	0018      	movs	r0, r3
 800196e:	f7ff fc07 	bl	8001180 <HAL_InitTick>
 8001972:	1e03      	subs	r3, r0, #0
 8001974:	d051      	beq.n	8001a1a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e221      	b.n	8001dbe <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d030      	beq.n	80019e4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001982:	4b5b      	ldr	r3, [pc, #364]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a5e      	ldr	r2, [pc, #376]	; (8001b00 <HAL_RCC_OscConfig+0x33c>)
 8001988:	4013      	ands	r3, r2
 800198a:	0019      	movs	r1, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	691a      	ldr	r2, [r3, #16]
 8001990:	4b57      	ldr	r3, [pc, #348]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001992:	430a      	orrs	r2, r1
 8001994:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001996:	4b56      	ldr	r3, [pc, #344]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	4b55      	ldr	r3, [pc, #340]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 800199c:	2180      	movs	r1, #128	; 0x80
 800199e:	0049      	lsls	r1, r1, #1
 80019a0:	430a      	orrs	r2, r1
 80019a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a4:	f7ff fc48 	bl	8001238 <HAL_GetTick>
 80019a8:	0003      	movs	r3, r0
 80019aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019ac:	e008      	b.n	80019c0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ae:	f7ff fc43 	bl	8001238 <HAL_GetTick>
 80019b2:	0002      	movs	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e1fe      	b.n	8001dbe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019c0:	4b4b      	ldr	r3, [pc, #300]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	4013      	ands	r3, r2
 80019ca:	d0f0      	beq.n	80019ae <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019cc:	4b48      	ldr	r3, [pc, #288]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	4a4a      	ldr	r2, [pc, #296]	; (8001afc <HAL_RCC_OscConfig+0x338>)
 80019d2:	4013      	ands	r3, r2
 80019d4:	0019      	movs	r1, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	021a      	lsls	r2, r3, #8
 80019dc:	4b44      	ldr	r3, [pc, #272]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 80019de:	430a      	orrs	r2, r1
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	e01b      	b.n	8001a1c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80019e4:	4b42      	ldr	r3, [pc, #264]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	4b41      	ldr	r3, [pc, #260]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 80019ea:	4949      	ldr	r1, [pc, #292]	; (8001b10 <HAL_RCC_OscConfig+0x34c>)
 80019ec:	400a      	ands	r2, r1
 80019ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f0:	f7ff fc22 	bl	8001238 <HAL_GetTick>
 80019f4:	0003      	movs	r3, r0
 80019f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019fa:	f7ff fc1d 	bl	8001238 <HAL_GetTick>
 80019fe:	0002      	movs	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e1d8      	b.n	8001dbe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a0c:	4b38      	ldr	r3, [pc, #224]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	2380      	movs	r3, #128	; 0x80
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	4013      	ands	r3, r2
 8001a16:	d1f0      	bne.n	80019fa <HAL_RCC_OscConfig+0x236>
 8001a18:	e000      	b.n	8001a1c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a1a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2208      	movs	r2, #8
 8001a22:	4013      	ands	r3, r2
 8001a24:	d047      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001a26:	4b32      	ldr	r3, [pc, #200]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	2238      	movs	r2, #56	; 0x38
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	2b18      	cmp	r3, #24
 8001a30:	d10a      	bne.n	8001a48 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001a32:	4b2f      	ldr	r3, [pc, #188]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a36:	2202      	movs	r2, #2
 8001a38:	4013      	ands	r3, r2
 8001a3a:	d03c      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x2f2>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d138      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e1ba      	b.n	8001dbe <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d019      	beq.n	8001a84 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001a50:	4b27      	ldr	r3, [pc, #156]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001a52:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a54:	4b26      	ldr	r3, [pc, #152]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001a56:	2101      	movs	r1, #1
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5c:	f7ff fbec 	bl	8001238 <HAL_GetTick>
 8001a60:	0003      	movs	r3, r0
 8001a62:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a66:	f7ff fbe7 	bl	8001238 <HAL_GetTick>
 8001a6a:	0002      	movs	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e1a2      	b.n	8001dbe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a78:	4b1d      	ldr	r3, [pc, #116]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001a7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a7c:	2202      	movs	r2, #2
 8001a7e:	4013      	ands	r3, r2
 8001a80:	d0f1      	beq.n	8001a66 <HAL_RCC_OscConfig+0x2a2>
 8001a82:	e018      	b.n	8001ab6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001a84:	4b1a      	ldr	r3, [pc, #104]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001a86:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a88:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	438a      	bics	r2, r1
 8001a8e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a90:	f7ff fbd2 	bl	8001238 <HAL_GetTick>
 8001a94:	0003      	movs	r3, r0
 8001a96:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a9a:	f7ff fbcd 	bl	8001238 <HAL_GetTick>
 8001a9e:	0002      	movs	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e188      	b.n	8001dbe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001aac:	4b10      	ldr	r3, [pc, #64]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d1f1      	bne.n	8001a9a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2204      	movs	r2, #4
 8001abc:	4013      	ands	r3, r2
 8001abe:	d100      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x2fe>
 8001ac0:	e0c6      	b.n	8001c50 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ac2:	231f      	movs	r3, #31
 8001ac4:	18fb      	adds	r3, r7, r3
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001aca:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	2238      	movs	r2, #56	; 0x38
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	2b20      	cmp	r3, #32
 8001ad4:	d11e      	bne.n	8001b14 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <HAL_RCC_OscConfig+0x32c>)
 8001ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ada:	2202      	movs	r2, #2
 8001adc:	4013      	ands	r3, r2
 8001ade:	d100      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x31e>
 8001ae0:	e0b6      	b.n	8001c50 <HAL_RCC_OscConfig+0x48c>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d000      	beq.n	8001aec <HAL_RCC_OscConfig+0x328>
 8001aea:	e0b1      	b.n	8001c50 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e166      	b.n	8001dbe <HAL_RCC_OscConfig+0x5fa>
 8001af0:	40021000 	.word	0x40021000
 8001af4:	fffeffff 	.word	0xfffeffff
 8001af8:	fffbffff 	.word	0xfffbffff
 8001afc:	ffff80ff 	.word	0xffff80ff
 8001b00:	ffffc7ff 	.word	0xffffc7ff
 8001b04:	00f42400 	.word	0x00f42400
 8001b08:	2000007c 	.word	0x2000007c
 8001b0c:	20000080 	.word	0x20000080
 8001b10:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b14:	4bac      	ldr	r3, [pc, #688]	; (8001dc8 <HAL_RCC_OscConfig+0x604>)
 8001b16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b18:	2380      	movs	r3, #128	; 0x80
 8001b1a:	055b      	lsls	r3, r3, #21
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d101      	bne.n	8001b24 <HAL_RCC_OscConfig+0x360>
 8001b20:	2301      	movs	r3, #1
 8001b22:	e000      	b.n	8001b26 <HAL_RCC_OscConfig+0x362>
 8001b24:	2300      	movs	r3, #0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d011      	beq.n	8001b4e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001b2a:	4ba7      	ldr	r3, [pc, #668]	; (8001dc8 <HAL_RCC_OscConfig+0x604>)
 8001b2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b2e:	4ba6      	ldr	r3, [pc, #664]	; (8001dc8 <HAL_RCC_OscConfig+0x604>)
 8001b30:	2180      	movs	r1, #128	; 0x80
 8001b32:	0549      	lsls	r1, r1, #21
 8001b34:	430a      	orrs	r2, r1
 8001b36:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b38:	4ba3      	ldr	r3, [pc, #652]	; (8001dc8 <HAL_RCC_OscConfig+0x604>)
 8001b3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b3c:	2380      	movs	r3, #128	; 0x80
 8001b3e:	055b      	lsls	r3, r3, #21
 8001b40:	4013      	ands	r3, r2
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001b46:	231f      	movs	r3, #31
 8001b48:	18fb      	adds	r3, r7, r3
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b4e:	4b9f      	ldr	r3, [pc, #636]	; (8001dcc <HAL_RCC_OscConfig+0x608>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	2380      	movs	r3, #128	; 0x80
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	4013      	ands	r3, r2
 8001b58:	d11a      	bne.n	8001b90 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b5a:	4b9c      	ldr	r3, [pc, #624]	; (8001dcc <HAL_RCC_OscConfig+0x608>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	4b9b      	ldr	r3, [pc, #620]	; (8001dcc <HAL_RCC_OscConfig+0x608>)
 8001b60:	2180      	movs	r1, #128	; 0x80
 8001b62:	0049      	lsls	r1, r1, #1
 8001b64:	430a      	orrs	r2, r1
 8001b66:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001b68:	f7ff fb66 	bl	8001238 <HAL_GetTick>
 8001b6c:	0003      	movs	r3, r0
 8001b6e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b72:	f7ff fb61 	bl	8001238 <HAL_GetTick>
 8001b76:	0002      	movs	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e11c      	b.n	8001dbe <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b84:	4b91      	ldr	r3, [pc, #580]	; (8001dcc <HAL_RCC_OscConfig+0x608>)
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	2380      	movs	r3, #128	; 0x80
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	d0f0      	beq.n	8001b72 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d106      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x3e2>
 8001b98:	4b8b      	ldr	r3, [pc, #556]	; (8001dc8 <HAL_RCC_OscConfig+0x604>)
 8001b9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b9c:	4b8a      	ldr	r3, [pc, #552]	; (8001dc8 <HAL_RCC_OscConfig+0x604>)
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ba4:	e01c      	b.n	8001be0 <HAL_RCC_OscConfig+0x41c>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	2b05      	cmp	r3, #5
 8001bac:	d10c      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x404>
 8001bae:	4b86      	ldr	r3, [pc, #536]	; (8001dc8 <HAL_RCC_OscConfig+0x604>)
 8001bb0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bb2:	4b85      	ldr	r3, [pc, #532]	; (8001dc8 <HAL_RCC_OscConfig+0x604>)
 8001bb4:	2104      	movs	r1, #4
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	65da      	str	r2, [r3, #92]	; 0x5c
 8001bba:	4b83      	ldr	r3, [pc, #524]	; (8001dc8 <HAL_RCC_OscConfig+0x604>)
 8001bbc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bbe:	4b82      	ldr	r3, [pc, #520]	; (8001dc8 <HAL_RCC_OscConfig+0x604>)
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	65da      	str	r2, [r3, #92]	; 0x5c
 8001bc6:	e00b      	b.n	8001be0 <HAL_RCC_OscConfig+0x41c>
 8001bc8:	4b7f      	ldr	r3, [pc, #508]	; (8001dc8 <HAL_RCC_OscConfig+0x604>)
 8001bca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bcc:	4b7e      	ldr	r3, [pc, #504]	; (8001dc8 <HAL_RCC_OscConfig+0x604>)
 8001bce:	2101      	movs	r1, #1
 8001bd0:	438a      	bics	r2, r1
 8001bd2:	65da      	str	r2, [r3, #92]	; 0x5c
 8001bd4:	4b7c      	ldr	r3, [pc, #496]	; (8001dc8 <HAL_RCC_OscConfig+0x604>)
 8001bd6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bd8:	4b7b      	ldr	r3, [pc, #492]	; (8001dc8 <HAL_RCC_OscConfig+0x604>)
 8001bda:	2104      	movs	r1, #4
 8001bdc:	438a      	bics	r2, r1
 8001bde:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d014      	beq.n	8001c12 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be8:	f7ff fb26 	bl	8001238 <HAL_GetTick>
 8001bec:	0003      	movs	r3, r0
 8001bee:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bf0:	e009      	b.n	8001c06 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf2:	f7ff fb21 	bl	8001238 <HAL_GetTick>
 8001bf6:	0002      	movs	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	4a74      	ldr	r2, [pc, #464]	; (8001dd0 <HAL_RCC_OscConfig+0x60c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e0db      	b.n	8001dbe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c06:	4b70      	ldr	r3, [pc, #448]	; (8001dc8 <HAL_RCC_OscConfig+0x604>)
 8001c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	d0f0      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x42e>
 8001c10:	e013      	b.n	8001c3a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c12:	f7ff fb11 	bl	8001238 <HAL_GetTick>
 8001c16:	0003      	movs	r3, r0
 8001c18:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c1a:	e009      	b.n	8001c30 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c1c:	f7ff fb0c 	bl	8001238 <HAL_GetTick>
 8001c20:	0002      	movs	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	4a6a      	ldr	r2, [pc, #424]	; (8001dd0 <HAL_RCC_OscConfig+0x60c>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e0c6      	b.n	8001dbe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c30:	4b65      	ldr	r3, [pc, #404]	; (8001dc8 <HAL_RCC_OscConfig+0x604>)
 8001c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c34:	2202      	movs	r2, #2
 8001c36:	4013      	ands	r3, r2
 8001c38:	d1f0      	bne.n	8001c1c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001c3a:	231f      	movs	r3, #31
 8001c3c:	18fb      	adds	r3, r7, r3
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d105      	bne.n	8001c50 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001c44:	4b60      	ldr	r3, [pc, #384]	; (8001dc8 <HAL_RCC_OscConfig+0x604>)
 8001c46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c48:	4b5f      	ldr	r3, [pc, #380]	; (8001dc8 <HAL_RCC_OscConfig+0x604>)
 8001c4a:	4962      	ldr	r1, [pc, #392]	; (8001dd4 <HAL_RCC_OscConfig+0x610>)
 8001c4c:	400a      	ands	r2, r1
 8001c4e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69db      	ldr	r3, [r3, #28]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d100      	bne.n	8001c5a <HAL_RCC_OscConfig+0x496>
 8001c58:	e0b0      	b.n	8001dbc <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c5a:	4b5b      	ldr	r3, [pc, #364]	; (8001dc8 <HAL_RCC_OscConfig+0x604>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	2238      	movs	r2, #56	; 0x38
 8001c60:	4013      	ands	r3, r2
 8001c62:	2b10      	cmp	r3, #16
 8001c64:	d100      	bne.n	8001c68 <HAL_RCC_OscConfig+0x4a4>
 8001c66:	e078      	b.n	8001d5a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	69db      	ldr	r3, [r3, #28]
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d153      	bne.n	8001d18 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c70:	4b55      	ldr	r3, [pc, #340]	; (8001dc8 <HAL_RCC_OscConfig+0x604>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	4b54      	ldr	r3, [pc, #336]	; (8001dc8 <HAL_RCC_OscConfig+0x604>)
 8001c76:	4958      	ldr	r1, [pc, #352]	; (8001dd8 <HAL_RCC_OscConfig+0x614>)
 8001c78:	400a      	ands	r2, r1
 8001c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7c:	f7ff fadc 	bl	8001238 <HAL_GetTick>
 8001c80:	0003      	movs	r3, r0
 8001c82:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c86:	f7ff fad7 	bl	8001238 <HAL_GetTick>
 8001c8a:	0002      	movs	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e092      	b.n	8001dbe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c98:	4b4b      	ldr	r3, [pc, #300]	; (8001dc8 <HAL_RCC_OscConfig+0x604>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	2380      	movs	r3, #128	; 0x80
 8001c9e:	049b      	lsls	r3, r3, #18
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	d1f0      	bne.n	8001c86 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ca4:	4b48      	ldr	r3, [pc, #288]	; (8001dc8 <HAL_RCC_OscConfig+0x604>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	4a4c      	ldr	r2, [pc, #304]	; (8001ddc <HAL_RCC_OscConfig+0x618>)
 8001caa:	4013      	ands	r3, r2
 8001cac:	0019      	movs	r1, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a1a      	ldr	r2, [r3, #32]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cbc:	021b      	lsls	r3, r3, #8
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	4b3e      	ldr	r3, [pc, #248]	; (8001dc8 <HAL_RCC_OscConfig+0x604>)
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cd2:	4b3d      	ldr	r3, [pc, #244]	; (8001dc8 <HAL_RCC_OscConfig+0x604>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	4b3c      	ldr	r3, [pc, #240]	; (8001dc8 <HAL_RCC_OscConfig+0x604>)
 8001cd8:	2180      	movs	r1, #128	; 0x80
 8001cda:	0449      	lsls	r1, r1, #17
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001ce0:	4b39      	ldr	r3, [pc, #228]	; (8001dc8 <HAL_RCC_OscConfig+0x604>)
 8001ce2:	68da      	ldr	r2, [r3, #12]
 8001ce4:	4b38      	ldr	r3, [pc, #224]	; (8001dc8 <HAL_RCC_OscConfig+0x604>)
 8001ce6:	2180      	movs	r1, #128	; 0x80
 8001ce8:	0549      	lsls	r1, r1, #21
 8001cea:	430a      	orrs	r2, r1
 8001cec:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cee:	f7ff faa3 	bl	8001238 <HAL_GetTick>
 8001cf2:	0003      	movs	r3, r0
 8001cf4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf8:	f7ff fa9e 	bl	8001238 <HAL_GetTick>
 8001cfc:	0002      	movs	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e059      	b.n	8001dbe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d0a:	4b2f      	ldr	r3, [pc, #188]	; (8001dc8 <HAL_RCC_OscConfig+0x604>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	2380      	movs	r3, #128	; 0x80
 8001d10:	049b      	lsls	r3, r3, #18
 8001d12:	4013      	ands	r3, r2
 8001d14:	d0f0      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x534>
 8001d16:	e051      	b.n	8001dbc <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d18:	4b2b      	ldr	r3, [pc, #172]	; (8001dc8 <HAL_RCC_OscConfig+0x604>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	4b2a      	ldr	r3, [pc, #168]	; (8001dc8 <HAL_RCC_OscConfig+0x604>)
 8001d1e:	492e      	ldr	r1, [pc, #184]	; (8001dd8 <HAL_RCC_OscConfig+0x614>)
 8001d20:	400a      	ands	r2, r1
 8001d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d24:	f7ff fa88 	bl	8001238 <HAL_GetTick>
 8001d28:	0003      	movs	r3, r0
 8001d2a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d2e:	f7ff fa83 	bl	8001238 <HAL_GetTick>
 8001d32:	0002      	movs	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e03e      	b.n	8001dbe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d40:	4b21      	ldr	r3, [pc, #132]	; (8001dc8 <HAL_RCC_OscConfig+0x604>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	2380      	movs	r3, #128	; 0x80
 8001d46:	049b      	lsls	r3, r3, #18
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d1f0      	bne.n	8001d2e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001d4c:	4b1e      	ldr	r3, [pc, #120]	; (8001dc8 <HAL_RCC_OscConfig+0x604>)
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	4b1d      	ldr	r3, [pc, #116]	; (8001dc8 <HAL_RCC_OscConfig+0x604>)
 8001d52:	4923      	ldr	r1, [pc, #140]	; (8001de0 <HAL_RCC_OscConfig+0x61c>)
 8001d54:	400a      	ands	r2, r1
 8001d56:	60da      	str	r2, [r3, #12]
 8001d58:	e030      	b.n	8001dbc <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d101      	bne.n	8001d66 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e02b      	b.n	8001dbe <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001d66:	4b18      	ldr	r3, [pc, #96]	; (8001dc8 <HAL_RCC_OscConfig+0x604>)
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	2203      	movs	r2, #3
 8001d70:	401a      	ands	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d11e      	bne.n	8001db8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	2270      	movs	r2, #112	; 0x70
 8001d7e:	401a      	ands	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d117      	bne.n	8001db8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d88:	697a      	ldr	r2, [r7, #20]
 8001d8a:	23fe      	movs	r3, #254	; 0xfe
 8001d8c:	01db      	lsls	r3, r3, #7
 8001d8e:	401a      	ands	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d94:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d10e      	bne.n	8001db8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	23f8      	movs	r3, #248	; 0xf8
 8001d9e:	039b      	lsls	r3, r3, #14
 8001da0:	401a      	ands	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d106      	bne.n	8001db8 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	0f5b      	lsrs	r3, r3, #29
 8001dae:	075a      	lsls	r2, r3, #29
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d001      	beq.n	8001dbc <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e000      	b.n	8001dbe <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	b008      	add	sp, #32
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	46c0      	nop			; (mov r8, r8)
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	40007000 	.word	0x40007000
 8001dd0:	00001388 	.word	0x00001388
 8001dd4:	efffffff 	.word	0xefffffff
 8001dd8:	feffffff 	.word	0xfeffffff
 8001ddc:	1fc1808c 	.word	0x1fc1808c
 8001de0:	effefffc 	.word	0xeffefffc

08001de4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e0e9      	b.n	8001fcc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001df8:	4b76      	ldr	r3, [pc, #472]	; (8001fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2207      	movs	r2, #7
 8001dfe:	4013      	ands	r3, r2
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d91e      	bls.n	8001e44 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e06:	4b73      	ldr	r3, [pc, #460]	; (8001fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2207      	movs	r2, #7
 8001e0c:	4393      	bics	r3, r2
 8001e0e:	0019      	movs	r1, r3
 8001e10:	4b70      	ldr	r3, [pc, #448]	; (8001fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e18:	f7ff fa0e 	bl	8001238 <HAL_GetTick>
 8001e1c:	0003      	movs	r3, r0
 8001e1e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e20:	e009      	b.n	8001e36 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e22:	f7ff fa09 	bl	8001238 <HAL_GetTick>
 8001e26:	0002      	movs	r2, r0
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	4a6a      	ldr	r2, [pc, #424]	; (8001fd8 <HAL_RCC_ClockConfig+0x1f4>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e0ca      	b.n	8001fcc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e36:	4b67      	ldr	r3, [pc, #412]	; (8001fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2207      	movs	r2, #7
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d1ee      	bne.n	8001e22 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2202      	movs	r2, #2
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	d015      	beq.n	8001e7a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2204      	movs	r2, #4
 8001e54:	4013      	ands	r3, r2
 8001e56:	d006      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e58:	4b60      	ldr	r3, [pc, #384]	; (8001fdc <HAL_RCC_ClockConfig+0x1f8>)
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	4b5f      	ldr	r3, [pc, #380]	; (8001fdc <HAL_RCC_ClockConfig+0x1f8>)
 8001e5e:	21e0      	movs	r1, #224	; 0xe0
 8001e60:	01c9      	lsls	r1, r1, #7
 8001e62:	430a      	orrs	r2, r1
 8001e64:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e66:	4b5d      	ldr	r3, [pc, #372]	; (8001fdc <HAL_RCC_ClockConfig+0x1f8>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	4a5d      	ldr	r2, [pc, #372]	; (8001fe0 <HAL_RCC_ClockConfig+0x1fc>)
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	0019      	movs	r1, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	4b59      	ldr	r3, [pc, #356]	; (8001fdc <HAL_RCC_ClockConfig+0x1f8>)
 8001e76:	430a      	orrs	r2, r1
 8001e78:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	4013      	ands	r3, r2
 8001e82:	d057      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d107      	bne.n	8001e9c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e8c:	4b53      	ldr	r3, [pc, #332]	; (8001fdc <HAL_RCC_ClockConfig+0x1f8>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	2380      	movs	r3, #128	; 0x80
 8001e92:	029b      	lsls	r3, r3, #10
 8001e94:	4013      	ands	r3, r2
 8001e96:	d12b      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e097      	b.n	8001fcc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d107      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ea4:	4b4d      	ldr	r3, [pc, #308]	; (8001fdc <HAL_RCC_ClockConfig+0x1f8>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	2380      	movs	r3, #128	; 0x80
 8001eaa:	049b      	lsls	r3, r3, #18
 8001eac:	4013      	ands	r3, r2
 8001eae:	d11f      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e08b      	b.n	8001fcc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d107      	bne.n	8001ecc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ebc:	4b47      	ldr	r3, [pc, #284]	; (8001fdc <HAL_RCC_ClockConfig+0x1f8>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	2380      	movs	r3, #128	; 0x80
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	d113      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e07f      	b.n	8001fcc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b03      	cmp	r3, #3
 8001ed2:	d106      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ed4:	4b41      	ldr	r3, [pc, #260]	; (8001fdc <HAL_RCC_ClockConfig+0x1f8>)
 8001ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ed8:	2202      	movs	r2, #2
 8001eda:	4013      	ands	r3, r2
 8001edc:	d108      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e074      	b.n	8001fcc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ee2:	4b3e      	ldr	r3, [pc, #248]	; (8001fdc <HAL_RCC_ClockConfig+0x1f8>)
 8001ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	4013      	ands	r3, r2
 8001eea:	d101      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e06d      	b.n	8001fcc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ef0:	4b3a      	ldr	r3, [pc, #232]	; (8001fdc <HAL_RCC_ClockConfig+0x1f8>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	2207      	movs	r2, #7
 8001ef6:	4393      	bics	r3, r2
 8001ef8:	0019      	movs	r1, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	4b37      	ldr	r3, [pc, #220]	; (8001fdc <HAL_RCC_ClockConfig+0x1f8>)
 8001f00:	430a      	orrs	r2, r1
 8001f02:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f04:	f7ff f998 	bl	8001238 <HAL_GetTick>
 8001f08:	0003      	movs	r3, r0
 8001f0a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f0c:	e009      	b.n	8001f22 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f0e:	f7ff f993 	bl	8001238 <HAL_GetTick>
 8001f12:	0002      	movs	r2, r0
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	4a2f      	ldr	r2, [pc, #188]	; (8001fd8 <HAL_RCC_ClockConfig+0x1f4>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e054      	b.n	8001fcc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f22:	4b2e      	ldr	r3, [pc, #184]	; (8001fdc <HAL_RCC_ClockConfig+0x1f8>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	2238      	movs	r2, #56	; 0x38
 8001f28:	401a      	ands	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d1ec      	bne.n	8001f0e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f34:	4b27      	ldr	r3, [pc, #156]	; (8001fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2207      	movs	r2, #7
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d21e      	bcs.n	8001f80 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f42:	4b24      	ldr	r3, [pc, #144]	; (8001fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2207      	movs	r2, #7
 8001f48:	4393      	bics	r3, r2
 8001f4a:	0019      	movs	r1, r3
 8001f4c:	4b21      	ldr	r3, [pc, #132]	; (8001fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f54:	f7ff f970 	bl	8001238 <HAL_GetTick>
 8001f58:	0003      	movs	r3, r0
 8001f5a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f5c:	e009      	b.n	8001f72 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f5e:	f7ff f96b 	bl	8001238 <HAL_GetTick>
 8001f62:	0002      	movs	r2, r0
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	4a1b      	ldr	r2, [pc, #108]	; (8001fd8 <HAL_RCC_ClockConfig+0x1f4>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e02c      	b.n	8001fcc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f72:	4b18      	ldr	r3, [pc, #96]	; (8001fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2207      	movs	r2, #7
 8001f78:	4013      	ands	r3, r2
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d1ee      	bne.n	8001f5e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2204      	movs	r2, #4
 8001f86:	4013      	ands	r3, r2
 8001f88:	d009      	beq.n	8001f9e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001f8a:	4b14      	ldr	r3, [pc, #80]	; (8001fdc <HAL_RCC_ClockConfig+0x1f8>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	4a15      	ldr	r2, [pc, #84]	; (8001fe4 <HAL_RCC_ClockConfig+0x200>)
 8001f90:	4013      	ands	r3, r2
 8001f92:	0019      	movs	r1, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68da      	ldr	r2, [r3, #12]
 8001f98:	4b10      	ldr	r3, [pc, #64]	; (8001fdc <HAL_RCC_ClockConfig+0x1f8>)
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001f9e:	f000 f829 	bl	8001ff4 <HAL_RCC_GetSysClockFreq>
 8001fa2:	0001      	movs	r1, r0
 8001fa4:	4b0d      	ldr	r3, [pc, #52]	; (8001fdc <HAL_RCC_ClockConfig+0x1f8>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	0a1b      	lsrs	r3, r3, #8
 8001faa:	220f      	movs	r2, #15
 8001fac:	401a      	ands	r2, r3
 8001fae:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <HAL_RCC_ClockConfig+0x204>)
 8001fb0:	0092      	lsls	r2, r2, #2
 8001fb2:	58d3      	ldr	r3, [r2, r3]
 8001fb4:	221f      	movs	r2, #31
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	000a      	movs	r2, r1
 8001fba:	40da      	lsrs	r2, r3
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <HAL_RCC_ClockConfig+0x208>)
 8001fbe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <HAL_RCC_ClockConfig+0x20c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	f7ff f8db 	bl	8001180 <HAL_InitTick>
 8001fca:	0003      	movs	r3, r0
}
 8001fcc:	0018      	movs	r0, r3
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	b004      	add	sp, #16
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40022000 	.word	0x40022000
 8001fd8:	00001388 	.word	0x00001388
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	fffff0ff 	.word	0xfffff0ff
 8001fe4:	ffff8fff 	.word	0xffff8fff
 8001fe8:	08002750 	.word	0x08002750
 8001fec:	2000007c 	.word	0x2000007c
 8001ff0:	20000080 	.word	0x20000080

08001ff4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ffa:	4b3c      	ldr	r3, [pc, #240]	; (80020ec <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	2238      	movs	r2, #56	; 0x38
 8002000:	4013      	ands	r3, r2
 8002002:	d10f      	bne.n	8002024 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002004:	4b39      	ldr	r3, [pc, #228]	; (80020ec <HAL_RCC_GetSysClockFreq+0xf8>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	0adb      	lsrs	r3, r3, #11
 800200a:	2207      	movs	r2, #7
 800200c:	4013      	ands	r3, r2
 800200e:	2201      	movs	r2, #1
 8002010:	409a      	lsls	r2, r3
 8002012:	0013      	movs	r3, r2
 8002014:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002016:	6839      	ldr	r1, [r7, #0]
 8002018:	4835      	ldr	r0, [pc, #212]	; (80020f0 <HAL_RCC_GetSysClockFreq+0xfc>)
 800201a:	f7fe f871 	bl	8000100 <__udivsi3>
 800201e:	0003      	movs	r3, r0
 8002020:	613b      	str	r3, [r7, #16]
 8002022:	e05d      	b.n	80020e0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002024:	4b31      	ldr	r3, [pc, #196]	; (80020ec <HAL_RCC_GetSysClockFreq+0xf8>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	2238      	movs	r2, #56	; 0x38
 800202a:	4013      	ands	r3, r2
 800202c:	2b08      	cmp	r3, #8
 800202e:	d102      	bne.n	8002036 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002030:	4b30      	ldr	r3, [pc, #192]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x100>)
 8002032:	613b      	str	r3, [r7, #16]
 8002034:	e054      	b.n	80020e0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002036:	4b2d      	ldr	r3, [pc, #180]	; (80020ec <HAL_RCC_GetSysClockFreq+0xf8>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	2238      	movs	r2, #56	; 0x38
 800203c:	4013      	ands	r3, r2
 800203e:	2b10      	cmp	r3, #16
 8002040:	d138      	bne.n	80020b4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002042:	4b2a      	ldr	r3, [pc, #168]	; (80020ec <HAL_RCC_GetSysClockFreq+0xf8>)
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	2203      	movs	r2, #3
 8002048:	4013      	ands	r3, r2
 800204a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800204c:	4b27      	ldr	r3, [pc, #156]	; (80020ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	091b      	lsrs	r3, r3, #4
 8002052:	2207      	movs	r2, #7
 8002054:	4013      	ands	r3, r2
 8002056:	3301      	adds	r3, #1
 8002058:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2b03      	cmp	r3, #3
 800205e:	d10d      	bne.n	800207c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002060:	68b9      	ldr	r1, [r7, #8]
 8002062:	4824      	ldr	r0, [pc, #144]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x100>)
 8002064:	f7fe f84c 	bl	8000100 <__udivsi3>
 8002068:	0003      	movs	r3, r0
 800206a:	0019      	movs	r1, r3
 800206c:	4b1f      	ldr	r3, [pc, #124]	; (80020ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	0a1b      	lsrs	r3, r3, #8
 8002072:	227f      	movs	r2, #127	; 0x7f
 8002074:	4013      	ands	r3, r2
 8002076:	434b      	muls	r3, r1
 8002078:	617b      	str	r3, [r7, #20]
        break;
 800207a:	e00d      	b.n	8002098 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800207c:	68b9      	ldr	r1, [r7, #8]
 800207e:	481c      	ldr	r0, [pc, #112]	; (80020f0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002080:	f7fe f83e 	bl	8000100 <__udivsi3>
 8002084:	0003      	movs	r3, r0
 8002086:	0019      	movs	r1, r3
 8002088:	4b18      	ldr	r3, [pc, #96]	; (80020ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	0a1b      	lsrs	r3, r3, #8
 800208e:	227f      	movs	r2, #127	; 0x7f
 8002090:	4013      	ands	r3, r2
 8002092:	434b      	muls	r3, r1
 8002094:	617b      	str	r3, [r7, #20]
        break;
 8002096:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002098:	4b14      	ldr	r3, [pc, #80]	; (80020ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	0f5b      	lsrs	r3, r3, #29
 800209e:	2207      	movs	r2, #7
 80020a0:	4013      	ands	r3, r2
 80020a2:	3301      	adds	r3, #1
 80020a4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	6978      	ldr	r0, [r7, #20]
 80020aa:	f7fe f829 	bl	8000100 <__udivsi3>
 80020ae:	0003      	movs	r3, r0
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	e015      	b.n	80020e0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80020b4:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <HAL_RCC_GetSysClockFreq+0xf8>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	2238      	movs	r2, #56	; 0x38
 80020ba:	4013      	ands	r3, r2
 80020bc:	2b20      	cmp	r3, #32
 80020be:	d103      	bne.n	80020c8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80020c0:	2380      	movs	r3, #128	; 0x80
 80020c2:	021b      	lsls	r3, r3, #8
 80020c4:	613b      	str	r3, [r7, #16]
 80020c6:	e00b      	b.n	80020e0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80020c8:	4b08      	ldr	r3, [pc, #32]	; (80020ec <HAL_RCC_GetSysClockFreq+0xf8>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	2238      	movs	r2, #56	; 0x38
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b18      	cmp	r3, #24
 80020d2:	d103      	bne.n	80020dc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80020d4:	23fa      	movs	r3, #250	; 0xfa
 80020d6:	01db      	lsls	r3, r3, #7
 80020d8:	613b      	str	r3, [r7, #16]
 80020da:	e001      	b.n	80020e0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80020dc:	2300      	movs	r3, #0
 80020de:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80020e0:	693b      	ldr	r3, [r7, #16]
}
 80020e2:	0018      	movs	r0, r3
 80020e4:	46bd      	mov	sp, r7
 80020e6:	b006      	add	sp, #24
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	46c0      	nop			; (mov r8, r8)
 80020ec:	40021000 	.word	0x40021000
 80020f0:	00f42400 	.word	0x00f42400
 80020f4:	007a1200 	.word	0x007a1200

080020f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e04a      	b.n	80021a0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	223d      	movs	r2, #61	; 0x3d
 800210e:	5c9b      	ldrb	r3, [r3, r2]
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d107      	bne.n	8002126 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	223c      	movs	r2, #60	; 0x3c
 800211a:	2100      	movs	r1, #0
 800211c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	0018      	movs	r0, r3
 8002122:	f7fe ffbb 	bl	800109c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	223d      	movs	r2, #61	; 0x3d
 800212a:	2102      	movs	r1, #2
 800212c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	3304      	adds	r3, #4
 8002136:	0019      	movs	r1, r3
 8002138:	0010      	movs	r0, r2
 800213a:	f000 f9dd 	bl	80024f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2248      	movs	r2, #72	; 0x48
 8002142:	2101      	movs	r1, #1
 8002144:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	223e      	movs	r2, #62	; 0x3e
 800214a:	2101      	movs	r1, #1
 800214c:	5499      	strb	r1, [r3, r2]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	223f      	movs	r2, #63	; 0x3f
 8002152:	2101      	movs	r1, #1
 8002154:	5499      	strb	r1, [r3, r2]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2240      	movs	r2, #64	; 0x40
 800215a:	2101      	movs	r1, #1
 800215c:	5499      	strb	r1, [r3, r2]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2241      	movs	r2, #65	; 0x41
 8002162:	2101      	movs	r1, #1
 8002164:	5499      	strb	r1, [r3, r2]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2242      	movs	r2, #66	; 0x42
 800216a:	2101      	movs	r1, #1
 800216c:	5499      	strb	r1, [r3, r2]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2243      	movs	r2, #67	; 0x43
 8002172:	2101      	movs	r1, #1
 8002174:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2244      	movs	r2, #68	; 0x44
 800217a:	2101      	movs	r1, #1
 800217c:	5499      	strb	r1, [r3, r2]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2245      	movs	r2, #69	; 0x45
 8002182:	2101      	movs	r1, #1
 8002184:	5499      	strb	r1, [r3, r2]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2246      	movs	r2, #70	; 0x46
 800218a:	2101      	movs	r1, #1
 800218c:	5499      	strb	r1, [r3, r2]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2247      	movs	r2, #71	; 0x47
 8002192:	2101      	movs	r1, #1
 8002194:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	223d      	movs	r2, #61	; 0x3d
 800219a:	2101      	movs	r1, #1
 800219c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	0018      	movs	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	b002      	add	sp, #8
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	223d      	movs	r2, #61	; 0x3d
 80021b4:	5c9b      	ldrb	r3, [r3, r2]
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d001      	beq.n	80021c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e037      	b.n	8002230 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	223d      	movs	r2, #61	; 0x3d
 80021c4:	2102      	movs	r1, #2
 80021c6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68da      	ldr	r2, [r3, #12]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2101      	movs	r1, #1
 80021d4:	430a      	orrs	r2, r1
 80021d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a16      	ldr	r2, [pc, #88]	; (8002238 <HAL_TIM_Base_Start_IT+0x90>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d004      	beq.n	80021ec <HAL_TIM_Base_Start_IT+0x44>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a15      	ldr	r2, [pc, #84]	; (800223c <HAL_TIM_Base_Start_IT+0x94>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d116      	bne.n	800221a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	4a13      	ldr	r2, [pc, #76]	; (8002240 <HAL_TIM_Base_Start_IT+0x98>)
 80021f4:	4013      	ands	r3, r2
 80021f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2b06      	cmp	r3, #6
 80021fc:	d016      	beq.n	800222c <HAL_TIM_Base_Start_IT+0x84>
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	2380      	movs	r3, #128	; 0x80
 8002202:	025b      	lsls	r3, r3, #9
 8002204:	429a      	cmp	r2, r3
 8002206:	d011      	beq.n	800222c <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2101      	movs	r1, #1
 8002214:	430a      	orrs	r2, r1
 8002216:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002218:	e008      	b.n	800222c <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2101      	movs	r1, #1
 8002226:	430a      	orrs	r2, r1
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	e000      	b.n	800222e <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800222c:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	0018      	movs	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	b004      	add	sp, #16
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40012c00 	.word	0x40012c00
 800223c:	40000400 	.word	0x40000400
 8002240:	00010007 	.word	0x00010007

08002244 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	2202      	movs	r2, #2
 8002254:	4013      	ands	r3, r2
 8002256:	2b02      	cmp	r3, #2
 8002258:	d124      	bne.n	80022a4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	2202      	movs	r2, #2
 8002262:	4013      	ands	r3, r2
 8002264:	2b02      	cmp	r3, #2
 8002266:	d11d      	bne.n	80022a4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2203      	movs	r2, #3
 800226e:	4252      	negs	r2, r2
 8002270:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2201      	movs	r2, #1
 8002276:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	2203      	movs	r2, #3
 8002280:	4013      	ands	r3, r2
 8002282:	d004      	beq.n	800228e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	0018      	movs	r0, r3
 8002288:	f000 f91e 	bl	80024c8 <HAL_TIM_IC_CaptureCallback>
 800228c:	e007      	b.n	800229e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	0018      	movs	r0, r3
 8002292:	f000 f911 	bl	80024b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	0018      	movs	r0, r3
 800229a:	f000 f91d 	bl	80024d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	2204      	movs	r2, #4
 80022ac:	4013      	ands	r3, r2
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	d125      	bne.n	80022fe <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	2204      	movs	r2, #4
 80022ba:	4013      	ands	r3, r2
 80022bc:	2b04      	cmp	r3, #4
 80022be:	d11e      	bne.n	80022fe <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2205      	movs	r2, #5
 80022c6:	4252      	negs	r2, r2
 80022c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2202      	movs	r2, #2
 80022ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	699a      	ldr	r2, [r3, #24]
 80022d6:	23c0      	movs	r3, #192	; 0xc0
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4013      	ands	r3, r2
 80022dc:	d004      	beq.n	80022e8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	0018      	movs	r0, r3
 80022e2:	f000 f8f1 	bl	80024c8 <HAL_TIM_IC_CaptureCallback>
 80022e6:	e007      	b.n	80022f8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	0018      	movs	r0, r3
 80022ec:	f000 f8e4 	bl	80024b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	0018      	movs	r0, r3
 80022f4:	f000 f8f0 	bl	80024d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	2208      	movs	r2, #8
 8002306:	4013      	ands	r3, r2
 8002308:	2b08      	cmp	r3, #8
 800230a:	d124      	bne.n	8002356 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	2208      	movs	r2, #8
 8002314:	4013      	ands	r3, r2
 8002316:	2b08      	cmp	r3, #8
 8002318:	d11d      	bne.n	8002356 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2209      	movs	r2, #9
 8002320:	4252      	negs	r2, r2
 8002322:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2204      	movs	r2, #4
 8002328:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	2203      	movs	r2, #3
 8002332:	4013      	ands	r3, r2
 8002334:	d004      	beq.n	8002340 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	0018      	movs	r0, r3
 800233a:	f000 f8c5 	bl	80024c8 <HAL_TIM_IC_CaptureCallback>
 800233e:	e007      	b.n	8002350 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	0018      	movs	r0, r3
 8002344:	f000 f8b8 	bl	80024b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	0018      	movs	r0, r3
 800234c:	f000 f8c4 	bl	80024d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	2210      	movs	r2, #16
 800235e:	4013      	ands	r3, r2
 8002360:	2b10      	cmp	r3, #16
 8002362:	d125      	bne.n	80023b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	2210      	movs	r2, #16
 800236c:	4013      	ands	r3, r2
 800236e:	2b10      	cmp	r3, #16
 8002370:	d11e      	bne.n	80023b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2211      	movs	r2, #17
 8002378:	4252      	negs	r2, r2
 800237a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2208      	movs	r2, #8
 8002380:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	69da      	ldr	r2, [r3, #28]
 8002388:	23c0      	movs	r3, #192	; 0xc0
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4013      	ands	r3, r2
 800238e:	d004      	beq.n	800239a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	0018      	movs	r0, r3
 8002394:	f000 f898 	bl	80024c8 <HAL_TIM_IC_CaptureCallback>
 8002398:	e007      	b.n	80023aa <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	0018      	movs	r0, r3
 800239e:	f000 f88b 	bl	80024b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	0018      	movs	r0, r3
 80023a6:	f000 f897 	bl	80024d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	2201      	movs	r2, #1
 80023b8:	4013      	ands	r3, r2
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d10f      	bne.n	80023de <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	2201      	movs	r2, #1
 80023c6:	4013      	ands	r3, r2
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d108      	bne.n	80023de <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2202      	movs	r2, #2
 80023d2:	4252      	negs	r2, r2
 80023d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	0018      	movs	r0, r3
 80023da:	f000 f865 	bl	80024a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	2280      	movs	r2, #128	; 0x80
 80023e6:	4013      	ands	r3, r2
 80023e8:	2b80      	cmp	r3, #128	; 0x80
 80023ea:	d10f      	bne.n	800240c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	2280      	movs	r2, #128	; 0x80
 80023f4:	4013      	ands	r3, r2
 80023f6:	2b80      	cmp	r3, #128	; 0x80
 80023f8:	d108      	bne.n	800240c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2281      	movs	r2, #129	; 0x81
 8002400:	4252      	negs	r2, r2
 8002402:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	0018      	movs	r0, r3
 8002408:	f000 f8ea 	bl	80025e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	691a      	ldr	r2, [r3, #16]
 8002412:	2380      	movs	r3, #128	; 0x80
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	401a      	ands	r2, r3
 8002418:	2380      	movs	r3, #128	; 0x80
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	429a      	cmp	r2, r3
 800241e:	d10e      	bne.n	800243e <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	2280      	movs	r2, #128	; 0x80
 8002428:	4013      	ands	r3, r2
 800242a:	2b80      	cmp	r3, #128	; 0x80
 800242c:	d107      	bne.n	800243e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a1c      	ldr	r2, [pc, #112]	; (80024a4 <HAL_TIM_IRQHandler+0x260>)
 8002434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	0018      	movs	r0, r3
 800243a:	f000 f8d9 	bl	80025f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	2240      	movs	r2, #64	; 0x40
 8002446:	4013      	ands	r3, r2
 8002448:	2b40      	cmp	r3, #64	; 0x40
 800244a:	d10f      	bne.n	800246c <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	2240      	movs	r2, #64	; 0x40
 8002454:	4013      	ands	r3, r2
 8002456:	2b40      	cmp	r3, #64	; 0x40
 8002458:	d108      	bne.n	800246c <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2241      	movs	r2, #65	; 0x41
 8002460:	4252      	negs	r2, r2
 8002462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	0018      	movs	r0, r3
 8002468:	f000 f83e 	bl	80024e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	2220      	movs	r2, #32
 8002474:	4013      	ands	r3, r2
 8002476:	2b20      	cmp	r3, #32
 8002478:	d10f      	bne.n	800249a <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	2220      	movs	r2, #32
 8002482:	4013      	ands	r3, r2
 8002484:	2b20      	cmp	r3, #32
 8002486:	d108      	bne.n	800249a <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2221      	movs	r2, #33	; 0x21
 800248e:	4252      	negs	r2, r2
 8002490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	0018      	movs	r0, r3
 8002496:	f000 f89b 	bl	80025d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800249a:	46c0      	nop			; (mov r8, r8)
 800249c:	46bd      	mov	sp, r7
 800249e:	b002      	add	sp, #8
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	46c0      	nop			; (mov r8, r8)
 80024a4:	fffffeff 	.word	0xfffffeff

080024a8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80024b0:	46c0      	nop			; (mov r8, r8)
 80024b2:	46bd      	mov	sp, r7
 80024b4:	b002      	add	sp, #8
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024c0:	46c0      	nop			; (mov r8, r8)
 80024c2:	46bd      	mov	sp, r7
 80024c4:	b002      	add	sp, #8
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024d0:	46c0      	nop			; (mov r8, r8)
 80024d2:	46bd      	mov	sp, r7
 80024d4:	b002      	add	sp, #8
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024e0:	46c0      	nop			; (mov r8, r8)
 80024e2:	46bd      	mov	sp, r7
 80024e4:	b002      	add	sp, #8
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024f0:	46c0      	nop			; (mov r8, r8)
 80024f2:	46bd      	mov	sp, r7
 80024f4:	b002      	add	sp, #8
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a2b      	ldr	r2, [pc, #172]	; (80025b8 <TIM_Base_SetConfig+0xc0>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d003      	beq.n	8002518 <TIM_Base_SetConfig+0x20>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a2a      	ldr	r2, [pc, #168]	; (80025bc <TIM_Base_SetConfig+0xc4>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d108      	bne.n	800252a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2270      	movs	r2, #112	; 0x70
 800251c:	4393      	bics	r3, r2
 800251e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	4313      	orrs	r3, r2
 8002528:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a22      	ldr	r2, [pc, #136]	; (80025b8 <TIM_Base_SetConfig+0xc0>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d00f      	beq.n	8002552 <TIM_Base_SetConfig+0x5a>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a21      	ldr	r2, [pc, #132]	; (80025bc <TIM_Base_SetConfig+0xc4>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d00b      	beq.n	8002552 <TIM_Base_SetConfig+0x5a>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a20      	ldr	r2, [pc, #128]	; (80025c0 <TIM_Base_SetConfig+0xc8>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d007      	beq.n	8002552 <TIM_Base_SetConfig+0x5a>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a1f      	ldr	r2, [pc, #124]	; (80025c4 <TIM_Base_SetConfig+0xcc>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d003      	beq.n	8002552 <TIM_Base_SetConfig+0x5a>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a1e      	ldr	r2, [pc, #120]	; (80025c8 <TIM_Base_SetConfig+0xd0>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d108      	bne.n	8002564 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	4a1d      	ldr	r2, [pc, #116]	; (80025cc <TIM_Base_SetConfig+0xd4>)
 8002556:	4013      	ands	r3, r2
 8002558:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	4313      	orrs	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2280      	movs	r2, #128	; 0x80
 8002568:	4393      	bics	r3, r2
 800256a:	001a      	movs	r2, r3
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	4313      	orrs	r3, r2
 8002572:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	689a      	ldr	r2, [r3, #8]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a0a      	ldr	r2, [pc, #40]	; (80025b8 <TIM_Base_SetConfig+0xc0>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d007      	beq.n	80025a2 <TIM_Base_SetConfig+0xaa>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a0b      	ldr	r2, [pc, #44]	; (80025c4 <TIM_Base_SetConfig+0xcc>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d003      	beq.n	80025a2 <TIM_Base_SetConfig+0xaa>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a0a      	ldr	r2, [pc, #40]	; (80025c8 <TIM_Base_SetConfig+0xd0>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d103      	bne.n	80025aa <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	691a      	ldr	r2, [r3, #16]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	615a      	str	r2, [r3, #20]
}
 80025b0:	46c0      	nop			; (mov r8, r8)
 80025b2:	46bd      	mov	sp, r7
 80025b4:	b004      	add	sp, #16
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40012c00 	.word	0x40012c00
 80025bc:	40000400 	.word	0x40000400
 80025c0:	40002000 	.word	0x40002000
 80025c4:	40014400 	.word	0x40014400
 80025c8:	40014800 	.word	0x40014800
 80025cc:	fffffcff 	.word	0xfffffcff

080025d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025d8:	46c0      	nop			; (mov r8, r8)
 80025da:	46bd      	mov	sp, r7
 80025dc:	b002      	add	sp, #8
 80025de:	bd80      	pop	{r7, pc}

080025e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025e8:	46c0      	nop			; (mov r8, r8)
 80025ea:	46bd      	mov	sp, r7
 80025ec:	b002      	add	sp, #8
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80025f8:	46c0      	nop			; (mov r8, r8)
 80025fa:	46bd      	mov	sp, r7
 80025fc:	b002      	add	sp, #8
 80025fe:	bd80      	pop	{r7, pc}

08002600 <__libc_init_array>:
 8002600:	b570      	push	{r4, r5, r6, lr}
 8002602:	2600      	movs	r6, #0
 8002604:	4d0c      	ldr	r5, [pc, #48]	; (8002638 <__libc_init_array+0x38>)
 8002606:	4c0d      	ldr	r4, [pc, #52]	; (800263c <__libc_init_array+0x3c>)
 8002608:	1b64      	subs	r4, r4, r5
 800260a:	10a4      	asrs	r4, r4, #2
 800260c:	42a6      	cmp	r6, r4
 800260e:	d109      	bne.n	8002624 <__libc_init_array+0x24>
 8002610:	2600      	movs	r6, #0
 8002612:	f000 f821 	bl	8002658 <_init>
 8002616:	4d0a      	ldr	r5, [pc, #40]	; (8002640 <__libc_init_array+0x40>)
 8002618:	4c0a      	ldr	r4, [pc, #40]	; (8002644 <__libc_init_array+0x44>)
 800261a:	1b64      	subs	r4, r4, r5
 800261c:	10a4      	asrs	r4, r4, #2
 800261e:	42a6      	cmp	r6, r4
 8002620:	d105      	bne.n	800262e <__libc_init_array+0x2e>
 8002622:	bd70      	pop	{r4, r5, r6, pc}
 8002624:	00b3      	lsls	r3, r6, #2
 8002626:	58eb      	ldr	r3, [r5, r3]
 8002628:	4798      	blx	r3
 800262a:	3601      	adds	r6, #1
 800262c:	e7ee      	b.n	800260c <__libc_init_array+0xc>
 800262e:	00b3      	lsls	r3, r6, #2
 8002630:	58eb      	ldr	r3, [r5, r3]
 8002632:	4798      	blx	r3
 8002634:	3601      	adds	r6, #1
 8002636:	e7f2      	b.n	800261e <__libc_init_array+0x1e>
 8002638:	08002790 	.word	0x08002790
 800263c:	08002790 	.word	0x08002790
 8002640:	08002790 	.word	0x08002790
 8002644:	08002794 	.word	0x08002794

08002648 <memset>:
 8002648:	0003      	movs	r3, r0
 800264a:	1882      	adds	r2, r0, r2
 800264c:	4293      	cmp	r3, r2
 800264e:	d100      	bne.n	8002652 <memset+0xa>
 8002650:	4770      	bx	lr
 8002652:	7019      	strb	r1, [r3, #0]
 8002654:	3301      	adds	r3, #1
 8002656:	e7f9      	b.n	800264c <memset+0x4>

08002658 <_init>:
 8002658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800265e:	bc08      	pop	{r3}
 8002660:	469e      	mov	lr, r3
 8002662:	4770      	bx	lr

08002664 <_fini>:
 8002664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002666:	46c0      	nop			; (mov r8, r8)
 8002668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800266a:	bc08      	pop	{r3}
 800266c:	469e      	mov	lr, r3
 800266e:	4770      	bx	lr
