
hex_bin_converter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002064  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800211c  0800211c  0001211c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800215c  0800215c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  0800215c  0800215c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800215c  0800215c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800215c  0800215c  0001215c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002160  08002160  00012160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002164  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000005c  080021c0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  080021c0  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d52  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a97  00000000  00000000  00029dd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  0002b870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b0  00000000  00000000  0002c2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000141b1  00000000  00000000  0002cca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc2b  00000000  00000000  00040e59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080809  00000000  00000000  0004ca84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cd28d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000253c  00000000  00000000  000cd2e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000005c 	.word	0x2000005c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002104 	.word	0x08002104

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000060 	.word	0x20000060
 80000fc:	08002104 	.word	0x08002104

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b088      	sub	sp, #32
 800021c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800021e:	230c      	movs	r3, #12
 8000220:	18fb      	adds	r3, r7, r3
 8000222:	0018      	movs	r0, r3
 8000224:	2314      	movs	r3, #20
 8000226:	001a      	movs	r2, r3
 8000228:	2100      	movs	r1, #0
 800022a:	f001 ff63 	bl	80020f4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800022e:	4b0f      	ldr	r3, [pc, #60]	; (800026c <MX_GPIO_Init+0x54>)
 8000230:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000232:	4b0e      	ldr	r3, [pc, #56]	; (800026c <MX_GPIO_Init+0x54>)
 8000234:	2101      	movs	r1, #1
 8000236:	430a      	orrs	r2, r1
 8000238:	635a      	str	r2, [r3, #52]	; 0x34
 800023a:	4b0c      	ldr	r3, [pc, #48]	; (800026c <MX_GPIO_Init+0x54>)
 800023c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800023e:	2201      	movs	r2, #1
 8000240:	4013      	ands	r3, r2
 8000242:	60bb      	str	r3, [r7, #8]
 8000244:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000246:	4b09      	ldr	r3, [pc, #36]	; (800026c <MX_GPIO_Init+0x54>)
 8000248:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800024a:	4b08      	ldr	r3, [pc, #32]	; (800026c <MX_GPIO_Init+0x54>)
 800024c:	2102      	movs	r1, #2
 800024e:	430a      	orrs	r2, r1
 8000250:	635a      	str	r2, [r3, #52]	; 0x34
 8000252:	4b06      	ldr	r3, [pc, #24]	; (800026c <MX_GPIO_Init+0x54>)
 8000254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000256:	2202      	movs	r2, #2
 8000258:	4013      	ands	r3, r2
 800025a:	607b      	str	r3, [r7, #4]
 800025c:	687b      	ldr	r3, [r7, #4]

  MX_GPIO_InitConfigurationPin();
 800025e:	f000 f807 	bl	8000270 <MX_GPIO_InitConfigurationPin>
}
 8000262:	46c0      	nop			; (mov r8, r8)
 8000264:	46bd      	mov	sp, r7
 8000266:	b008      	add	sp, #32
 8000268:	bd80      	pop	{r7, pc}
 800026a:	46c0      	nop			; (mov r8, r8)
 800026c:	40021000 	.word	0x40021000

08000270 <MX_GPIO_InitConfigurationPin>:

/* USER CODE BEGIN 2 */
void MX_GPIO_InitConfigurationPin() {
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af00      	add	r7, sp, #0
  /* Init PIN of configuration mode */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	0018      	movs	r0, r3
 800027a:	2314      	movs	r3, #20
 800027c:	001a      	movs	r2, r3
 800027e:	2100      	movs	r1, #0
 8000280:	f001 ff38 	bl	80020f4 <memset>

  GPIO_InitStruct.Pin = BOARD_MODE_Pin;
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	2240      	movs	r2, #64	; 0x40
 8000288:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	2200      	movs	r2, #0
 800028e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	2200      	movs	r2, #0
 8000294:	609a      	str	r2, [r3, #8]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	4a04      	ldr	r2, [pc, #16]	; (80002ac <MX_GPIO_InitConfigurationPin+0x3c>)
 800029a:	0019      	movs	r1, r3
 800029c:	0010      	movs	r0, r2
 800029e:	f000 fe09 	bl	8000eb4 <HAL_GPIO_Init>
}
 80002a2:	46c0      	nop			; (mov r8, r8)
 80002a4:	46bd      	mov	sp, r7
 80002a6:	b006      	add	sp, #24
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	46c0      	nop			; (mov r8, r8)
 80002ac:	50000400 	.word	0x50000400

080002b0 <MX_GPIO_ReinitInBinToHexMode>:


void MX_GPIO_ReinitInBinToHexMode(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b086      	sub	sp, #24
 80002b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	0018      	movs	r0, r3
 80002ba:	2314      	movs	r3, #20
 80002bc:	001a      	movs	r2, r3
 80002be:	2100      	movs	r1, #0
 80002c0:	f001 ff18 	bl	80020f4 <memset>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISPLAY_SWITCH_Pin|OUTPUT_DISPLAY_A_Pin|OUTPUT_DISPLAY_B_Pin|OUTPUT_DISPLAY_C_Pin
 80002c4:	23a0      	movs	r3, #160	; 0xa0
 80002c6:	05db      	lsls	r3, r3, #23
 80002c8:	2200      	movs	r2, #0
 80002ca:	21ff      	movs	r1, #255	; 0xff
 80002cc:	0018      	movs	r0, r3
 80002ce:	f000 ff72 	bl	80011b6 <HAL_GPIO_WritePin>
                          |OUTPUT_DISPLAY_D_Pin|OUTPUT_DISPLAY_E_Pin|OUTPUT_DISPLAY_F_Pin|OUTPUT_DISPLAY_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin PAPin PAPin PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DISPLAY_SWITCH_Pin|OUTPUT_DISPLAY_A_Pin|OUTPUT_DISPLAY_B_Pin|OUTPUT_DISPLAY_C_Pin
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	22ff      	movs	r2, #255	; 0xff
 80002d6:	601a      	str	r2, [r3, #0]
                          |OUTPUT_DISPLAY_D_Pin|OUTPUT_DISPLAY_E_Pin|OUTPUT_DISPLAY_F_Pin|OUTPUT_DISPLAY_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	2201      	movs	r2, #1
 80002dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	2200      	movs	r2, #0
 80002e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002e4:	1d3b      	adds	r3, r7, #4
 80002e6:	2200      	movs	r2, #0
 80002e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ea:	1d3a      	adds	r2, r7, #4
 80002ec:	23a0      	movs	r3, #160	; 0xa0
 80002ee:	05db      	lsls	r3, r3, #23
 80002f0:	0011      	movs	r1, r2
 80002f2:	0018      	movs	r0, r3
 80002f4:	f000 fdde 	bl	8000eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LS_BINARY_8_Pin|LS_BINARY_2_Pin|LS_BINARY_4_Pin|MS_BINARY_2_Pin|MS_BINARY_8_Pin|MS_BINARY_1_Pin;
 80002f8:	1d3b      	adds	r3, r7, #4
 80002fa:	229f      	movs	r2, #159	; 0x9f
 80002fc:	0212      	lsls	r2, r2, #8
 80002fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	2200      	movs	r2, #0
 8000304:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	2200      	movs	r2, #0
 800030a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800030c:	1d3a      	adds	r2, r7, #4
 800030e:	23a0      	movs	r3, #160	; 0xa0
 8000310:	05db      	lsls	r3, r3, #23
 8000312:	0011      	movs	r1, r2
 8000314:	0018      	movs	r0, r3
 8000316:	f000 fdcd 	bl	8000eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LS_BINARY_1_Pin|MS_BINARY_4_Pin;
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	2230      	movs	r2, #48	; 0x30
 800031e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000320:	1d3b      	adds	r3, r7, #4
 8000322:	2200      	movs	r2, #0
 8000324:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	2200      	movs	r2, #0
 800032a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	4a04      	ldr	r2, [pc, #16]	; (8000340 <MX_GPIO_ReinitInBinToHexMode+0x90>)
 8000330:	0019      	movs	r1, r3
 8000332:	0010      	movs	r0, r2
 8000334:	f000 fdbe 	bl	8000eb4 <HAL_GPIO_Init>
}
 8000338:	46c0      	nop			; (mov r8, r8)
 800033a:	46bd      	mov	sp, r7
 800033c:	b006      	add	sp, #24
 800033e:	bd80      	pop	{r7, pc}
 8000340:	50000400 	.word	0x50000400

08000344 <MX_GPIO_RenitInHexToBinMode>:

void MX_GPIO_RenitInHexToBinMode(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b086      	sub	sp, #24
 8000348:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	0018      	movs	r0, r3
 800034e:	2314      	movs	r3, #20
 8000350:	001a      	movs	r2, r3
 8000352:	2100      	movs	r1, #0
 8000354:	f001 fece 	bl	80020f4 <memset>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISPLAY_SWITCH_Pin|OUTPUT_DISPLAY_A_Pin|OUTPUT_DISPLAY_B_Pin|OUTPUT_DISPLAY_C_Pin
 8000358:	4922      	ldr	r1, [pc, #136]	; (80003e4 <MX_GPIO_RenitInHexToBinMode+0xa0>)
 800035a:	23a0      	movs	r3, #160	; 0xa0
 800035c:	05db      	lsls	r3, r3, #23
 800035e:	2200      	movs	r2, #0
 8000360:	0018      	movs	r0, r3
 8000362:	f000 ff28 	bl	80011b6 <HAL_GPIO_WritePin>
                          |OUTPUT_DISPLAY_D_Pin|OUTPUT_DISPLAY_E_Pin|OUTPUT_DISPLAY_F_Pin|OUTPUT_DISPLAY_G_Pin
                          |LS_BINARY_8_Pin|LS_BINARY_2_Pin|LS_BINARY_4_Pin|MS_BINARY_2_Pin
                          |MS_BINARY_8_Pin|MS_BINARY_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LS_BINARY_1_Pin|MS_BINARY_4_Pin, GPIO_PIN_RESET);
 8000366:	4b20      	ldr	r3, [pc, #128]	; (80003e8 <MX_GPIO_RenitInHexToBinMode+0xa4>)
 8000368:	2200      	movs	r2, #0
 800036a:	2130      	movs	r1, #48	; 0x30
 800036c:	0018      	movs	r0, r3
 800036e:	f000 ff22 	bl	80011b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = DISPLAY_SWITCH_Pin|OUTPUT_DISPLAY_A_Pin|OUTPUT_DISPLAY_B_Pin|OUTPUT_DISPLAY_C_Pin
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	4a1b      	ldr	r2, [pc, #108]	; (80003e4 <MX_GPIO_RenitInHexToBinMode+0xa0>)
 8000376:	601a      	str	r2, [r3, #0]
                          |OUTPUT_DISPLAY_D_Pin|OUTPUT_DISPLAY_E_Pin|OUTPUT_DISPLAY_F_Pin|OUTPUT_DISPLAY_G_Pin
                          |LS_BINARY_8_Pin|LS_BINARY_2_Pin|LS_BINARY_4_Pin|MS_BINARY_2_Pin
                          |MS_BINARY_8_Pin|MS_BINARY_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000378:	1d3b      	adds	r3, r7, #4
 800037a:	2201      	movs	r2, #1
 800037c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	2200      	movs	r2, #0
 8000382:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000384:	1d3b      	adds	r3, r7, #4
 8000386:	2200      	movs	r2, #0
 8000388:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800038a:	1d3a      	adds	r2, r7, #4
 800038c:	23a0      	movs	r3, #160	; 0xa0
 800038e:	05db      	lsls	r3, r3, #23
 8000390:	0011      	movs	r1, r2
 8000392:	0018      	movs	r0, r3
 8000394:	f000 fd8e 	bl	8000eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = MS_INCREMENT_BUTTON_Pin|MS_DECREMENT_BUTTON_Pin|LS_INCREMENT_BUTTON_Pin|LS_DECREMENT_BUTTON_Pin;
 8000398:	1d3b      	adds	r3, r7, #4
 800039a:	220f      	movs	r2, #15
 800039c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	2200      	movs	r2, #0
 80003a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a4:	1d3b      	adds	r3, r7, #4
 80003a6:	2200      	movs	r2, #0
 80003a8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	4a0e      	ldr	r2, [pc, #56]	; (80003e8 <MX_GPIO_RenitInHexToBinMode+0xa4>)
 80003ae:	0019      	movs	r1, r3
 80003b0:	0010      	movs	r0, r2
 80003b2:	f000 fd7f 	bl	8000eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LS_BINARY_1_Pin|MS_BINARY_4_Pin;
 80003b6:	1d3b      	adds	r3, r7, #4
 80003b8:	2230      	movs	r2, #48	; 0x30
 80003ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003bc:	1d3b      	adds	r3, r7, #4
 80003be:	2201      	movs	r2, #1
 80003c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c2:	1d3b      	adds	r3, r7, #4
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c8:	1d3b      	adds	r3, r7, #4
 80003ca:	2200      	movs	r2, #0
 80003cc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	4a05      	ldr	r2, [pc, #20]	; (80003e8 <MX_GPIO_RenitInHexToBinMode+0xa4>)
 80003d2:	0019      	movs	r1, r3
 80003d4:	0010      	movs	r0, r2
 80003d6:	f000 fd6d 	bl	8000eb4 <HAL_GPIO_Init>
}
 80003da:	46c0      	nop			; (mov r8, r8)
 80003dc:	46bd      	mov	sp, r7
 80003de:	b006      	add	sp, #24
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	46c0      	nop			; (mov r8, r8)
 80003e4:	00009fff 	.word	0x00009fff
 80003e8:	50000400 	.word	0x50000400

080003ec <updateDisplay>:
BoardMode boardMode;

uint8_t lsNumber;
uint8_t msNumber;

void updateDisplay() {
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
	static ActiveDisplay activeDisplay = LS_DISPLAY;

	ActiveDisplay notActiveDisplay = activeDisplay == MS_DISPLAY ? LS_DISPLAY : MS_DISPLAY;
 80003f2:	4b33      	ldr	r3, [pc, #204]	; (80004c0 <updateDisplay+0xd4>)
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	425a      	negs	r2, r3
 80003f8:	4153      	adcs	r3, r2
 80003fa:	b2da      	uxtb	r2, r3
 80003fc:	1d7b      	adds	r3, r7, #5
 80003fe:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, DISPLAY_SWITCH_Pin, notActiveDisplay);
 8000400:	1d7b      	adds	r3, r7, #5
 8000402:	781a      	ldrb	r2, [r3, #0]
 8000404:	23a0      	movs	r3, #160	; 0xa0
 8000406:	05db      	lsls	r3, r3, #23
 8000408:	2101      	movs	r1, #1
 800040a:	0018      	movs	r0, r3
 800040c:	f000 fed3 	bl	80011b6 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < DISPLAY_SEGMENT_COUNT; i++)
 8000410:	1dfb      	adds	r3, r7, #7
 8000412:	2200      	movs	r2, #0
 8000414:	701a      	strb	r2, [r3, #0]
 8000416:	e00f      	b.n	8000438 <updateDisplay+0x4c>
	    HAL_GPIO_WritePin(GPIOA, DisplayPins[i], GPIO_PIN_RESET);
 8000418:	1dfb      	adds	r3, r7, #7
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	4a29      	ldr	r2, [pc, #164]	; (80004c4 <updateDisplay+0xd8>)
 800041e:	5cd3      	ldrb	r3, [r2, r3]
 8000420:	b299      	uxth	r1, r3
 8000422:	23a0      	movs	r3, #160	; 0xa0
 8000424:	05db      	lsls	r3, r3, #23
 8000426:	2200      	movs	r2, #0
 8000428:	0018      	movs	r0, r3
 800042a:	f000 fec4 	bl	80011b6 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < DISPLAY_SEGMENT_COUNT; i++)
 800042e:	1dfb      	adds	r3, r7, #7
 8000430:	781a      	ldrb	r2, [r3, #0]
 8000432:	1dfb      	adds	r3, r7, #7
 8000434:	3201      	adds	r2, #1
 8000436:	701a      	strb	r2, [r3, #0]
 8000438:	1dfb      	adds	r3, r7, #7
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	2b06      	cmp	r3, #6
 800043e:	d9eb      	bls.n	8000418 <updateDisplay+0x2c>

	uint8_t number = activeDisplay == MS_DISPLAY ? msNumber : lsNumber;
 8000440:	4b1f      	ldr	r3, [pc, #124]	; (80004c0 <updateDisplay+0xd4>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d102      	bne.n	800044e <updateDisplay+0x62>
 8000448:	4b1f      	ldr	r3, [pc, #124]	; (80004c8 <updateDisplay+0xdc>)
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	e001      	b.n	8000452 <updateDisplay+0x66>
 800044e:	4b1f      	ldr	r3, [pc, #124]	; (80004cc <updateDisplay+0xe0>)
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	1d3a      	adds	r2, r7, #4
 8000454:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOA, DISPLAY_SWITCH_Pin, activeDisplay);
 8000456:	4b1a      	ldr	r3, [pc, #104]	; (80004c0 <updateDisplay+0xd4>)
 8000458:	781a      	ldrb	r2, [r3, #0]
 800045a:	23a0      	movs	r3, #160	; 0xa0
 800045c:	05db      	lsls	r3, r3, #23
 800045e:	2101      	movs	r1, #1
 8000460:	0018      	movs	r0, r3
 8000462:	f000 fea8 	bl	80011b6 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < DISPLAY_SEGMENT_COUNT; i++)
 8000466:	1dbb      	adds	r3, r7, #6
 8000468:	2200      	movs	r2, #0
 800046a:	701a      	strb	r2, [r3, #0]
 800046c:	e01b      	b.n	80004a6 <updateDisplay+0xba>
	    HAL_GPIO_WritePin(GPIOA, DisplayPins[i], NumberToDisplaySegments[number] << i & 0x40);
 800046e:	1dbb      	adds	r3, r7, #6
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	4a14      	ldr	r2, [pc, #80]	; (80004c4 <updateDisplay+0xd8>)
 8000474:	5cd3      	ldrb	r3, [r2, r3]
 8000476:	b299      	uxth	r1, r3
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	4a14      	ldr	r2, [pc, #80]	; (80004d0 <updateDisplay+0xe4>)
 800047e:	5cd3      	ldrb	r3, [r2, r3]
 8000480:	001a      	movs	r2, r3
 8000482:	1dbb      	adds	r3, r7, #6
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	409a      	lsls	r2, r3
 8000488:	0013      	movs	r3, r2
 800048a:	b2db      	uxtb	r3, r3
 800048c:	2240      	movs	r2, #64	; 0x40
 800048e:	4013      	ands	r3, r2
 8000490:	b2da      	uxtb	r2, r3
 8000492:	23a0      	movs	r3, #160	; 0xa0
 8000494:	05db      	lsls	r3, r3, #23
 8000496:	0018      	movs	r0, r3
 8000498:	f000 fe8d 	bl	80011b6 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < DISPLAY_SEGMENT_COUNT; i++)
 800049c:	1dbb      	adds	r3, r7, #6
 800049e:	781a      	ldrb	r2, [r3, #0]
 80004a0:	1dbb      	adds	r3, r7, #6
 80004a2:	3201      	adds	r2, #1
 80004a4:	701a      	strb	r2, [r3, #0]
 80004a6:	1dbb      	adds	r3, r7, #6
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b06      	cmp	r3, #6
 80004ac:	d9df      	bls.n	800046e <updateDisplay+0x82>

	activeDisplay = notActiveDisplay;
 80004ae:	4b04      	ldr	r3, [pc, #16]	; (80004c0 <updateDisplay+0xd4>)
 80004b0:	1d7a      	adds	r2, r7, #5
 80004b2:	7812      	ldrb	r2, [r2, #0]
 80004b4:	701a      	strb	r2, [r3, #0]
}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	46bd      	mov	sp, r7
 80004ba:	b002      	add	sp, #8
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	2000004c 	.word	0x2000004c
 80004c4:	20000000 	.word	0x20000000
 80004c8:	2000007a 	.word	0x2000007a
 80004cc:	20000079 	.word	0x20000079
 80004d0:	20000008 	.word	0x20000008

080004d4 <updateButton>:

void updateButton(Button *button) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	if((ButtonPinState)HAL_GPIO_ReadPin(GPIOB, button->pin) == BUTTON_IS_PRESSED && button->isButtonPressed) {
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	b29b      	uxth	r3, r3
 80004e2:	4a15      	ldr	r2, [pc, #84]	; (8000538 <updateButton+0x64>)
 80004e4:	0019      	movs	r1, r3
 80004e6:	0010      	movs	r0, r2
 80004e8:	f000 fe48 	bl	800117c <HAL_GPIO_ReadPin>
 80004ec:	1e03      	subs	r3, r0, #0
 80004ee:	d10e      	bne.n	800050e <updateButton+0x3a>
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	785b      	ldrb	r3, [r3, #1]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d00a      	beq.n	800050e <updateButton+0x3a>
		button->isButtonPressed = 0;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2200      	movs	r2, #0
 80004fc:	705a      	strb	r2, [r3, #1]
		button->needToProcces = 1;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	2201      	movs	r2, #1
 8000502:	721a      	strb	r2, [r3, #8]
		button->pressedMillis = HAL_GetTick();
 8000504:	f000 fbee 	bl	8000ce4 <HAL_GetTick>
 8000508:	0002      	movs	r2, r0
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	605a      	str	r2, [r3, #4]
	}

	if(!button->isButtonPressed && (HAL_GetTick() - button->pressedMillis) > BUTTON_DEBOUNCE_MILLIS)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	785b      	ldrb	r3, [r3, #1]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d10c      	bne.n	8000530 <updateButton+0x5c>
 8000516:	f000 fbe5 	bl	8000ce4 <HAL_GetTick>
 800051a:	0002      	movs	r2, r0
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	685b      	ldr	r3, [r3, #4]
 8000520:	1ad2      	subs	r2, r2, r3
 8000522:	238a      	movs	r3, #138	; 0x8a
 8000524:	005b      	lsls	r3, r3, #1
 8000526:	429a      	cmp	r2, r3
 8000528:	d302      	bcc.n	8000530 <updateButton+0x5c>
		button->isButtonPressed = 1;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2201      	movs	r2, #1
 800052e:	705a      	strb	r2, [r3, #1]
}
 8000530:	46c0      	nop			; (mov r8, r8)
 8000532:	46bd      	mov	sp, r7
 8000534:	b002      	add	sp, #8
 8000536:	bd80      	pop	{r7, pc}
 8000538:	50000400 	.word	0x50000400

0800053c <getIncrementedNumber>:

uint8_t getIncrementedNumber(uint8_t number) {
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	0002      	movs	r2, r0
 8000544:	1dfb      	adds	r3, r7, #7
 8000546:	701a      	strb	r2, [r3, #0]
	return number == MAX_NUMBER ? MIN_NUMBER : number + 1;
 8000548:	1dfb      	adds	r3, r7, #7
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	2b0f      	cmp	r3, #15
 800054e:	d004      	beq.n	800055a <getIncrementedNumber+0x1e>
 8000550:	1dfb      	adds	r3, r7, #7
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	3301      	adds	r3, #1
 8000556:	b2db      	uxtb	r3, r3
 8000558:	e000      	b.n	800055c <getIncrementedNumber+0x20>
 800055a:	2300      	movs	r3, #0
}
 800055c:	0018      	movs	r0, r3
 800055e:	46bd      	mov	sp, r7
 8000560:	b002      	add	sp, #8
 8000562:	bd80      	pop	{r7, pc}

08000564 <getDecrementedNumber>:

uint8_t getDecrementedNumber(uint8_t number) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	0002      	movs	r2, r0
 800056c:	1dfb      	adds	r3, r7, #7
 800056e:	701a      	strb	r2, [r3, #0]
	return number == MIN_NUMBER ? MAX_NUMBER : number - 1;
 8000570:	1dfb      	adds	r3, r7, #7
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d004      	beq.n	8000582 <getDecrementedNumber+0x1e>
 8000578:	1dfb      	adds	r3, r7, #7
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	3b01      	subs	r3, #1
 800057e:	b2db      	uxtb	r3, r3
 8000580:	e000      	b.n	8000584 <getDecrementedNumber+0x20>
 8000582:	230f      	movs	r3, #15
}
 8000584:	0018      	movs	r0, r3
 8000586:	46bd      	mov	sp, r7
 8000588:	b002      	add	sp, #8
 800058a:	bd80      	pop	{r7, pc}

0800058c <proccesButton>:

void proccesButton(uint8_t buttonPin) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	0002      	movs	r2, r0
 8000594:	1dfb      	adds	r3, r7, #7
 8000596:	701a      	strb	r2, [r3, #0]
	switch (buttonPin) {
 8000598:	1dfb      	adds	r3, r7, #7
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b08      	cmp	r3, #8
 800059e:	d026      	beq.n	80005ee <proccesButton+0x62>
 80005a0:	dc2f      	bgt.n	8000602 <proccesButton+0x76>
 80005a2:	2b04      	cmp	r3, #4
 80005a4:	d019      	beq.n	80005da <proccesButton+0x4e>
 80005a6:	dc2c      	bgt.n	8000602 <proccesButton+0x76>
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d002      	beq.n	80005b2 <proccesButton+0x26>
 80005ac:	2b02      	cmp	r3, #2
 80005ae:	d00a      	beq.n	80005c6 <proccesButton+0x3a>
	        break;
	    case LS_DECREMENT_BUTTON_Pin:
			lsNumber = getDecrementedNumber(lsNumber);
	    	break;
	}
}
 80005b0:	e027      	b.n	8000602 <proccesButton+0x76>
			msNumber = getIncrementedNumber(msNumber);
 80005b2:	4b16      	ldr	r3, [pc, #88]	; (800060c <proccesButton+0x80>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	0018      	movs	r0, r3
 80005b8:	f7ff ffc0 	bl	800053c <getIncrementedNumber>
 80005bc:	0003      	movs	r3, r0
 80005be:	001a      	movs	r2, r3
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <proccesButton+0x80>)
 80005c2:	701a      	strb	r2, [r3, #0]
	        break;
 80005c4:	e01d      	b.n	8000602 <proccesButton+0x76>
			msNumber = getDecrementedNumber(msNumber);
 80005c6:	4b11      	ldr	r3, [pc, #68]	; (800060c <proccesButton+0x80>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	0018      	movs	r0, r3
 80005cc:	f7ff ffca 	bl	8000564 <getDecrementedNumber>
 80005d0:	0003      	movs	r3, r0
 80005d2:	001a      	movs	r2, r3
 80005d4:	4b0d      	ldr	r3, [pc, #52]	; (800060c <proccesButton+0x80>)
 80005d6:	701a      	strb	r2, [r3, #0]
	        break;
 80005d8:	e013      	b.n	8000602 <proccesButton+0x76>
			lsNumber = getIncrementedNumber(lsNumber);
 80005da:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <proccesButton+0x84>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	0018      	movs	r0, r3
 80005e0:	f7ff ffac 	bl	800053c <getIncrementedNumber>
 80005e4:	0003      	movs	r3, r0
 80005e6:	001a      	movs	r2, r3
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <proccesButton+0x84>)
 80005ea:	701a      	strb	r2, [r3, #0]
	        break;
 80005ec:	e009      	b.n	8000602 <proccesButton+0x76>
			lsNumber = getDecrementedNumber(lsNumber);
 80005ee:	4b08      	ldr	r3, [pc, #32]	; (8000610 <proccesButton+0x84>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	0018      	movs	r0, r3
 80005f4:	f7ff ffb6 	bl	8000564 <getDecrementedNumber>
 80005f8:	0003      	movs	r3, r0
 80005fa:	001a      	movs	r2, r3
 80005fc:	4b04      	ldr	r3, [pc, #16]	; (8000610 <proccesButton+0x84>)
 80005fe:	701a      	strb	r2, [r3, #0]
	    	break;
 8000600:	46c0      	nop			; (mov r8, r8)
}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	46bd      	mov	sp, r7
 8000606:	b002      	add	sp, #8
 8000608:	bd80      	pop	{r7, pc}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	2000007a 	.word	0x2000007a
 8000610:	20000079 	.word	0x20000079

08000614 <getInvertedBit>:

uint8_t getInvertedBit(uint8_t number, uint8_t bitPosition) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	0002      	movs	r2, r0
 800061c:	1dfb      	adds	r3, r7, #7
 800061e:	701a      	strb	r2, [r3, #0]
 8000620:	1dbb      	adds	r3, r7, #6
 8000622:	1c0a      	adds	r2, r1, #0
 8000624:	701a      	strb	r2, [r3, #0]
	return ~number >> bitPosition & 1;
 8000626:	1dfb      	adds	r3, r7, #7
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	43da      	mvns	r2, r3
 800062c:	1dbb      	adds	r3, r7, #6
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	411a      	asrs	r2, r3
 8000632:	0013      	movs	r3, r2
 8000634:	b2db      	uxtb	r3, r3
 8000636:	2201      	movs	r2, #1
 8000638:	4013      	ands	r3, r2
 800063a:	b2db      	uxtb	r3, r3
}
 800063c:	0018      	movs	r0, r3
 800063e:	46bd      	mov	sp, r7
 8000640:	b002      	add	sp, #8
 8000642:	bd80      	pop	{r7, pc}

08000644 <writeBinaryRepresention>:

void writeBinaryRepresention() {
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, MS_BINARY_1_Pin, getInvertedBit(msNumber, 0));
 8000648:	4b3b      	ldr	r3, [pc, #236]	; (8000738 <writeBinaryRepresention+0xf4>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2100      	movs	r1, #0
 800064e:	0018      	movs	r0, r3
 8000650:	f7ff ffe0 	bl	8000614 <getInvertedBit>
 8000654:	0003      	movs	r3, r0
 8000656:	001a      	movs	r2, r3
 8000658:	2380      	movs	r3, #128	; 0x80
 800065a:	0219      	lsls	r1, r3, #8
 800065c:	23a0      	movs	r3, #160	; 0xa0
 800065e:	05db      	lsls	r3, r3, #23
 8000660:	0018      	movs	r0, r3
 8000662:	f000 fda8 	bl	80011b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, MS_BINARY_2_Pin, getInvertedBit(msNumber, 1));
 8000666:	4b34      	ldr	r3, [pc, #208]	; (8000738 <writeBinaryRepresention+0xf4>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2101      	movs	r1, #1
 800066c:	0018      	movs	r0, r3
 800066e:	f7ff ffd1 	bl	8000614 <getInvertedBit>
 8000672:	0003      	movs	r3, r0
 8000674:	001a      	movs	r2, r3
 8000676:	2380      	movs	r3, #128	; 0x80
 8000678:	0119      	lsls	r1, r3, #4
 800067a:	23a0      	movs	r3, #160	; 0xa0
 800067c:	05db      	lsls	r3, r3, #23
 800067e:	0018      	movs	r0, r3
 8000680:	f000 fd99 	bl	80011b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, MS_BINARY_4_Pin, getInvertedBit(msNumber, 2));
 8000684:	4b2c      	ldr	r3, [pc, #176]	; (8000738 <writeBinaryRepresention+0xf4>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2102      	movs	r1, #2
 800068a:	0018      	movs	r0, r3
 800068c:	f7ff ffc2 	bl	8000614 <getInvertedBit>
 8000690:	0003      	movs	r3, r0
 8000692:	001a      	movs	r2, r3
 8000694:	23a0      	movs	r3, #160	; 0xa0
 8000696:	05db      	lsls	r3, r3, #23
 8000698:	2120      	movs	r1, #32
 800069a:	0018      	movs	r0, r3
 800069c:	f000 fd8b 	bl	80011b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, MS_BINARY_8_Pin, getInvertedBit(msNumber, 3));
 80006a0:	4b25      	ldr	r3, [pc, #148]	; (8000738 <writeBinaryRepresention+0xf4>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2103      	movs	r1, #3
 80006a6:	0018      	movs	r0, r3
 80006a8:	f7ff ffb4 	bl	8000614 <getInvertedBit>
 80006ac:	0003      	movs	r3, r0
 80006ae:	001a      	movs	r2, r3
 80006b0:	2380      	movs	r3, #128	; 0x80
 80006b2:	0159      	lsls	r1, r3, #5
 80006b4:	23a0      	movs	r3, #160	; 0xa0
 80006b6:	05db      	lsls	r3, r3, #23
 80006b8:	0018      	movs	r0, r3
 80006ba:	f000 fd7c 	bl	80011b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, LS_BINARY_1_Pin, getInvertedBit(lsNumber, 0));
 80006be:	4b1f      	ldr	r3, [pc, #124]	; (800073c <writeBinaryRepresention+0xf8>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2100      	movs	r1, #0
 80006c4:	0018      	movs	r0, r3
 80006c6:	f7ff ffa5 	bl	8000614 <getInvertedBit>
 80006ca:	0003      	movs	r3, r0
 80006cc:	001a      	movs	r2, r3
 80006ce:	23a0      	movs	r3, #160	; 0xa0
 80006d0:	05db      	lsls	r3, r3, #23
 80006d2:	2110      	movs	r1, #16
 80006d4:	0018      	movs	r0, r3
 80006d6:	f000 fd6e 	bl	80011b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LS_BINARY_2_Pin, getInvertedBit(lsNumber, 1));
 80006da:	4b18      	ldr	r3, [pc, #96]	; (800073c <writeBinaryRepresention+0xf8>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2101      	movs	r1, #1
 80006e0:	0018      	movs	r0, r3
 80006e2:	f7ff ff97 	bl	8000614 <getInvertedBit>
 80006e6:	0003      	movs	r3, r0
 80006e8:	001a      	movs	r2, r3
 80006ea:	2380      	movs	r3, #128	; 0x80
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	4814      	ldr	r0, [pc, #80]	; (8000740 <writeBinaryRepresention+0xfc>)
 80006f0:	0019      	movs	r1, r3
 80006f2:	f000 fd60 	bl	80011b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LS_BINARY_4_Pin, getInvertedBit(lsNumber, 2));
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <writeBinaryRepresention+0xf8>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	2102      	movs	r1, #2
 80006fc:	0018      	movs	r0, r3
 80006fe:	f7ff ff89 	bl	8000614 <getInvertedBit>
 8000702:	0003      	movs	r3, r0
 8000704:	001a      	movs	r2, r3
 8000706:	2380      	movs	r3, #128	; 0x80
 8000708:	00db      	lsls	r3, r3, #3
 800070a:	480d      	ldr	r0, [pc, #52]	; (8000740 <writeBinaryRepresention+0xfc>)
 800070c:	0019      	movs	r1, r3
 800070e:	f000 fd52 	bl	80011b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LS_BINARY_8_Pin, getInvertedBit(lsNumber, 3));
 8000712:	4b0a      	ldr	r3, [pc, #40]	; (800073c <writeBinaryRepresention+0xf8>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2103      	movs	r1, #3
 8000718:	0018      	movs	r0, r3
 800071a:	f7ff ff7b 	bl	8000614 <getInvertedBit>
 800071e:	0003      	movs	r3, r0
 8000720:	001a      	movs	r2, r3
 8000722:	2380      	movs	r3, #128	; 0x80
 8000724:	0059      	lsls	r1, r3, #1
 8000726:	23a0      	movs	r3, #160	; 0xa0
 8000728:	05db      	lsls	r3, r3, #23
 800072a:	0018      	movs	r0, r3
 800072c:	f000 fd43 	bl	80011b6 <HAL_GPIO_WritePin>
}
 8000730:	46c0      	nop			; (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	2000007a 	.word	0x2000007a
 800073c:	20000079 	.word	0x20000079
 8000740:	50000400 	.word	0x50000400

08000744 <pollAndProcessButtons>:

void pollAndProcessButtons() {
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < ButtonCount; i++)
 800074a:	1dfb      	adds	r3, r7, #7
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]
 8000750:	e00f      	b.n	8000772 <pollAndProcessButtons+0x2e>
		updateButton(&buttons[i]);
 8000752:	1dfb      	adds	r3, r7, #7
 8000754:	781a      	ldrb	r2, [r3, #0]
 8000756:	0013      	movs	r3, r2
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	189b      	adds	r3, r3, r2
 800075c:	009b      	lsls	r3, r3, #2
 800075e:	4a22      	ldr	r2, [pc, #136]	; (80007e8 <pollAndProcessButtons+0xa4>)
 8000760:	189b      	adds	r3, r3, r2
 8000762:	0018      	movs	r0, r3
 8000764:	f7ff feb6 	bl	80004d4 <updateButton>
	for (uint8_t i = 0; i < ButtonCount; i++)
 8000768:	1dfb      	adds	r3, r7, #7
 800076a:	781a      	ldrb	r2, [r3, #0]
 800076c:	1dfb      	adds	r3, r7, #7
 800076e:	3201      	adds	r2, #1
 8000770:	701a      	strb	r2, [r3, #0]
 8000772:	1dfb      	adds	r3, r7, #7
 8000774:	781a      	ldrb	r2, [r3, #0]
 8000776:	4b1d      	ldr	r3, [pc, #116]	; (80007ec <pollAndProcessButtons+0xa8>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	429a      	cmp	r2, r3
 800077c:	d3e9      	bcc.n	8000752 <pollAndProcessButtons+0xe>

	uint8_t updateBinaryRepresentation = 0;
 800077e:	1dbb      	adds	r3, r7, #6
 8000780:	2200      	movs	r2, #0
 8000782:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i < ButtonCount; i++) {
 8000784:	1d7b      	adds	r3, r7, #5
 8000786:	2200      	movs	r2, #0
 8000788:	701a      	strb	r2, [r3, #0]
 800078a:	e01c      	b.n	80007c6 <pollAndProcessButtons+0x82>
		Button *button = &buttons[i];
 800078c:	1d7b      	adds	r3, r7, #5
 800078e:	781a      	ldrb	r2, [r3, #0]
 8000790:	0013      	movs	r3, r2
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	189b      	adds	r3, r3, r2
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	4a13      	ldr	r2, [pc, #76]	; (80007e8 <pollAndProcessButtons+0xa4>)
 800079a:	189b      	adds	r3, r3, r2
 800079c:	603b      	str	r3, [r7, #0]
		if(button->needToProcces) {
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	7a1b      	ldrb	r3, [r3, #8]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d00a      	beq.n	80007bc <pollAndProcessButtons+0x78>
			proccesButton(button->pin);
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	0018      	movs	r0, r3
 80007ac:	f7ff feee 	bl	800058c <proccesButton>
			button->needToProcces = 0;
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	2200      	movs	r2, #0
 80007b4:	721a      	strb	r2, [r3, #8]

			updateBinaryRepresentation = 1;
 80007b6:	1dbb      	adds	r3, r7, #6
 80007b8:	2201      	movs	r2, #1
 80007ba:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < ButtonCount; i++) {
 80007bc:	1d7b      	adds	r3, r7, #5
 80007be:	781a      	ldrb	r2, [r3, #0]
 80007c0:	1d7b      	adds	r3, r7, #5
 80007c2:	3201      	adds	r2, #1
 80007c4:	701a      	strb	r2, [r3, #0]
 80007c6:	1d7b      	adds	r3, r7, #5
 80007c8:	781a      	ldrb	r2, [r3, #0]
 80007ca:	4b08      	ldr	r3, [pc, #32]	; (80007ec <pollAndProcessButtons+0xa8>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	d3dc      	bcc.n	800078c <pollAndProcessButtons+0x48>
		}
	}

	if(updateBinaryRepresentation)
 80007d2:	1dbb      	adds	r3, r7, #6
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <pollAndProcessButtons+0x9a>
		writeBinaryRepresention();
 80007da:	f7ff ff33 	bl	8000644 <writeBinaryRepresention>
}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	46bd      	mov	sp, r7
 80007e2:	b002      	add	sp, #8
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	20000018 	.word	0x20000018
 80007ec:	20000048 	.word	0x20000048

080007f0 <getNumberFromInvertedBits>:

uint8_t getNumberFromInvertedBits(uint8_t bit0, uint8_t bit1, uint8_t bit2, uint8_t bit3) {
 80007f0:	b5b0      	push	{r4, r5, r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	0005      	movs	r5, r0
 80007f8:	000c      	movs	r4, r1
 80007fa:	0010      	movs	r0, r2
 80007fc:	0019      	movs	r1, r3
 80007fe:	1dfb      	adds	r3, r7, #7
 8000800:	1c2a      	adds	r2, r5, #0
 8000802:	701a      	strb	r2, [r3, #0]
 8000804:	1dbb      	adds	r3, r7, #6
 8000806:	1c22      	adds	r2, r4, #0
 8000808:	701a      	strb	r2, [r3, #0]
 800080a:	1d7b      	adds	r3, r7, #5
 800080c:	1c02      	adds	r2, r0, #0
 800080e:	701a      	strb	r2, [r3, #0]
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	1c0a      	adds	r2, r1, #0
 8000814:	701a      	strb	r2, [r3, #0]
	uint8_t res = 0;
 8000816:	200f      	movs	r0, #15
 8000818:	183b      	adds	r3, r7, r0
 800081a:	2200      	movs	r2, #0
 800081c:	701a      	strb	r2, [r3, #0]

	res|= bit0;
 800081e:	183b      	adds	r3, r7, r0
 8000820:	1839      	adds	r1, r7, r0
 8000822:	1dfa      	adds	r2, r7, #7
 8000824:	7809      	ldrb	r1, [r1, #0]
 8000826:	7812      	ldrb	r2, [r2, #0]
 8000828:	430a      	orrs	r2, r1
 800082a:	701a      	strb	r2, [r3, #0]
	res|= bit1 << 1;
 800082c:	1dbb      	adds	r3, r7, #6
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	b25a      	sxtb	r2, r3
 8000834:	0001      	movs	r1, r0
 8000836:	187b      	adds	r3, r7, r1
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	b25b      	sxtb	r3, r3
 800083c:	4313      	orrs	r3, r2
 800083e:	b25a      	sxtb	r2, r3
 8000840:	187b      	adds	r3, r7, r1
 8000842:	701a      	strb	r2, [r3, #0]
	res|= bit2 << 2;
 8000844:	1d7b      	adds	r3, r7, #5
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	b25a      	sxtb	r2, r3
 800084c:	187b      	adds	r3, r7, r1
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	b25b      	sxtb	r3, r3
 8000852:	4313      	orrs	r3, r2
 8000854:	b25a      	sxtb	r2, r3
 8000856:	187b      	adds	r3, r7, r1
 8000858:	701a      	strb	r2, [r3, #0]
	res|= bit3 << 3;
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	00db      	lsls	r3, r3, #3
 8000860:	b25a      	sxtb	r2, r3
 8000862:	187b      	adds	r3, r7, r1
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	b25b      	sxtb	r3, r3
 8000868:	4313      	orrs	r3, r2
 800086a:	b25a      	sxtb	r2, r3
 800086c:	187b      	adds	r3, r7, r1
 800086e:	701a      	strb	r2, [r3, #0]

	return ~res & 0xF;
 8000870:	187b      	adds	r3, r7, r1
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	43db      	mvns	r3, r3
 8000876:	b2db      	uxtb	r3, r3
 8000878:	220f      	movs	r2, #15
 800087a:	4013      	ands	r3, r2
 800087c:	b2db      	uxtb	r3, r3
}
 800087e:	0018      	movs	r0, r3
 8000880:	46bd      	mov	sp, r7
 8000882:	b004      	add	sp, #16
 8000884:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000888 <readBinaryRepresention>:

void readBinaryRepresention() {
 8000888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800088a:	af00      	add	r7, sp, #0
	msNumber = getNumberFromInvertedBits(
		HAL_GPIO_ReadPin(GPIOA, MS_BINARY_1_Pin),
 800088c:	2380      	movs	r3, #128	; 0x80
 800088e:	021a      	lsls	r2, r3, #8
 8000890:	23a0      	movs	r3, #160	; 0xa0
 8000892:	05db      	lsls	r3, r3, #23
 8000894:	0011      	movs	r1, r2
 8000896:	0018      	movs	r0, r3
 8000898:	f000 fc70 	bl	800117c <HAL_GPIO_ReadPin>
 800089c:	0003      	movs	r3, r0
 800089e:	001c      	movs	r4, r3
		HAL_GPIO_ReadPin(GPIOA, MS_BINARY_2_Pin),
 80008a0:	2380      	movs	r3, #128	; 0x80
 80008a2:	011a      	lsls	r2, r3, #4
 80008a4:	23a0      	movs	r3, #160	; 0xa0
 80008a6:	05db      	lsls	r3, r3, #23
 80008a8:	0011      	movs	r1, r2
 80008aa:	0018      	movs	r0, r3
 80008ac:	f000 fc66 	bl	800117c <HAL_GPIO_ReadPin>
 80008b0:	0003      	movs	r3, r0
 80008b2:	001d      	movs	r5, r3
		HAL_GPIO_ReadPin(GPIOA, MS_BINARY_4_Pin),
 80008b4:	23a0      	movs	r3, #160	; 0xa0
 80008b6:	05db      	lsls	r3, r3, #23
 80008b8:	2120      	movs	r1, #32
 80008ba:	0018      	movs	r0, r3
 80008bc:	f000 fc5e 	bl	800117c <HAL_GPIO_ReadPin>
 80008c0:	0003      	movs	r3, r0
 80008c2:	001e      	movs	r6, r3
		HAL_GPIO_ReadPin(GPIOA, MS_BINARY_8_Pin)
 80008c4:	2380      	movs	r3, #128	; 0x80
 80008c6:	015a      	lsls	r2, r3, #5
 80008c8:	23a0      	movs	r3, #160	; 0xa0
 80008ca:	05db      	lsls	r3, r3, #23
 80008cc:	0011      	movs	r1, r2
 80008ce:	0018      	movs	r0, r3
 80008d0:	f000 fc54 	bl	800117c <HAL_GPIO_ReadPin>
 80008d4:	0003      	movs	r3, r0
	msNumber = getNumberFromInvertedBits(
 80008d6:	0032      	movs	r2, r6
 80008d8:	0029      	movs	r1, r5
 80008da:	0020      	movs	r0, r4
 80008dc:	f7ff ff88 	bl	80007f0 <getNumberFromInvertedBits>
 80008e0:	0003      	movs	r3, r0
 80008e2:	001a      	movs	r2, r3
 80008e4:	4b18      	ldr	r3, [pc, #96]	; (8000948 <readBinaryRepresention+0xc0>)
 80008e6:	701a      	strb	r2, [r3, #0]
	);
	lsNumber = getNumberFromInvertedBits(
		HAL_GPIO_ReadPin(GPIOA, LS_BINARY_1_Pin),
 80008e8:	23a0      	movs	r3, #160	; 0xa0
 80008ea:	05db      	lsls	r3, r3, #23
 80008ec:	2110      	movs	r1, #16
 80008ee:	0018      	movs	r0, r3
 80008f0:	f000 fc44 	bl	800117c <HAL_GPIO_ReadPin>
 80008f4:	0003      	movs	r3, r0
 80008f6:	001c      	movs	r4, r3
		HAL_GPIO_ReadPin(GPIOB, LS_BINARY_2_Pin),
 80008f8:	2380      	movs	r3, #128	; 0x80
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	4a13      	ldr	r2, [pc, #76]	; (800094c <readBinaryRepresention+0xc4>)
 80008fe:	0019      	movs	r1, r3
 8000900:	0010      	movs	r0, r2
 8000902:	f000 fc3b 	bl	800117c <HAL_GPIO_ReadPin>
 8000906:	0003      	movs	r3, r0
 8000908:	001d      	movs	r5, r3
		HAL_GPIO_ReadPin(GPIOB, LS_BINARY_4_Pin),
 800090a:	2380      	movs	r3, #128	; 0x80
 800090c:	00db      	lsls	r3, r3, #3
 800090e:	4a0f      	ldr	r2, [pc, #60]	; (800094c <readBinaryRepresention+0xc4>)
 8000910:	0019      	movs	r1, r3
 8000912:	0010      	movs	r0, r2
 8000914:	f000 fc32 	bl	800117c <HAL_GPIO_ReadPin>
 8000918:	0003      	movs	r3, r0
 800091a:	001e      	movs	r6, r3
		HAL_GPIO_ReadPin(GPIOA, LS_BINARY_8_Pin)
 800091c:	2380      	movs	r3, #128	; 0x80
 800091e:	005a      	lsls	r2, r3, #1
 8000920:	23a0      	movs	r3, #160	; 0xa0
 8000922:	05db      	lsls	r3, r3, #23
 8000924:	0011      	movs	r1, r2
 8000926:	0018      	movs	r0, r3
 8000928:	f000 fc28 	bl	800117c <HAL_GPIO_ReadPin>
 800092c:	0003      	movs	r3, r0
	lsNumber = getNumberFromInvertedBits(
 800092e:	0032      	movs	r2, r6
 8000930:	0029      	movs	r1, r5
 8000932:	0020      	movs	r0, r4
 8000934:	f7ff ff5c 	bl	80007f0 <getNumberFromInvertedBits>
 8000938:	0003      	movs	r3, r0
 800093a:	001a      	movs	r2, r3
 800093c:	4b04      	ldr	r3, [pc, #16]	; (8000950 <readBinaryRepresention+0xc8>)
 800093e:	701a      	strb	r2, [r3, #0]
	);
}
 8000940:	46c0      	nop			; (mov r8, r8)
 8000942:	46bd      	mov	sp, r7
 8000944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	2000007a 	.word	0x2000007a
 800094c:	50000400 	.word	0x50000400
 8000950:	20000079 	.word	0x20000079

08000954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000958:	f000 f948 	bl	8000bec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095c:	f000 f830 	bl	80009c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000960:	f7ff fc5a 	bl	8000218 <MX_GPIO_Init>
  MX_TIM14_Init();
 8000964:	f000 f8ca 	bl	8000afc <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  boardMode = HAL_GPIO_ReadPin(GPIOB, BOARD_MODE_Pin);
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <main+0x60>)
 800096a:	2140      	movs	r1, #64	; 0x40
 800096c:	0018      	movs	r0, r3
 800096e:	f000 fc05 	bl	800117c <HAL_GPIO_ReadPin>
 8000972:	0003      	movs	r3, r0
 8000974:	001a      	movs	r2, r3
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <main+0x64>)
 8000978:	701a      	strb	r2, [r3, #0]

  if(boardMode == HEX_TO_BIN_MODE)
 800097a:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <main+0x64>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d102      	bne.n	8000988 <main+0x34>
	  MX_GPIO_RenitInHexToBinMode();
 8000982:	f7ff fcdf 	bl	8000344 <MX_GPIO_RenitInHexToBinMode>
 8000986:	e001      	b.n	800098c <main+0x38>
  else
	  MX_GPIO_ReinitInBinToHexMode();
 8000988:	f7ff fc92 	bl	80002b0 <MX_GPIO_ReinitInBinToHexMode>

  if(boardMode == HEX_TO_BIN_MODE)
 800098c:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <main+0x64>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d101      	bne.n	8000998 <main+0x44>
	  writeBinaryRepresention();
 8000994:	f7ff fe56 	bl	8000644 <writeBinaryRepresention>

  HAL_TIM_Base_Start_IT(&htim14);
 8000998:	4b08      	ldr	r3, [pc, #32]	; (80009bc <main+0x68>)
 800099a:	0018      	movs	r0, r3
 800099c:	f001 f95a 	bl	8001c54 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(boardMode == HEX_TO_BIN_MODE)
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <main+0x64>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d102      	bne.n	80009ae <main+0x5a>
		  pollAndProcessButtons();
 80009a8:	f7ff fecc 	bl	8000744 <pollAndProcessButtons>
 80009ac:	e7f8      	b.n	80009a0 <main+0x4c>
	  else
	  	  readBinaryRepresention();
 80009ae:	f7ff ff6b 	bl	8000888 <readBinaryRepresention>
	  if(boardMode == HEX_TO_BIN_MODE)
 80009b2:	e7f5      	b.n	80009a0 <main+0x4c>
 80009b4:	50000400 	.word	0x50000400
 80009b8:	20000078 	.word	0x20000078
 80009bc:	2000007c 	.word	0x2000007c

080009c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c0:	b590      	push	{r4, r7, lr}
 80009c2:	b093      	sub	sp, #76	; 0x4c
 80009c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c6:	2414      	movs	r4, #20
 80009c8:	193b      	adds	r3, r7, r4
 80009ca:	0018      	movs	r0, r3
 80009cc:	2334      	movs	r3, #52	; 0x34
 80009ce:	001a      	movs	r2, r3
 80009d0:	2100      	movs	r1, #0
 80009d2:	f001 fb8f 	bl	80020f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	0018      	movs	r0, r3
 80009da:	2310      	movs	r3, #16
 80009dc:	001a      	movs	r2, r3
 80009de:	2100      	movs	r1, #0
 80009e0:	f001 fb88 	bl	80020f4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009e4:	2380      	movs	r3, #128	; 0x80
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	0018      	movs	r0, r3
 80009ea:	f000 fc01 	bl	80011f0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009ee:	193b      	adds	r3, r7, r4
 80009f0:	2202      	movs	r2, #2
 80009f2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009f4:	193b      	adds	r3, r7, r4
 80009f6:	2280      	movs	r2, #128	; 0x80
 80009f8:	0052      	lsls	r2, r2, #1
 80009fa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80009fc:	193b      	adds	r3, r7, r4
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a02:	193b      	adds	r3, r7, r4
 8000a04:	2240      	movs	r2, #64	; 0x40
 8000a06:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a08:	193b      	adds	r3, r7, r4
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0e:	193b      	adds	r3, r7, r4
 8000a10:	0018      	movs	r0, r3
 8000a12:	f000 fc2d 	bl	8001270 <HAL_RCC_OscConfig>
 8000a16:	1e03      	subs	r3, r0, #0
 8000a18:	d001      	beq.n	8000a1e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000a1a:	f000 f819 	bl	8000a50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	2207      	movs	r2, #7
 8000a22:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	2200      	movs	r2, #0
 8000a28:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2100      	movs	r1, #0
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f000 ff28 	bl	8001890 <HAL_RCC_ClockConfig>
 8000a40:	1e03      	subs	r3, r0, #0
 8000a42:	d001      	beq.n	8000a48 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000a44:	f000 f804 	bl	8000a50 <Error_Handler>
  }
}
 8000a48:	46c0      	nop			; (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	b013      	add	sp, #76	; 0x4c
 8000a4e:	bd90      	pop	{r4, r7, pc}

08000a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a54:	b672      	cpsid	i
}
 8000a56:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <Error_Handler+0x8>
	...

08000a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a62:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a66:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a68:	2101      	movs	r1, #1
 8000a6a:	430a      	orrs	r2, r1
 8000a6c:	641a      	str	r2, [r3, #64]	; 0x40
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a72:	2201      	movs	r2, #1
 8000a74:	4013      	ands	r3, r2
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a7e:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a80:	2180      	movs	r1, #128	; 0x80
 8000a82:	0549      	lsls	r1, r1, #21
 8000a84:	430a      	orrs	r2, r1
 8000a86:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a88:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <HAL_MspInit+0x44>)
 8000a8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a8c:	2380      	movs	r3, #128	; 0x80
 8000a8e:	055b      	lsls	r3, r3, #21
 8000a90:	4013      	ands	r3, r2
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	b002      	add	sp, #8
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	40021000 	.word	0x40021000

08000aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <NMI_Handler+0x4>

08000aaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aae:	e7fe      	b.n	8000aae <HardFault_Handler+0x4>

08000ab0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ab4:	46c0      	nop			; (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac8:	f000 f8fa 	bl	8000cc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000acc:	46c0      	nop			; (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */
  updateDisplay();
 8000ad8:	f7ff fc88 	bl	80003ec <updateDisplay>
  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000adc:	4b03      	ldr	r3, [pc, #12]	; (8000aec <TIM14_IRQHandler+0x18>)
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f001 f906 	bl	8001cf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000ae4:	46c0      	nop			; (mov r8, r8)
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	2000007c 	.word	0x2000007c

08000af0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af4:	46c0      	nop			; (mov r8, r8)
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
	...

08000afc <MX_TIM14_Init>:

TIM_HandleTypeDef htim14;

/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000b00:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <MX_TIM14_Init+0x40>)
 8000b02:	4a0f      	ldr	r2, [pc, #60]	; (8000b40 <MX_TIM14_Init+0x44>)
 8000b04:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000b06:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <MX_TIM14_Init+0x40>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0c:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <MX_TIM14_Init+0x40>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000b12:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <MX_TIM14_Init+0x40>)
 8000b14:	4a0b      	ldr	r2, [pc, #44]	; (8000b44 <MX_TIM14_Init+0x48>)
 8000b16:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <MX_TIM14_Init+0x40>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b1e:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <MX_TIM14_Init+0x40>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000b24:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <MX_TIM14_Init+0x40>)
 8000b26:	0018      	movs	r0, r3
 8000b28:	f001 f83c 	bl	8001ba4 <HAL_TIM_Base_Init>
 8000b2c:	1e03      	subs	r3, r0, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000b30:	f7ff ff8e 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000b34:	46c0      	nop			; (mov r8, r8)
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	2000007c 	.word	0x2000007c
 8000b40:	40002000 	.word	0x40002000
 8000b44:	0000ffff 	.word	0x0000ffff

08000b48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_TIM_Base_MspInit+0x48>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d115      	bne.n	8000b86 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <HAL_TIM_Base_MspInit+0x4c>)
 8000b5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b5e:	4b0d      	ldr	r3, [pc, #52]	; (8000b94 <HAL_TIM_Base_MspInit+0x4c>)
 8000b60:	2180      	movs	r1, #128	; 0x80
 8000b62:	0209      	lsls	r1, r1, #8
 8000b64:	430a      	orrs	r2, r1
 8000b66:	641a      	str	r2, [r3, #64]	; 0x40
 8000b68:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <HAL_TIM_Base_MspInit+0x4c>)
 8000b6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b6c:	2380      	movs	r3, #128	; 0x80
 8000b6e:	021b      	lsls	r3, r3, #8
 8000b70:	4013      	ands	r3, r2
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]

    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2100      	movs	r1, #0
 8000b7a:	2013      	movs	r0, #19
 8000b7c:	f000 f968 	bl	8000e50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000b80:	2013      	movs	r0, #19
 8000b82:	f000 f97a 	bl	8000e7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	b004      	add	sp, #16
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	40002000 	.word	0x40002000
 8000b94:	40021000 	.word	0x40021000

08000b98 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b98:	480d      	ldr	r0, [pc, #52]	; (8000bd0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b9a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b9c:	f7ff ffa8 	bl	8000af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba0:	480c      	ldr	r0, [pc, #48]	; (8000bd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ba2:	490d      	ldr	r1, [pc, #52]	; (8000bd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ba4:	4a0d      	ldr	r2, [pc, #52]	; (8000bdc <LoopForever+0xe>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba8:	e002      	b.n	8000bb0 <LoopCopyDataInit>

08000baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bae:	3304      	adds	r3, #4

08000bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb4:	d3f9      	bcc.n	8000baa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bb8:	4c0a      	ldr	r4, [pc, #40]	; (8000be4 <LoopForever+0x16>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bbc:	e001      	b.n	8000bc2 <LoopFillZerobss>

08000bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc0:	3204      	adds	r2, #4

08000bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc4:	d3fb      	bcc.n	8000bbe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bc6:	f001 fa71 	bl	80020ac <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000bca:	f7ff fec3 	bl	8000954 <main>

08000bce <LoopForever>:

LoopForever:
  b LoopForever
 8000bce:	e7fe      	b.n	8000bce <LoopForever>
  ldr   r0, =_estack
 8000bd0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000bdc:	08002164 	.word	0x08002164
  ldr r2, =_sbss
 8000be0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000be4:	200000cc 	.word	0x200000cc

08000be8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000be8:	e7fe      	b.n	8000be8 <ADC1_IRQHandler>
	...

08000bec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bf2:	1dfb      	adds	r3, r7, #7
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <HAL_Init+0x3c>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <HAL_Init+0x3c>)
 8000bfe:	2180      	movs	r1, #128	; 0x80
 8000c00:	0049      	lsls	r1, r1, #1
 8000c02:	430a      	orrs	r2, r1
 8000c04:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c06:	2003      	movs	r0, #3
 8000c08:	f000 f810 	bl	8000c2c <HAL_InitTick>
 8000c0c:	1e03      	subs	r3, r0, #0
 8000c0e:	d003      	beq.n	8000c18 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000c10:	1dfb      	adds	r3, r7, #7
 8000c12:	2201      	movs	r2, #1
 8000c14:	701a      	strb	r2, [r3, #0]
 8000c16:	e001      	b.n	8000c1c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000c18:	f7ff ff20 	bl	8000a5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c1c:	1dfb      	adds	r3, r7, #7
 8000c1e:	781b      	ldrb	r3, [r3, #0]
}
 8000c20:	0018      	movs	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	b002      	add	sp, #8
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40022000 	.word	0x40022000

08000c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c2c:	b590      	push	{r4, r7, lr}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c34:	230f      	movs	r3, #15
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	2200      	movs	r2, #0
 8000c3a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000c3c:	4b1d      	ldr	r3, [pc, #116]	; (8000cb4 <HAL_InitTick+0x88>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d02b      	beq.n	8000c9c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000c44:	4b1c      	ldr	r3, [pc, #112]	; (8000cb8 <HAL_InitTick+0x8c>)
 8000c46:	681c      	ldr	r4, [r3, #0]
 8000c48:	4b1a      	ldr	r3, [pc, #104]	; (8000cb4 <HAL_InitTick+0x88>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	0019      	movs	r1, r3
 8000c4e:	23fa      	movs	r3, #250	; 0xfa
 8000c50:	0098      	lsls	r0, r3, #2
 8000c52:	f7ff fa55 	bl	8000100 <__udivsi3>
 8000c56:	0003      	movs	r3, r0
 8000c58:	0019      	movs	r1, r3
 8000c5a:	0020      	movs	r0, r4
 8000c5c:	f7ff fa50 	bl	8000100 <__udivsi3>
 8000c60:	0003      	movs	r3, r0
 8000c62:	0018      	movs	r0, r3
 8000c64:	f000 f919 	bl	8000e9a <HAL_SYSTICK_Config>
 8000c68:	1e03      	subs	r3, r0, #0
 8000c6a:	d112      	bne.n	8000c92 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2b03      	cmp	r3, #3
 8000c70:	d80a      	bhi.n	8000c88 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	2301      	movs	r3, #1
 8000c76:	425b      	negs	r3, r3
 8000c78:	2200      	movs	r2, #0
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f000 f8e8 	bl	8000e50 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c80:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HAL_InitTick+0x90>)
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	e00d      	b.n	8000ca4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c88:	230f      	movs	r3, #15
 8000c8a:	18fb      	adds	r3, r7, r3
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	701a      	strb	r2, [r3, #0]
 8000c90:	e008      	b.n	8000ca4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c92:	230f      	movs	r3, #15
 8000c94:	18fb      	adds	r3, r7, r3
 8000c96:	2201      	movs	r2, #1
 8000c98:	701a      	strb	r2, [r3, #0]
 8000c9a:	e003      	b.n	8000ca4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c9c:	230f      	movs	r3, #15
 8000c9e:	18fb      	adds	r3, r7, r3
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000ca4:	230f      	movs	r3, #15
 8000ca6:	18fb      	adds	r3, r7, r3
 8000ca8:	781b      	ldrb	r3, [r3, #0]
}
 8000caa:	0018      	movs	r0, r3
 8000cac:	46bd      	mov	sp, r7
 8000cae:	b005      	add	sp, #20
 8000cb0:	bd90      	pop	{r4, r7, pc}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	20000058 	.word	0x20000058
 8000cb8:	20000050 	.word	0x20000050
 8000cbc:	20000054 	.word	0x20000054

08000cc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cc4:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <HAL_IncTick+0x1c>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	001a      	movs	r2, r3
 8000cca:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <HAL_IncTick+0x20>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	18d2      	adds	r2, r2, r3
 8000cd0:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <HAL_IncTick+0x20>)
 8000cd2:	601a      	str	r2, [r3, #0]
}
 8000cd4:	46c0      	nop			; (mov r8, r8)
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	20000058 	.word	0x20000058
 8000ce0:	200000c8 	.word	0x200000c8

08000ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce8:	4b02      	ldr	r3, [pc, #8]	; (8000cf4 <HAL_GetTick+0x10>)
 8000cea:	681b      	ldr	r3, [r3, #0]
}
 8000cec:	0018      	movs	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	200000c8 	.word	0x200000c8

08000cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	0002      	movs	r2, r0
 8000d00:	1dfb      	adds	r3, r7, #7
 8000d02:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d04:	1dfb      	adds	r3, r7, #7
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b7f      	cmp	r3, #127	; 0x7f
 8000d0a:	d809      	bhi.n	8000d20 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d0c:	1dfb      	adds	r3, r7, #7
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	001a      	movs	r2, r3
 8000d12:	231f      	movs	r3, #31
 8000d14:	401a      	ands	r2, r3
 8000d16:	4b04      	ldr	r3, [pc, #16]	; (8000d28 <__NVIC_EnableIRQ+0x30>)
 8000d18:	2101      	movs	r1, #1
 8000d1a:	4091      	lsls	r1, r2
 8000d1c:	000a      	movs	r2, r1
 8000d1e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000d20:	46c0      	nop			; (mov r8, r8)
 8000d22:	46bd      	mov	sp, r7
 8000d24:	b002      	add	sp, #8
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	e000e100 	.word	0xe000e100

08000d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d2c:	b590      	push	{r4, r7, lr}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	0002      	movs	r2, r0
 8000d34:	6039      	str	r1, [r7, #0]
 8000d36:	1dfb      	adds	r3, r7, #7
 8000d38:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d3a:	1dfb      	adds	r3, r7, #7
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	2b7f      	cmp	r3, #127	; 0x7f
 8000d40:	d828      	bhi.n	8000d94 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d42:	4a2f      	ldr	r2, [pc, #188]	; (8000e00 <__NVIC_SetPriority+0xd4>)
 8000d44:	1dfb      	adds	r3, r7, #7
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	b25b      	sxtb	r3, r3
 8000d4a:	089b      	lsrs	r3, r3, #2
 8000d4c:	33c0      	adds	r3, #192	; 0xc0
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	589b      	ldr	r3, [r3, r2]
 8000d52:	1dfa      	adds	r2, r7, #7
 8000d54:	7812      	ldrb	r2, [r2, #0]
 8000d56:	0011      	movs	r1, r2
 8000d58:	2203      	movs	r2, #3
 8000d5a:	400a      	ands	r2, r1
 8000d5c:	00d2      	lsls	r2, r2, #3
 8000d5e:	21ff      	movs	r1, #255	; 0xff
 8000d60:	4091      	lsls	r1, r2
 8000d62:	000a      	movs	r2, r1
 8000d64:	43d2      	mvns	r2, r2
 8000d66:	401a      	ands	r2, r3
 8000d68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	019b      	lsls	r3, r3, #6
 8000d6e:	22ff      	movs	r2, #255	; 0xff
 8000d70:	401a      	ands	r2, r3
 8000d72:	1dfb      	adds	r3, r7, #7
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	0018      	movs	r0, r3
 8000d78:	2303      	movs	r3, #3
 8000d7a:	4003      	ands	r3, r0
 8000d7c:	00db      	lsls	r3, r3, #3
 8000d7e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d80:	481f      	ldr	r0, [pc, #124]	; (8000e00 <__NVIC_SetPriority+0xd4>)
 8000d82:	1dfb      	adds	r3, r7, #7
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	b25b      	sxtb	r3, r3
 8000d88:	089b      	lsrs	r3, r3, #2
 8000d8a:	430a      	orrs	r2, r1
 8000d8c:	33c0      	adds	r3, #192	; 0xc0
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d92:	e031      	b.n	8000df8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d94:	4a1b      	ldr	r2, [pc, #108]	; (8000e04 <__NVIC_SetPriority+0xd8>)
 8000d96:	1dfb      	adds	r3, r7, #7
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	0019      	movs	r1, r3
 8000d9c:	230f      	movs	r3, #15
 8000d9e:	400b      	ands	r3, r1
 8000da0:	3b08      	subs	r3, #8
 8000da2:	089b      	lsrs	r3, r3, #2
 8000da4:	3306      	adds	r3, #6
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	18d3      	adds	r3, r2, r3
 8000daa:	3304      	adds	r3, #4
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	1dfa      	adds	r2, r7, #7
 8000db0:	7812      	ldrb	r2, [r2, #0]
 8000db2:	0011      	movs	r1, r2
 8000db4:	2203      	movs	r2, #3
 8000db6:	400a      	ands	r2, r1
 8000db8:	00d2      	lsls	r2, r2, #3
 8000dba:	21ff      	movs	r1, #255	; 0xff
 8000dbc:	4091      	lsls	r1, r2
 8000dbe:	000a      	movs	r2, r1
 8000dc0:	43d2      	mvns	r2, r2
 8000dc2:	401a      	ands	r2, r3
 8000dc4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	019b      	lsls	r3, r3, #6
 8000dca:	22ff      	movs	r2, #255	; 0xff
 8000dcc:	401a      	ands	r2, r3
 8000dce:	1dfb      	adds	r3, r7, #7
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	4003      	ands	r3, r0
 8000dd8:	00db      	lsls	r3, r3, #3
 8000dda:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ddc:	4809      	ldr	r0, [pc, #36]	; (8000e04 <__NVIC_SetPriority+0xd8>)
 8000dde:	1dfb      	adds	r3, r7, #7
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	001c      	movs	r4, r3
 8000de4:	230f      	movs	r3, #15
 8000de6:	4023      	ands	r3, r4
 8000de8:	3b08      	subs	r3, #8
 8000dea:	089b      	lsrs	r3, r3, #2
 8000dec:	430a      	orrs	r2, r1
 8000dee:	3306      	adds	r3, #6
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	18c3      	adds	r3, r0, r3
 8000df4:	3304      	adds	r3, #4
 8000df6:	601a      	str	r2, [r3, #0]
}
 8000df8:	46c0      	nop			; (mov r8, r8)
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	b003      	add	sp, #12
 8000dfe:	bd90      	pop	{r4, r7, pc}
 8000e00:	e000e100 	.word	0xe000e100
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	1e5a      	subs	r2, r3, #1
 8000e14:	2380      	movs	r3, #128	; 0x80
 8000e16:	045b      	lsls	r3, r3, #17
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d301      	bcc.n	8000e20 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	e010      	b.n	8000e42 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e20:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <SysTick_Config+0x44>)
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	3a01      	subs	r2, #1
 8000e26:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e28:	2301      	movs	r3, #1
 8000e2a:	425b      	negs	r3, r3
 8000e2c:	2103      	movs	r1, #3
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f7ff ff7c 	bl	8000d2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e34:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <SysTick_Config+0x44>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e3a:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <SysTick_Config+0x44>)
 8000e3c:	2207      	movs	r2, #7
 8000e3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	0018      	movs	r0, r3
 8000e44:	46bd      	mov	sp, r7
 8000e46:	b002      	add	sp, #8
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	46c0      	nop			; (mov r8, r8)
 8000e4c:	e000e010 	.word	0xe000e010

08000e50 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60b9      	str	r1, [r7, #8]
 8000e58:	607a      	str	r2, [r7, #4]
 8000e5a:	210f      	movs	r1, #15
 8000e5c:	187b      	adds	r3, r7, r1
 8000e5e:	1c02      	adds	r2, r0, #0
 8000e60:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	187b      	adds	r3, r7, r1
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	b25b      	sxtb	r3, r3
 8000e6a:	0011      	movs	r1, r2
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f7ff ff5d 	bl	8000d2c <__NVIC_SetPriority>
}
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	46bd      	mov	sp, r7
 8000e76:	b004      	add	sp, #16
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	0002      	movs	r2, r0
 8000e82:	1dfb      	adds	r3, r7, #7
 8000e84:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e86:	1dfb      	adds	r3, r7, #7
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	b25b      	sxtb	r3, r3
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	f7ff ff33 	bl	8000cf8 <__NVIC_EnableIRQ>
}
 8000e92:	46c0      	nop			; (mov r8, r8)
 8000e94:	46bd      	mov	sp, r7
 8000e96:	b002      	add	sp, #8
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f7ff ffaf 	bl	8000e08 <SysTick_Config>
 8000eaa:	0003      	movs	r3, r0
}
 8000eac:	0018      	movs	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b002      	add	sp, #8
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ec2:	e147      	b.n	8001154 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2101      	movs	r1, #1
 8000eca:	697a      	ldr	r2, [r7, #20]
 8000ecc:	4091      	lsls	r1, r2
 8000ece:	000a      	movs	r2, r1
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d100      	bne.n	8000edc <HAL_GPIO_Init+0x28>
 8000eda:	e138      	b.n	800114e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d005      	beq.n	8000ef4 <HAL_GPIO_Init+0x40>
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	2203      	movs	r2, #3
 8000eee:	4013      	ands	r3, r2
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d130      	bne.n	8000f56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	2203      	movs	r2, #3
 8000f00:	409a      	lsls	r2, r3
 8000f02:	0013      	movs	r3, r2
 8000f04:	43da      	mvns	r2, r3
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	68da      	ldr	r2, [r3, #12]
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	409a      	lsls	r2, r3
 8000f16:	0013      	movs	r3, r2
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	409a      	lsls	r2, r3
 8000f30:	0013      	movs	r3, r2
 8000f32:	43da      	mvns	r2, r3
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	4013      	ands	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	091b      	lsrs	r3, r3, #4
 8000f40:	2201      	movs	r2, #1
 8000f42:	401a      	ands	r2, r3
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	409a      	lsls	r2, r3
 8000f48:	0013      	movs	r3, r2
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	2203      	movs	r2, #3
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d017      	beq.n	8000f92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	409a      	lsls	r2, r3
 8000f70:	0013      	movs	r3, r2
 8000f72:	43da      	mvns	r2, r3
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	4013      	ands	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	689a      	ldr	r2, [r3, #8]
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	409a      	lsls	r2, r3
 8000f84:	0013      	movs	r3, r2
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	2203      	movs	r2, #3
 8000f98:	4013      	ands	r3, r2
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d123      	bne.n	8000fe6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	08da      	lsrs	r2, r3, #3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	3208      	adds	r2, #8
 8000fa6:	0092      	lsls	r2, r2, #2
 8000fa8:	58d3      	ldr	r3, [r2, r3]
 8000faa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	2207      	movs	r2, #7
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	220f      	movs	r2, #15
 8000fb6:	409a      	lsls	r2, r3
 8000fb8:	0013      	movs	r3, r2
 8000fba:	43da      	mvns	r2, r3
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	691a      	ldr	r2, [r3, #16]
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	2107      	movs	r1, #7
 8000fca:	400b      	ands	r3, r1
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	409a      	lsls	r2, r3
 8000fd0:	0013      	movs	r3, r2
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	08da      	lsrs	r2, r3, #3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3208      	adds	r2, #8
 8000fe0:	0092      	lsls	r2, r2, #2
 8000fe2:	6939      	ldr	r1, [r7, #16]
 8000fe4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	2203      	movs	r2, #3
 8000ff2:	409a      	lsls	r2, r3
 8000ff4:	0013      	movs	r3, r2
 8000ff6:	43da      	mvns	r2, r3
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	2203      	movs	r2, #3
 8001004:	401a      	ands	r2, r3
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	409a      	lsls	r2, r3
 800100c:	0013      	movs	r3, r2
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4313      	orrs	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	23c0      	movs	r3, #192	; 0xc0
 8001020:	029b      	lsls	r3, r3, #10
 8001022:	4013      	ands	r3, r2
 8001024:	d100      	bne.n	8001028 <HAL_GPIO_Init+0x174>
 8001026:	e092      	b.n	800114e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001028:	4a50      	ldr	r2, [pc, #320]	; (800116c <HAL_GPIO_Init+0x2b8>)
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	089b      	lsrs	r3, r3, #2
 800102e:	3318      	adds	r3, #24
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	589b      	ldr	r3, [r3, r2]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	2203      	movs	r2, #3
 800103a:	4013      	ands	r3, r2
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	220f      	movs	r2, #15
 8001040:	409a      	lsls	r2, r3
 8001042:	0013      	movs	r3, r2
 8001044:	43da      	mvns	r2, r3
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	23a0      	movs	r3, #160	; 0xa0
 8001050:	05db      	lsls	r3, r3, #23
 8001052:	429a      	cmp	r2, r3
 8001054:	d013      	beq.n	800107e <HAL_GPIO_Init+0x1ca>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a45      	ldr	r2, [pc, #276]	; (8001170 <HAL_GPIO_Init+0x2bc>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d00d      	beq.n	800107a <HAL_GPIO_Init+0x1c6>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a44      	ldr	r2, [pc, #272]	; (8001174 <HAL_GPIO_Init+0x2c0>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d007      	beq.n	8001076 <HAL_GPIO_Init+0x1c2>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a43      	ldr	r2, [pc, #268]	; (8001178 <HAL_GPIO_Init+0x2c4>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d101      	bne.n	8001072 <HAL_GPIO_Init+0x1be>
 800106e:	2303      	movs	r3, #3
 8001070:	e006      	b.n	8001080 <HAL_GPIO_Init+0x1cc>
 8001072:	2305      	movs	r3, #5
 8001074:	e004      	b.n	8001080 <HAL_GPIO_Init+0x1cc>
 8001076:	2302      	movs	r3, #2
 8001078:	e002      	b.n	8001080 <HAL_GPIO_Init+0x1cc>
 800107a:	2301      	movs	r3, #1
 800107c:	e000      	b.n	8001080 <HAL_GPIO_Init+0x1cc>
 800107e:	2300      	movs	r3, #0
 8001080:	697a      	ldr	r2, [r7, #20]
 8001082:	2103      	movs	r1, #3
 8001084:	400a      	ands	r2, r1
 8001086:	00d2      	lsls	r2, r2, #3
 8001088:	4093      	lsls	r3, r2
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001090:	4936      	ldr	r1, [pc, #216]	; (800116c <HAL_GPIO_Init+0x2b8>)
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	089b      	lsrs	r3, r3, #2
 8001096:	3318      	adds	r3, #24
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800109e:	4b33      	ldr	r3, [pc, #204]	; (800116c <HAL_GPIO_Init+0x2b8>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	43da      	mvns	r2, r3
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	4013      	ands	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685a      	ldr	r2, [r3, #4]
 80010b2:	2380      	movs	r3, #128	; 0x80
 80010b4:	035b      	lsls	r3, r3, #13
 80010b6:	4013      	ands	r3, r2
 80010b8:	d003      	beq.n	80010c2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	4313      	orrs	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010c2:	4b2a      	ldr	r3, [pc, #168]	; (800116c <HAL_GPIO_Init+0x2b8>)
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80010c8:	4b28      	ldr	r3, [pc, #160]	; (800116c <HAL_GPIO_Init+0x2b8>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	43da      	mvns	r2, r3
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	4013      	ands	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685a      	ldr	r2, [r3, #4]
 80010dc:	2380      	movs	r3, #128	; 0x80
 80010de:	039b      	lsls	r3, r3, #14
 80010e0:	4013      	ands	r3, r2
 80010e2:	d003      	beq.n	80010ec <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010ec:	4b1f      	ldr	r3, [pc, #124]	; (800116c <HAL_GPIO_Init+0x2b8>)
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010f2:	4a1e      	ldr	r2, [pc, #120]	; (800116c <HAL_GPIO_Init+0x2b8>)
 80010f4:	2384      	movs	r3, #132	; 0x84
 80010f6:	58d3      	ldr	r3, [r2, r3]
 80010f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	43da      	mvns	r2, r3
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	4013      	ands	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685a      	ldr	r2, [r3, #4]
 8001108:	2380      	movs	r3, #128	; 0x80
 800110a:	029b      	lsls	r3, r3, #10
 800110c:	4013      	ands	r3, r2
 800110e:	d003      	beq.n	8001118 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	4313      	orrs	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001118:	4914      	ldr	r1, [pc, #80]	; (800116c <HAL_GPIO_Init+0x2b8>)
 800111a:	2284      	movs	r2, #132	; 0x84
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001120:	4a12      	ldr	r2, [pc, #72]	; (800116c <HAL_GPIO_Init+0x2b8>)
 8001122:	2380      	movs	r3, #128	; 0x80
 8001124:	58d3      	ldr	r3, [r2, r3]
 8001126:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	43da      	mvns	r2, r3
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	4013      	ands	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685a      	ldr	r2, [r3, #4]
 8001136:	2380      	movs	r3, #128	; 0x80
 8001138:	025b      	lsls	r3, r3, #9
 800113a:	4013      	ands	r3, r2
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4313      	orrs	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001146:	4909      	ldr	r1, [pc, #36]	; (800116c <HAL_GPIO_Init+0x2b8>)
 8001148:	2280      	movs	r2, #128	; 0x80
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	3301      	adds	r3, #1
 8001152:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	40da      	lsrs	r2, r3
 800115c:	1e13      	subs	r3, r2, #0
 800115e:	d000      	beq.n	8001162 <HAL_GPIO_Init+0x2ae>
 8001160:	e6b0      	b.n	8000ec4 <HAL_GPIO_Init+0x10>
  }
}
 8001162:	46c0      	nop			; (mov r8, r8)
 8001164:	46c0      	nop			; (mov r8, r8)
 8001166:	46bd      	mov	sp, r7
 8001168:	b006      	add	sp, #24
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40021800 	.word	0x40021800
 8001170:	50000400 	.word	0x50000400
 8001174:	50000800 	.word	0x50000800
 8001178:	50000c00 	.word	0x50000c00

0800117c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	000a      	movs	r2, r1
 8001186:	1cbb      	adds	r3, r7, #2
 8001188:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	1cba      	adds	r2, r7, #2
 8001190:	8812      	ldrh	r2, [r2, #0]
 8001192:	4013      	ands	r3, r2
 8001194:	d004      	beq.n	80011a0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001196:	230f      	movs	r3, #15
 8001198:	18fb      	adds	r3, r7, r3
 800119a:	2201      	movs	r2, #1
 800119c:	701a      	strb	r2, [r3, #0]
 800119e:	e003      	b.n	80011a8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011a0:	230f      	movs	r3, #15
 80011a2:	18fb      	adds	r3, r7, r3
 80011a4:	2200      	movs	r2, #0
 80011a6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80011a8:	230f      	movs	r3, #15
 80011aa:	18fb      	adds	r3, r7, r3
 80011ac:	781b      	ldrb	r3, [r3, #0]
}
 80011ae:	0018      	movs	r0, r3
 80011b0:	46bd      	mov	sp, r7
 80011b2:	b004      	add	sp, #16
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
 80011be:	0008      	movs	r0, r1
 80011c0:	0011      	movs	r1, r2
 80011c2:	1cbb      	adds	r3, r7, #2
 80011c4:	1c02      	adds	r2, r0, #0
 80011c6:	801a      	strh	r2, [r3, #0]
 80011c8:	1c7b      	adds	r3, r7, #1
 80011ca:	1c0a      	adds	r2, r1, #0
 80011cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011ce:	1c7b      	adds	r3, r7, #1
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d004      	beq.n	80011e0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011d6:	1cbb      	adds	r3, r7, #2
 80011d8:	881a      	ldrh	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011de:	e003      	b.n	80011e8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011e0:	1cbb      	adds	r3, r7, #2
 80011e2:	881a      	ldrh	r2, [r3, #0]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011e8:	46c0      	nop			; (mov r8, r8)
 80011ea:	46bd      	mov	sp, r7
 80011ec:	b002      	add	sp, #8
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80011f8:	4b19      	ldr	r3, [pc, #100]	; (8001260 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a19      	ldr	r2, [pc, #100]	; (8001264 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80011fe:	4013      	ands	r3, r2
 8001200:	0019      	movs	r1, r3
 8001202:	4b17      	ldr	r3, [pc, #92]	; (8001260 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	430a      	orrs	r2, r1
 8001208:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	2380      	movs	r3, #128	; 0x80
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	429a      	cmp	r2, r3
 8001212:	d11f      	bne.n	8001254 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001214:	4b14      	ldr	r3, [pc, #80]	; (8001268 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	0013      	movs	r3, r2
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	189b      	adds	r3, r3, r2
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	4912      	ldr	r1, [pc, #72]	; (800126c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001222:	0018      	movs	r0, r3
 8001224:	f7fe ff6c 	bl	8000100 <__udivsi3>
 8001228:	0003      	movs	r3, r0
 800122a:	3301      	adds	r3, #1
 800122c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800122e:	e008      	b.n	8001242 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	3b01      	subs	r3, #1
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	e001      	b.n	8001242 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e009      	b.n	8001256 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001242:	4b07      	ldr	r3, [pc, #28]	; (8001260 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001244:	695a      	ldr	r2, [r3, #20]
 8001246:	2380      	movs	r3, #128	; 0x80
 8001248:	00db      	lsls	r3, r3, #3
 800124a:	401a      	ands	r2, r3
 800124c:	2380      	movs	r3, #128	; 0x80
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	429a      	cmp	r2, r3
 8001252:	d0ed      	beq.n	8001230 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	0018      	movs	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	b004      	add	sp, #16
 800125c:	bd80      	pop	{r7, pc}
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	40007000 	.word	0x40007000
 8001264:	fffff9ff 	.word	0xfffff9ff
 8001268:	20000050 	.word	0x20000050
 800126c:	000f4240 	.word	0x000f4240

08001270 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e2f3      	b.n	800186a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2201      	movs	r2, #1
 8001288:	4013      	ands	r3, r2
 800128a:	d100      	bne.n	800128e <HAL_RCC_OscConfig+0x1e>
 800128c:	e07c      	b.n	8001388 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800128e:	4bc3      	ldr	r3, [pc, #780]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	2238      	movs	r2, #56	; 0x38
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001298:	4bc0      	ldr	r3, [pc, #768]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	2203      	movs	r2, #3
 800129e:	4013      	ands	r3, r2
 80012a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	2b10      	cmp	r3, #16
 80012a6:	d102      	bne.n	80012ae <HAL_RCC_OscConfig+0x3e>
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	2b03      	cmp	r3, #3
 80012ac:	d002      	beq.n	80012b4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	2b08      	cmp	r3, #8
 80012b2:	d10b      	bne.n	80012cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b4:	4bb9      	ldr	r3, [pc, #740]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	2380      	movs	r3, #128	; 0x80
 80012ba:	029b      	lsls	r3, r3, #10
 80012bc:	4013      	ands	r3, r2
 80012be:	d062      	beq.n	8001386 <HAL_RCC_OscConfig+0x116>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d15e      	bne.n	8001386 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e2ce      	b.n	800186a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	2380      	movs	r3, #128	; 0x80
 80012d2:	025b      	lsls	r3, r3, #9
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d107      	bne.n	80012e8 <HAL_RCC_OscConfig+0x78>
 80012d8:	4bb0      	ldr	r3, [pc, #704]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4baf      	ldr	r3, [pc, #700]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 80012de:	2180      	movs	r1, #128	; 0x80
 80012e0:	0249      	lsls	r1, r1, #9
 80012e2:	430a      	orrs	r2, r1
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	e020      	b.n	800132a <HAL_RCC_OscConfig+0xba>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685a      	ldr	r2, [r3, #4]
 80012ec:	23a0      	movs	r3, #160	; 0xa0
 80012ee:	02db      	lsls	r3, r3, #11
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d10e      	bne.n	8001312 <HAL_RCC_OscConfig+0xa2>
 80012f4:	4ba9      	ldr	r3, [pc, #676]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4ba8      	ldr	r3, [pc, #672]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 80012fa:	2180      	movs	r1, #128	; 0x80
 80012fc:	02c9      	lsls	r1, r1, #11
 80012fe:	430a      	orrs	r2, r1
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	4ba6      	ldr	r3, [pc, #664]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	4ba5      	ldr	r3, [pc, #660]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 8001308:	2180      	movs	r1, #128	; 0x80
 800130a:	0249      	lsls	r1, r1, #9
 800130c:	430a      	orrs	r2, r1
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	e00b      	b.n	800132a <HAL_RCC_OscConfig+0xba>
 8001312:	4ba2      	ldr	r3, [pc, #648]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	4ba1      	ldr	r3, [pc, #644]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 8001318:	49a1      	ldr	r1, [pc, #644]	; (80015a0 <HAL_RCC_OscConfig+0x330>)
 800131a:	400a      	ands	r2, r1
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	4b9f      	ldr	r3, [pc, #636]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	4b9e      	ldr	r3, [pc, #632]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 8001324:	499f      	ldr	r1, [pc, #636]	; (80015a4 <HAL_RCC_OscConfig+0x334>)
 8001326:	400a      	ands	r2, r1
 8001328:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d014      	beq.n	800135c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001332:	f7ff fcd7 	bl	8000ce4 <HAL_GetTick>
 8001336:	0003      	movs	r3, r0
 8001338:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800133a:	e008      	b.n	800134e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800133c:	f7ff fcd2 	bl	8000ce4 <HAL_GetTick>
 8001340:	0002      	movs	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b64      	cmp	r3, #100	; 0x64
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e28d      	b.n	800186a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800134e:	4b93      	ldr	r3, [pc, #588]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	2380      	movs	r3, #128	; 0x80
 8001354:	029b      	lsls	r3, r3, #10
 8001356:	4013      	ands	r3, r2
 8001358:	d0f0      	beq.n	800133c <HAL_RCC_OscConfig+0xcc>
 800135a:	e015      	b.n	8001388 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800135c:	f7ff fcc2 	bl	8000ce4 <HAL_GetTick>
 8001360:	0003      	movs	r3, r0
 8001362:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001364:	e008      	b.n	8001378 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001366:	f7ff fcbd 	bl	8000ce4 <HAL_GetTick>
 800136a:	0002      	movs	r2, r0
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b64      	cmp	r3, #100	; 0x64
 8001372:	d901      	bls.n	8001378 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e278      	b.n	800186a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001378:	4b88      	ldr	r3, [pc, #544]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	2380      	movs	r3, #128	; 0x80
 800137e:	029b      	lsls	r3, r3, #10
 8001380:	4013      	ands	r3, r2
 8001382:	d1f0      	bne.n	8001366 <HAL_RCC_OscConfig+0xf6>
 8001384:	e000      	b.n	8001388 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001386:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2202      	movs	r2, #2
 800138e:	4013      	ands	r3, r2
 8001390:	d100      	bne.n	8001394 <HAL_RCC_OscConfig+0x124>
 8001392:	e099      	b.n	80014c8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001394:	4b81      	ldr	r3, [pc, #516]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	2238      	movs	r2, #56	; 0x38
 800139a:	4013      	ands	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800139e:	4b7f      	ldr	r3, [pc, #508]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	2203      	movs	r2, #3
 80013a4:	4013      	ands	r3, r2
 80013a6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	2b10      	cmp	r3, #16
 80013ac:	d102      	bne.n	80013b4 <HAL_RCC_OscConfig+0x144>
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d002      	beq.n	80013ba <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d135      	bne.n	8001426 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013ba:	4b78      	ldr	r3, [pc, #480]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	2380      	movs	r3, #128	; 0x80
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	4013      	ands	r3, r2
 80013c4:	d005      	beq.n	80013d2 <HAL_RCC_OscConfig+0x162>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e24b      	b.n	800186a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d2:	4b72      	ldr	r3, [pc, #456]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	4a74      	ldr	r2, [pc, #464]	; (80015a8 <HAL_RCC_OscConfig+0x338>)
 80013d8:	4013      	ands	r3, r2
 80013da:	0019      	movs	r1, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	695b      	ldr	r3, [r3, #20]
 80013e0:	021a      	lsls	r2, r3, #8
 80013e2:	4b6e      	ldr	r3, [pc, #440]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 80013e4:	430a      	orrs	r2, r1
 80013e6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d112      	bne.n	8001414 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80013ee:	4b6b      	ldr	r3, [pc, #428]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a6e      	ldr	r2, [pc, #440]	; (80015ac <HAL_RCC_OscConfig+0x33c>)
 80013f4:	4013      	ands	r3, r2
 80013f6:	0019      	movs	r1, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	691a      	ldr	r2, [r3, #16]
 80013fc:	4b67      	ldr	r3, [pc, #412]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 80013fe:	430a      	orrs	r2, r1
 8001400:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001402:	4b66      	ldr	r3, [pc, #408]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	0adb      	lsrs	r3, r3, #11
 8001408:	2207      	movs	r2, #7
 800140a:	4013      	ands	r3, r2
 800140c:	4a68      	ldr	r2, [pc, #416]	; (80015b0 <HAL_RCC_OscConfig+0x340>)
 800140e:	40da      	lsrs	r2, r3
 8001410:	4b68      	ldr	r3, [pc, #416]	; (80015b4 <HAL_RCC_OscConfig+0x344>)
 8001412:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001414:	4b68      	ldr	r3, [pc, #416]	; (80015b8 <HAL_RCC_OscConfig+0x348>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	0018      	movs	r0, r3
 800141a:	f7ff fc07 	bl	8000c2c <HAL_InitTick>
 800141e:	1e03      	subs	r3, r0, #0
 8001420:	d051      	beq.n	80014c6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e221      	b.n	800186a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d030      	beq.n	8001490 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800142e:	4b5b      	ldr	r3, [pc, #364]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a5e      	ldr	r2, [pc, #376]	; (80015ac <HAL_RCC_OscConfig+0x33c>)
 8001434:	4013      	ands	r3, r2
 8001436:	0019      	movs	r1, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	691a      	ldr	r2, [r3, #16]
 800143c:	4b57      	ldr	r3, [pc, #348]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 800143e:	430a      	orrs	r2, r1
 8001440:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001442:	4b56      	ldr	r3, [pc, #344]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	4b55      	ldr	r3, [pc, #340]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 8001448:	2180      	movs	r1, #128	; 0x80
 800144a:	0049      	lsls	r1, r1, #1
 800144c:	430a      	orrs	r2, r1
 800144e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001450:	f7ff fc48 	bl	8000ce4 <HAL_GetTick>
 8001454:	0003      	movs	r3, r0
 8001456:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001458:	e008      	b.n	800146c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800145a:	f7ff fc43 	bl	8000ce4 <HAL_GetTick>
 800145e:	0002      	movs	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e1fe      	b.n	800186a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800146c:	4b4b      	ldr	r3, [pc, #300]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	2380      	movs	r3, #128	; 0x80
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	4013      	ands	r3, r2
 8001476:	d0f0      	beq.n	800145a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001478:	4b48      	ldr	r3, [pc, #288]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	4a4a      	ldr	r2, [pc, #296]	; (80015a8 <HAL_RCC_OscConfig+0x338>)
 800147e:	4013      	ands	r3, r2
 8001480:	0019      	movs	r1, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	021a      	lsls	r2, r3, #8
 8001488:	4b44      	ldr	r3, [pc, #272]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 800148a:	430a      	orrs	r2, r1
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	e01b      	b.n	80014c8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001490:	4b42      	ldr	r3, [pc, #264]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4b41      	ldr	r3, [pc, #260]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 8001496:	4949      	ldr	r1, [pc, #292]	; (80015bc <HAL_RCC_OscConfig+0x34c>)
 8001498:	400a      	ands	r2, r1
 800149a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800149c:	f7ff fc22 	bl	8000ce4 <HAL_GetTick>
 80014a0:	0003      	movs	r3, r0
 80014a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014a6:	f7ff fc1d 	bl	8000ce4 <HAL_GetTick>
 80014aa:	0002      	movs	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e1d8      	b.n	800186a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014b8:	4b38      	ldr	r3, [pc, #224]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	2380      	movs	r3, #128	; 0x80
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	4013      	ands	r3, r2
 80014c2:	d1f0      	bne.n	80014a6 <HAL_RCC_OscConfig+0x236>
 80014c4:	e000      	b.n	80014c8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014c6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2208      	movs	r2, #8
 80014ce:	4013      	ands	r3, r2
 80014d0:	d047      	beq.n	8001562 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80014d2:	4b32      	ldr	r3, [pc, #200]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	2238      	movs	r2, #56	; 0x38
 80014d8:	4013      	ands	r3, r2
 80014da:	2b18      	cmp	r3, #24
 80014dc:	d10a      	bne.n	80014f4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80014de:	4b2f      	ldr	r3, [pc, #188]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 80014e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e2:	2202      	movs	r2, #2
 80014e4:	4013      	ands	r3, r2
 80014e6:	d03c      	beq.n	8001562 <HAL_RCC_OscConfig+0x2f2>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d138      	bne.n	8001562 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e1ba      	b.n	800186a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d019      	beq.n	8001530 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80014fc:	4b27      	ldr	r3, [pc, #156]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 80014fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001500:	4b26      	ldr	r3, [pc, #152]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 8001502:	2101      	movs	r1, #1
 8001504:	430a      	orrs	r2, r1
 8001506:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001508:	f7ff fbec 	bl	8000ce4 <HAL_GetTick>
 800150c:	0003      	movs	r3, r0
 800150e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001510:	e008      	b.n	8001524 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001512:	f7ff fbe7 	bl	8000ce4 <HAL_GetTick>
 8001516:	0002      	movs	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e1a2      	b.n	800186a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001524:	4b1d      	ldr	r3, [pc, #116]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 8001526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001528:	2202      	movs	r2, #2
 800152a:	4013      	ands	r3, r2
 800152c:	d0f1      	beq.n	8001512 <HAL_RCC_OscConfig+0x2a2>
 800152e:	e018      	b.n	8001562 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001530:	4b1a      	ldr	r3, [pc, #104]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 8001532:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001534:	4b19      	ldr	r3, [pc, #100]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 8001536:	2101      	movs	r1, #1
 8001538:	438a      	bics	r2, r1
 800153a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153c:	f7ff fbd2 	bl	8000ce4 <HAL_GetTick>
 8001540:	0003      	movs	r3, r0
 8001542:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001544:	e008      	b.n	8001558 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001546:	f7ff fbcd 	bl	8000ce4 <HAL_GetTick>
 800154a:	0002      	movs	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e188      	b.n	800186a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001558:	4b10      	ldr	r3, [pc, #64]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 800155a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800155c:	2202      	movs	r2, #2
 800155e:	4013      	ands	r3, r2
 8001560:	d1f1      	bne.n	8001546 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2204      	movs	r2, #4
 8001568:	4013      	ands	r3, r2
 800156a:	d100      	bne.n	800156e <HAL_RCC_OscConfig+0x2fe>
 800156c:	e0c6      	b.n	80016fc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800156e:	231f      	movs	r3, #31
 8001570:	18fb      	adds	r3, r7, r3
 8001572:	2200      	movs	r2, #0
 8001574:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001576:	4b09      	ldr	r3, [pc, #36]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	2238      	movs	r2, #56	; 0x38
 800157c:	4013      	ands	r3, r2
 800157e:	2b20      	cmp	r3, #32
 8001580:	d11e      	bne.n	80015c0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001582:	4b06      	ldr	r3, [pc, #24]	; (800159c <HAL_RCC_OscConfig+0x32c>)
 8001584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001586:	2202      	movs	r2, #2
 8001588:	4013      	ands	r3, r2
 800158a:	d100      	bne.n	800158e <HAL_RCC_OscConfig+0x31e>
 800158c:	e0b6      	b.n	80016fc <HAL_RCC_OscConfig+0x48c>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d000      	beq.n	8001598 <HAL_RCC_OscConfig+0x328>
 8001596:	e0b1      	b.n	80016fc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e166      	b.n	800186a <HAL_RCC_OscConfig+0x5fa>
 800159c:	40021000 	.word	0x40021000
 80015a0:	fffeffff 	.word	0xfffeffff
 80015a4:	fffbffff 	.word	0xfffbffff
 80015a8:	ffff80ff 	.word	0xffff80ff
 80015ac:	ffffc7ff 	.word	0xffffc7ff
 80015b0:	00f42400 	.word	0x00f42400
 80015b4:	20000050 	.word	0x20000050
 80015b8:	20000054 	.word	0x20000054
 80015bc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80015c0:	4bac      	ldr	r3, [pc, #688]	; (8001874 <HAL_RCC_OscConfig+0x604>)
 80015c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015c4:	2380      	movs	r3, #128	; 0x80
 80015c6:	055b      	lsls	r3, r3, #21
 80015c8:	4013      	ands	r3, r2
 80015ca:	d101      	bne.n	80015d0 <HAL_RCC_OscConfig+0x360>
 80015cc:	2301      	movs	r3, #1
 80015ce:	e000      	b.n	80015d2 <HAL_RCC_OscConfig+0x362>
 80015d0:	2300      	movs	r3, #0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d011      	beq.n	80015fa <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80015d6:	4ba7      	ldr	r3, [pc, #668]	; (8001874 <HAL_RCC_OscConfig+0x604>)
 80015d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015da:	4ba6      	ldr	r3, [pc, #664]	; (8001874 <HAL_RCC_OscConfig+0x604>)
 80015dc:	2180      	movs	r1, #128	; 0x80
 80015de:	0549      	lsls	r1, r1, #21
 80015e0:	430a      	orrs	r2, r1
 80015e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80015e4:	4ba3      	ldr	r3, [pc, #652]	; (8001874 <HAL_RCC_OscConfig+0x604>)
 80015e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015e8:	2380      	movs	r3, #128	; 0x80
 80015ea:	055b      	lsls	r3, r3, #21
 80015ec:	4013      	ands	r3, r2
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80015f2:	231f      	movs	r3, #31
 80015f4:	18fb      	adds	r3, r7, r3
 80015f6:	2201      	movs	r2, #1
 80015f8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015fa:	4b9f      	ldr	r3, [pc, #636]	; (8001878 <HAL_RCC_OscConfig+0x608>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	2380      	movs	r3, #128	; 0x80
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	4013      	ands	r3, r2
 8001604:	d11a      	bne.n	800163c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001606:	4b9c      	ldr	r3, [pc, #624]	; (8001878 <HAL_RCC_OscConfig+0x608>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	4b9b      	ldr	r3, [pc, #620]	; (8001878 <HAL_RCC_OscConfig+0x608>)
 800160c:	2180      	movs	r1, #128	; 0x80
 800160e:	0049      	lsls	r1, r1, #1
 8001610:	430a      	orrs	r2, r1
 8001612:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001614:	f7ff fb66 	bl	8000ce4 <HAL_GetTick>
 8001618:	0003      	movs	r3, r0
 800161a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800161e:	f7ff fb61 	bl	8000ce4 <HAL_GetTick>
 8001622:	0002      	movs	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e11c      	b.n	800186a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001630:	4b91      	ldr	r3, [pc, #580]	; (8001878 <HAL_RCC_OscConfig+0x608>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	2380      	movs	r3, #128	; 0x80
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	4013      	ands	r3, r2
 800163a:	d0f0      	beq.n	800161e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d106      	bne.n	8001652 <HAL_RCC_OscConfig+0x3e2>
 8001644:	4b8b      	ldr	r3, [pc, #556]	; (8001874 <HAL_RCC_OscConfig+0x604>)
 8001646:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001648:	4b8a      	ldr	r3, [pc, #552]	; (8001874 <HAL_RCC_OscConfig+0x604>)
 800164a:	2101      	movs	r1, #1
 800164c:	430a      	orrs	r2, r1
 800164e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001650:	e01c      	b.n	800168c <HAL_RCC_OscConfig+0x41c>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	2b05      	cmp	r3, #5
 8001658:	d10c      	bne.n	8001674 <HAL_RCC_OscConfig+0x404>
 800165a:	4b86      	ldr	r3, [pc, #536]	; (8001874 <HAL_RCC_OscConfig+0x604>)
 800165c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800165e:	4b85      	ldr	r3, [pc, #532]	; (8001874 <HAL_RCC_OscConfig+0x604>)
 8001660:	2104      	movs	r1, #4
 8001662:	430a      	orrs	r2, r1
 8001664:	65da      	str	r2, [r3, #92]	; 0x5c
 8001666:	4b83      	ldr	r3, [pc, #524]	; (8001874 <HAL_RCC_OscConfig+0x604>)
 8001668:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800166a:	4b82      	ldr	r3, [pc, #520]	; (8001874 <HAL_RCC_OscConfig+0x604>)
 800166c:	2101      	movs	r1, #1
 800166e:	430a      	orrs	r2, r1
 8001670:	65da      	str	r2, [r3, #92]	; 0x5c
 8001672:	e00b      	b.n	800168c <HAL_RCC_OscConfig+0x41c>
 8001674:	4b7f      	ldr	r3, [pc, #508]	; (8001874 <HAL_RCC_OscConfig+0x604>)
 8001676:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001678:	4b7e      	ldr	r3, [pc, #504]	; (8001874 <HAL_RCC_OscConfig+0x604>)
 800167a:	2101      	movs	r1, #1
 800167c:	438a      	bics	r2, r1
 800167e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001680:	4b7c      	ldr	r3, [pc, #496]	; (8001874 <HAL_RCC_OscConfig+0x604>)
 8001682:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001684:	4b7b      	ldr	r3, [pc, #492]	; (8001874 <HAL_RCC_OscConfig+0x604>)
 8001686:	2104      	movs	r1, #4
 8001688:	438a      	bics	r2, r1
 800168a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d014      	beq.n	80016be <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001694:	f7ff fb26 	bl	8000ce4 <HAL_GetTick>
 8001698:	0003      	movs	r3, r0
 800169a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800169c:	e009      	b.n	80016b2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800169e:	f7ff fb21 	bl	8000ce4 <HAL_GetTick>
 80016a2:	0002      	movs	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	4a74      	ldr	r2, [pc, #464]	; (800187c <HAL_RCC_OscConfig+0x60c>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e0db      	b.n	800186a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016b2:	4b70      	ldr	r3, [pc, #448]	; (8001874 <HAL_RCC_OscConfig+0x604>)
 80016b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b6:	2202      	movs	r2, #2
 80016b8:	4013      	ands	r3, r2
 80016ba:	d0f0      	beq.n	800169e <HAL_RCC_OscConfig+0x42e>
 80016bc:	e013      	b.n	80016e6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016be:	f7ff fb11 	bl	8000ce4 <HAL_GetTick>
 80016c2:	0003      	movs	r3, r0
 80016c4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016c6:	e009      	b.n	80016dc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016c8:	f7ff fb0c 	bl	8000ce4 <HAL_GetTick>
 80016cc:	0002      	movs	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	4a6a      	ldr	r2, [pc, #424]	; (800187c <HAL_RCC_OscConfig+0x60c>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e0c6      	b.n	800186a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016dc:	4b65      	ldr	r3, [pc, #404]	; (8001874 <HAL_RCC_OscConfig+0x604>)
 80016de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e0:	2202      	movs	r2, #2
 80016e2:	4013      	ands	r3, r2
 80016e4:	d1f0      	bne.n	80016c8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80016e6:	231f      	movs	r3, #31
 80016e8:	18fb      	adds	r3, r7, r3
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d105      	bne.n	80016fc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80016f0:	4b60      	ldr	r3, [pc, #384]	; (8001874 <HAL_RCC_OscConfig+0x604>)
 80016f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016f4:	4b5f      	ldr	r3, [pc, #380]	; (8001874 <HAL_RCC_OscConfig+0x604>)
 80016f6:	4962      	ldr	r1, [pc, #392]	; (8001880 <HAL_RCC_OscConfig+0x610>)
 80016f8:	400a      	ands	r2, r1
 80016fa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	69db      	ldr	r3, [r3, #28]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d100      	bne.n	8001706 <HAL_RCC_OscConfig+0x496>
 8001704:	e0b0      	b.n	8001868 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001706:	4b5b      	ldr	r3, [pc, #364]	; (8001874 <HAL_RCC_OscConfig+0x604>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	2238      	movs	r2, #56	; 0x38
 800170c:	4013      	ands	r3, r2
 800170e:	2b10      	cmp	r3, #16
 8001710:	d100      	bne.n	8001714 <HAL_RCC_OscConfig+0x4a4>
 8001712:	e078      	b.n	8001806 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	69db      	ldr	r3, [r3, #28]
 8001718:	2b02      	cmp	r3, #2
 800171a:	d153      	bne.n	80017c4 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800171c:	4b55      	ldr	r3, [pc, #340]	; (8001874 <HAL_RCC_OscConfig+0x604>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4b54      	ldr	r3, [pc, #336]	; (8001874 <HAL_RCC_OscConfig+0x604>)
 8001722:	4958      	ldr	r1, [pc, #352]	; (8001884 <HAL_RCC_OscConfig+0x614>)
 8001724:	400a      	ands	r2, r1
 8001726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001728:	f7ff fadc 	bl	8000ce4 <HAL_GetTick>
 800172c:	0003      	movs	r3, r0
 800172e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001732:	f7ff fad7 	bl	8000ce4 <HAL_GetTick>
 8001736:	0002      	movs	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e092      	b.n	800186a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001744:	4b4b      	ldr	r3, [pc, #300]	; (8001874 <HAL_RCC_OscConfig+0x604>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	049b      	lsls	r3, r3, #18
 800174c:	4013      	ands	r3, r2
 800174e:	d1f0      	bne.n	8001732 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001750:	4b48      	ldr	r3, [pc, #288]	; (8001874 <HAL_RCC_OscConfig+0x604>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	4a4c      	ldr	r2, [pc, #304]	; (8001888 <HAL_RCC_OscConfig+0x618>)
 8001756:	4013      	ands	r3, r2
 8001758:	0019      	movs	r1, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a1a      	ldr	r2, [r3, #32]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001768:	021b      	lsls	r3, r3, #8
 800176a:	431a      	orrs	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001770:	431a      	orrs	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	431a      	orrs	r2, r3
 8001778:	4b3e      	ldr	r3, [pc, #248]	; (8001874 <HAL_RCC_OscConfig+0x604>)
 800177a:	430a      	orrs	r2, r1
 800177c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800177e:	4b3d      	ldr	r3, [pc, #244]	; (8001874 <HAL_RCC_OscConfig+0x604>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	4b3c      	ldr	r3, [pc, #240]	; (8001874 <HAL_RCC_OscConfig+0x604>)
 8001784:	2180      	movs	r1, #128	; 0x80
 8001786:	0449      	lsls	r1, r1, #17
 8001788:	430a      	orrs	r2, r1
 800178a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800178c:	4b39      	ldr	r3, [pc, #228]	; (8001874 <HAL_RCC_OscConfig+0x604>)
 800178e:	68da      	ldr	r2, [r3, #12]
 8001790:	4b38      	ldr	r3, [pc, #224]	; (8001874 <HAL_RCC_OscConfig+0x604>)
 8001792:	2180      	movs	r1, #128	; 0x80
 8001794:	0549      	lsls	r1, r1, #21
 8001796:	430a      	orrs	r2, r1
 8001798:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179a:	f7ff faa3 	bl	8000ce4 <HAL_GetTick>
 800179e:	0003      	movs	r3, r0
 80017a0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a4:	f7ff fa9e 	bl	8000ce4 <HAL_GetTick>
 80017a8:	0002      	movs	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e059      	b.n	800186a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017b6:	4b2f      	ldr	r3, [pc, #188]	; (8001874 <HAL_RCC_OscConfig+0x604>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	2380      	movs	r3, #128	; 0x80
 80017bc:	049b      	lsls	r3, r3, #18
 80017be:	4013      	ands	r3, r2
 80017c0:	d0f0      	beq.n	80017a4 <HAL_RCC_OscConfig+0x534>
 80017c2:	e051      	b.n	8001868 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c4:	4b2b      	ldr	r3, [pc, #172]	; (8001874 <HAL_RCC_OscConfig+0x604>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4b2a      	ldr	r3, [pc, #168]	; (8001874 <HAL_RCC_OscConfig+0x604>)
 80017ca:	492e      	ldr	r1, [pc, #184]	; (8001884 <HAL_RCC_OscConfig+0x614>)
 80017cc:	400a      	ands	r2, r1
 80017ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d0:	f7ff fa88 	bl	8000ce4 <HAL_GetTick>
 80017d4:	0003      	movs	r3, r0
 80017d6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017da:	f7ff fa83 	bl	8000ce4 <HAL_GetTick>
 80017de:	0002      	movs	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e03e      	b.n	800186a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017ec:	4b21      	ldr	r3, [pc, #132]	; (8001874 <HAL_RCC_OscConfig+0x604>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	2380      	movs	r3, #128	; 0x80
 80017f2:	049b      	lsls	r3, r3, #18
 80017f4:	4013      	ands	r3, r2
 80017f6:	d1f0      	bne.n	80017da <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80017f8:	4b1e      	ldr	r3, [pc, #120]	; (8001874 <HAL_RCC_OscConfig+0x604>)
 80017fa:	68da      	ldr	r2, [r3, #12]
 80017fc:	4b1d      	ldr	r3, [pc, #116]	; (8001874 <HAL_RCC_OscConfig+0x604>)
 80017fe:	4923      	ldr	r1, [pc, #140]	; (800188c <HAL_RCC_OscConfig+0x61c>)
 8001800:	400a      	ands	r2, r1
 8001802:	60da      	str	r2, [r3, #12]
 8001804:	e030      	b.n	8001868 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d101      	bne.n	8001812 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e02b      	b.n	800186a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001812:	4b18      	ldr	r3, [pc, #96]	; (8001874 <HAL_RCC_OscConfig+0x604>)
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	2203      	movs	r2, #3
 800181c:	401a      	ands	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a1b      	ldr	r3, [r3, #32]
 8001822:	429a      	cmp	r2, r3
 8001824:	d11e      	bne.n	8001864 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	2270      	movs	r2, #112	; 0x70
 800182a:	401a      	ands	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001830:	429a      	cmp	r2, r3
 8001832:	d117      	bne.n	8001864 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001834:	697a      	ldr	r2, [r7, #20]
 8001836:	23fe      	movs	r3, #254	; 0xfe
 8001838:	01db      	lsls	r3, r3, #7
 800183a:	401a      	ands	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001840:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001842:	429a      	cmp	r2, r3
 8001844:	d10e      	bne.n	8001864 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001846:	697a      	ldr	r2, [r7, #20]
 8001848:	23f8      	movs	r3, #248	; 0xf8
 800184a:	039b      	lsls	r3, r3, #14
 800184c:	401a      	ands	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001852:	429a      	cmp	r2, r3
 8001854:	d106      	bne.n	8001864 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	0f5b      	lsrs	r3, r3, #29
 800185a:	075a      	lsls	r2, r3, #29
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001860:	429a      	cmp	r2, r3
 8001862:	d001      	beq.n	8001868 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e000      	b.n	800186a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	0018      	movs	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	b008      	add	sp, #32
 8001870:	bd80      	pop	{r7, pc}
 8001872:	46c0      	nop			; (mov r8, r8)
 8001874:	40021000 	.word	0x40021000
 8001878:	40007000 	.word	0x40007000
 800187c:	00001388 	.word	0x00001388
 8001880:	efffffff 	.word	0xefffffff
 8001884:	feffffff 	.word	0xfeffffff
 8001888:	1fc1808c 	.word	0x1fc1808c
 800188c:	effefffc 	.word	0xeffefffc

08001890 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d101      	bne.n	80018a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e0e9      	b.n	8001a78 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018a4:	4b76      	ldr	r3, [pc, #472]	; (8001a80 <HAL_RCC_ClockConfig+0x1f0>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2207      	movs	r2, #7
 80018aa:	4013      	ands	r3, r2
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d91e      	bls.n	80018f0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b2:	4b73      	ldr	r3, [pc, #460]	; (8001a80 <HAL_RCC_ClockConfig+0x1f0>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2207      	movs	r2, #7
 80018b8:	4393      	bics	r3, r2
 80018ba:	0019      	movs	r1, r3
 80018bc:	4b70      	ldr	r3, [pc, #448]	; (8001a80 <HAL_RCC_ClockConfig+0x1f0>)
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	430a      	orrs	r2, r1
 80018c2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018c4:	f7ff fa0e 	bl	8000ce4 <HAL_GetTick>
 80018c8:	0003      	movs	r3, r0
 80018ca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018cc:	e009      	b.n	80018e2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ce:	f7ff fa09 	bl	8000ce4 <HAL_GetTick>
 80018d2:	0002      	movs	r2, r0
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	4a6a      	ldr	r2, [pc, #424]	; (8001a84 <HAL_RCC_ClockConfig+0x1f4>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e0ca      	b.n	8001a78 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018e2:	4b67      	ldr	r3, [pc, #412]	; (8001a80 <HAL_RCC_ClockConfig+0x1f0>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2207      	movs	r2, #7
 80018e8:	4013      	ands	r3, r2
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d1ee      	bne.n	80018ce <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2202      	movs	r2, #2
 80018f6:	4013      	ands	r3, r2
 80018f8:	d015      	beq.n	8001926 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2204      	movs	r2, #4
 8001900:	4013      	ands	r3, r2
 8001902:	d006      	beq.n	8001912 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001904:	4b60      	ldr	r3, [pc, #384]	; (8001a88 <HAL_RCC_ClockConfig+0x1f8>)
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	4b5f      	ldr	r3, [pc, #380]	; (8001a88 <HAL_RCC_ClockConfig+0x1f8>)
 800190a:	21e0      	movs	r1, #224	; 0xe0
 800190c:	01c9      	lsls	r1, r1, #7
 800190e:	430a      	orrs	r2, r1
 8001910:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001912:	4b5d      	ldr	r3, [pc, #372]	; (8001a88 <HAL_RCC_ClockConfig+0x1f8>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	4a5d      	ldr	r2, [pc, #372]	; (8001a8c <HAL_RCC_ClockConfig+0x1fc>)
 8001918:	4013      	ands	r3, r2
 800191a:	0019      	movs	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	4b59      	ldr	r3, [pc, #356]	; (8001a88 <HAL_RCC_ClockConfig+0x1f8>)
 8001922:	430a      	orrs	r2, r1
 8001924:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2201      	movs	r2, #1
 800192c:	4013      	ands	r3, r2
 800192e:	d057      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d107      	bne.n	8001948 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001938:	4b53      	ldr	r3, [pc, #332]	; (8001a88 <HAL_RCC_ClockConfig+0x1f8>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	2380      	movs	r3, #128	; 0x80
 800193e:	029b      	lsls	r3, r3, #10
 8001940:	4013      	ands	r3, r2
 8001942:	d12b      	bne.n	800199c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e097      	b.n	8001a78 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b02      	cmp	r3, #2
 800194e:	d107      	bne.n	8001960 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001950:	4b4d      	ldr	r3, [pc, #308]	; (8001a88 <HAL_RCC_ClockConfig+0x1f8>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	2380      	movs	r3, #128	; 0x80
 8001956:	049b      	lsls	r3, r3, #18
 8001958:	4013      	ands	r3, r2
 800195a:	d11f      	bne.n	800199c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e08b      	b.n	8001a78 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d107      	bne.n	8001978 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001968:	4b47      	ldr	r3, [pc, #284]	; (8001a88 <HAL_RCC_ClockConfig+0x1f8>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	2380      	movs	r3, #128	; 0x80
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	4013      	ands	r3, r2
 8001972:	d113      	bne.n	800199c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e07f      	b.n	8001a78 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	2b03      	cmp	r3, #3
 800197e:	d106      	bne.n	800198e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001980:	4b41      	ldr	r3, [pc, #260]	; (8001a88 <HAL_RCC_ClockConfig+0x1f8>)
 8001982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001984:	2202      	movs	r2, #2
 8001986:	4013      	ands	r3, r2
 8001988:	d108      	bne.n	800199c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e074      	b.n	8001a78 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800198e:	4b3e      	ldr	r3, [pc, #248]	; (8001a88 <HAL_RCC_ClockConfig+0x1f8>)
 8001990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001992:	2202      	movs	r2, #2
 8001994:	4013      	ands	r3, r2
 8001996:	d101      	bne.n	800199c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e06d      	b.n	8001a78 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800199c:	4b3a      	ldr	r3, [pc, #232]	; (8001a88 <HAL_RCC_ClockConfig+0x1f8>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	2207      	movs	r2, #7
 80019a2:	4393      	bics	r3, r2
 80019a4:	0019      	movs	r1, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	4b37      	ldr	r3, [pc, #220]	; (8001a88 <HAL_RCC_ClockConfig+0x1f8>)
 80019ac:	430a      	orrs	r2, r1
 80019ae:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019b0:	f7ff f998 	bl	8000ce4 <HAL_GetTick>
 80019b4:	0003      	movs	r3, r0
 80019b6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b8:	e009      	b.n	80019ce <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ba:	f7ff f993 	bl	8000ce4 <HAL_GetTick>
 80019be:	0002      	movs	r2, r0
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	4a2f      	ldr	r2, [pc, #188]	; (8001a84 <HAL_RCC_ClockConfig+0x1f4>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e054      	b.n	8001a78 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ce:	4b2e      	ldr	r3, [pc, #184]	; (8001a88 <HAL_RCC_ClockConfig+0x1f8>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	2238      	movs	r2, #56	; 0x38
 80019d4:	401a      	ands	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	429a      	cmp	r2, r3
 80019de:	d1ec      	bne.n	80019ba <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019e0:	4b27      	ldr	r3, [pc, #156]	; (8001a80 <HAL_RCC_ClockConfig+0x1f0>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2207      	movs	r2, #7
 80019e6:	4013      	ands	r3, r2
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d21e      	bcs.n	8001a2c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ee:	4b24      	ldr	r3, [pc, #144]	; (8001a80 <HAL_RCC_ClockConfig+0x1f0>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2207      	movs	r2, #7
 80019f4:	4393      	bics	r3, r2
 80019f6:	0019      	movs	r1, r3
 80019f8:	4b21      	ldr	r3, [pc, #132]	; (8001a80 <HAL_RCC_ClockConfig+0x1f0>)
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	430a      	orrs	r2, r1
 80019fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a00:	f7ff f970 	bl	8000ce4 <HAL_GetTick>
 8001a04:	0003      	movs	r3, r0
 8001a06:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a08:	e009      	b.n	8001a1e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a0a:	f7ff f96b 	bl	8000ce4 <HAL_GetTick>
 8001a0e:	0002      	movs	r2, r0
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	4a1b      	ldr	r2, [pc, #108]	; (8001a84 <HAL_RCC_ClockConfig+0x1f4>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e02c      	b.n	8001a78 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a1e:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <HAL_RCC_ClockConfig+0x1f0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2207      	movs	r2, #7
 8001a24:	4013      	ands	r3, r2
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d1ee      	bne.n	8001a0a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2204      	movs	r2, #4
 8001a32:	4013      	ands	r3, r2
 8001a34:	d009      	beq.n	8001a4a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a36:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <HAL_RCC_ClockConfig+0x1f8>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	4a15      	ldr	r2, [pc, #84]	; (8001a90 <HAL_RCC_ClockConfig+0x200>)
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	0019      	movs	r1, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68da      	ldr	r2, [r3, #12]
 8001a44:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <HAL_RCC_ClockConfig+0x1f8>)
 8001a46:	430a      	orrs	r2, r1
 8001a48:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001a4a:	f000 f829 	bl	8001aa0 <HAL_RCC_GetSysClockFreq>
 8001a4e:	0001      	movs	r1, r0
 8001a50:	4b0d      	ldr	r3, [pc, #52]	; (8001a88 <HAL_RCC_ClockConfig+0x1f8>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	0a1b      	lsrs	r3, r3, #8
 8001a56:	220f      	movs	r2, #15
 8001a58:	401a      	ands	r2, r3
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <HAL_RCC_ClockConfig+0x204>)
 8001a5c:	0092      	lsls	r2, r2, #2
 8001a5e:	58d3      	ldr	r3, [r2, r3]
 8001a60:	221f      	movs	r2, #31
 8001a62:	4013      	ands	r3, r2
 8001a64:	000a      	movs	r2, r1
 8001a66:	40da      	lsrs	r2, r3
 8001a68:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <HAL_RCC_ClockConfig+0x208>)
 8001a6a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <HAL_RCC_ClockConfig+0x20c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	0018      	movs	r0, r3
 8001a72:	f7ff f8db 	bl	8000c2c <HAL_InitTick>
 8001a76:	0003      	movs	r3, r0
}
 8001a78:	0018      	movs	r0, r3
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	b004      	add	sp, #16
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40022000 	.word	0x40022000
 8001a84:	00001388 	.word	0x00001388
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	fffff0ff 	.word	0xfffff0ff
 8001a90:	ffff8fff 	.word	0xffff8fff
 8001a94:	0800211c 	.word	0x0800211c
 8001a98:	20000050 	.word	0x20000050
 8001a9c:	20000054 	.word	0x20000054

08001aa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aa6:	4b3c      	ldr	r3, [pc, #240]	; (8001b98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	2238      	movs	r2, #56	; 0x38
 8001aac:	4013      	ands	r3, r2
 8001aae:	d10f      	bne.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001ab0:	4b39      	ldr	r3, [pc, #228]	; (8001b98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	0adb      	lsrs	r3, r3, #11
 8001ab6:	2207      	movs	r2, #7
 8001ab8:	4013      	ands	r3, r2
 8001aba:	2201      	movs	r2, #1
 8001abc:	409a      	lsls	r2, r3
 8001abe:	0013      	movs	r3, r2
 8001ac0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001ac2:	6839      	ldr	r1, [r7, #0]
 8001ac4:	4835      	ldr	r0, [pc, #212]	; (8001b9c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ac6:	f7fe fb1b 	bl	8000100 <__udivsi3>
 8001aca:	0003      	movs	r3, r0
 8001acc:	613b      	str	r3, [r7, #16]
 8001ace:	e05d      	b.n	8001b8c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ad0:	4b31      	ldr	r3, [pc, #196]	; (8001b98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	2238      	movs	r2, #56	; 0x38
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	2b08      	cmp	r3, #8
 8001ada:	d102      	bne.n	8001ae2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001adc:	4b30      	ldr	r3, [pc, #192]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x100>)
 8001ade:	613b      	str	r3, [r7, #16]
 8001ae0:	e054      	b.n	8001b8c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ae2:	4b2d      	ldr	r3, [pc, #180]	; (8001b98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	2238      	movs	r2, #56	; 0x38
 8001ae8:	4013      	ands	r3, r2
 8001aea:	2b10      	cmp	r3, #16
 8001aec:	d138      	bne.n	8001b60 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001aee:	4b2a      	ldr	r3, [pc, #168]	; (8001b98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	2203      	movs	r2, #3
 8001af4:	4013      	ands	r3, r2
 8001af6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001af8:	4b27      	ldr	r3, [pc, #156]	; (8001b98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	091b      	lsrs	r3, r3, #4
 8001afe:	2207      	movs	r2, #7
 8001b00:	4013      	ands	r3, r2
 8001b02:	3301      	adds	r3, #1
 8001b04:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2b03      	cmp	r3, #3
 8001b0a:	d10d      	bne.n	8001b28 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b0c:	68b9      	ldr	r1, [r7, #8]
 8001b0e:	4824      	ldr	r0, [pc, #144]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x100>)
 8001b10:	f7fe faf6 	bl	8000100 <__udivsi3>
 8001b14:	0003      	movs	r3, r0
 8001b16:	0019      	movs	r1, r3
 8001b18:	4b1f      	ldr	r3, [pc, #124]	; (8001b98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	0a1b      	lsrs	r3, r3, #8
 8001b1e:	227f      	movs	r2, #127	; 0x7f
 8001b20:	4013      	ands	r3, r2
 8001b22:	434b      	muls	r3, r1
 8001b24:	617b      	str	r3, [r7, #20]
        break;
 8001b26:	e00d      	b.n	8001b44 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001b28:	68b9      	ldr	r1, [r7, #8]
 8001b2a:	481c      	ldr	r0, [pc, #112]	; (8001b9c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b2c:	f7fe fae8 	bl	8000100 <__udivsi3>
 8001b30:	0003      	movs	r3, r0
 8001b32:	0019      	movs	r1, r3
 8001b34:	4b18      	ldr	r3, [pc, #96]	; (8001b98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	0a1b      	lsrs	r3, r3, #8
 8001b3a:	227f      	movs	r2, #127	; 0x7f
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	434b      	muls	r3, r1
 8001b40:	617b      	str	r3, [r7, #20]
        break;
 8001b42:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001b44:	4b14      	ldr	r3, [pc, #80]	; (8001b98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	0f5b      	lsrs	r3, r3, #29
 8001b4a:	2207      	movs	r2, #7
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	3301      	adds	r3, #1
 8001b50:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	6978      	ldr	r0, [r7, #20]
 8001b56:	f7fe fad3 	bl	8000100 <__udivsi3>
 8001b5a:	0003      	movs	r3, r0
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	e015      	b.n	8001b8c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001b60:	4b0d      	ldr	r3, [pc, #52]	; (8001b98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	2238      	movs	r2, #56	; 0x38
 8001b66:	4013      	ands	r3, r2
 8001b68:	2b20      	cmp	r3, #32
 8001b6a:	d103      	bne.n	8001b74 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001b6c:	2380      	movs	r3, #128	; 0x80
 8001b6e:	021b      	lsls	r3, r3, #8
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	e00b      	b.n	8001b8c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001b74:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	2238      	movs	r2, #56	; 0x38
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	2b18      	cmp	r3, #24
 8001b7e:	d103      	bne.n	8001b88 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001b80:	23fa      	movs	r3, #250	; 0xfa
 8001b82:	01db      	lsls	r3, r3, #7
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	e001      	b.n	8001b8c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001b8c:	693b      	ldr	r3, [r7, #16]
}
 8001b8e:	0018      	movs	r0, r3
 8001b90:	46bd      	mov	sp, r7
 8001b92:	b006      	add	sp, #24
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	46c0      	nop			; (mov r8, r8)
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	00f42400 	.word	0x00f42400
 8001ba0:	007a1200 	.word	0x007a1200

08001ba4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e04a      	b.n	8001c4c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	223d      	movs	r2, #61	; 0x3d
 8001bba:	5c9b      	ldrb	r3, [r3, r2]
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d107      	bne.n	8001bd2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	223c      	movs	r2, #60	; 0x3c
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	0018      	movs	r0, r3
 8001bce:	f7fe ffbb 	bl	8000b48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	223d      	movs	r2, #61	; 0x3d
 8001bd6:	2102      	movs	r1, #2
 8001bd8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3304      	adds	r3, #4
 8001be2:	0019      	movs	r1, r3
 8001be4:	0010      	movs	r0, r2
 8001be6:	f000 f9dd 	bl	8001fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2248      	movs	r2, #72	; 0x48
 8001bee:	2101      	movs	r1, #1
 8001bf0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	223e      	movs	r2, #62	; 0x3e
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	5499      	strb	r1, [r3, r2]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	223f      	movs	r2, #63	; 0x3f
 8001bfe:	2101      	movs	r1, #1
 8001c00:	5499      	strb	r1, [r3, r2]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2240      	movs	r2, #64	; 0x40
 8001c06:	2101      	movs	r1, #1
 8001c08:	5499      	strb	r1, [r3, r2]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2241      	movs	r2, #65	; 0x41
 8001c0e:	2101      	movs	r1, #1
 8001c10:	5499      	strb	r1, [r3, r2]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2242      	movs	r2, #66	; 0x42
 8001c16:	2101      	movs	r1, #1
 8001c18:	5499      	strb	r1, [r3, r2]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2243      	movs	r2, #67	; 0x43
 8001c1e:	2101      	movs	r1, #1
 8001c20:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2244      	movs	r2, #68	; 0x44
 8001c26:	2101      	movs	r1, #1
 8001c28:	5499      	strb	r1, [r3, r2]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2245      	movs	r2, #69	; 0x45
 8001c2e:	2101      	movs	r1, #1
 8001c30:	5499      	strb	r1, [r3, r2]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2246      	movs	r2, #70	; 0x46
 8001c36:	2101      	movs	r1, #1
 8001c38:	5499      	strb	r1, [r3, r2]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2247      	movs	r2, #71	; 0x47
 8001c3e:	2101      	movs	r1, #1
 8001c40:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	223d      	movs	r2, #61	; 0x3d
 8001c46:	2101      	movs	r1, #1
 8001c48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	b002      	add	sp, #8
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	223d      	movs	r2, #61	; 0x3d
 8001c60:	5c9b      	ldrb	r3, [r3, r2]
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d001      	beq.n	8001c6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e037      	b.n	8001cdc <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	223d      	movs	r2, #61	; 0x3d
 8001c70:	2102      	movs	r1, #2
 8001c72:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68da      	ldr	r2, [r3, #12]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2101      	movs	r1, #1
 8001c80:	430a      	orrs	r2, r1
 8001c82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a16      	ldr	r2, [pc, #88]	; (8001ce4 <HAL_TIM_Base_Start_IT+0x90>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d004      	beq.n	8001c98 <HAL_TIM_Base_Start_IT+0x44>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a15      	ldr	r2, [pc, #84]	; (8001ce8 <HAL_TIM_Base_Start_IT+0x94>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d116      	bne.n	8001cc6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	4a13      	ldr	r2, [pc, #76]	; (8001cec <HAL_TIM_Base_Start_IT+0x98>)
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2b06      	cmp	r3, #6
 8001ca8:	d016      	beq.n	8001cd8 <HAL_TIM_Base_Start_IT+0x84>
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	2380      	movs	r3, #128	; 0x80
 8001cae:	025b      	lsls	r3, r3, #9
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d011      	beq.n	8001cd8 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cc4:	e008      	b.n	8001cd8 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	e000      	b.n	8001cda <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cd8:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	0018      	movs	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	b004      	add	sp, #16
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40012c00 	.word	0x40012c00
 8001ce8:	40000400 	.word	0x40000400
 8001cec:	00010007 	.word	0x00010007

08001cf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	2202      	movs	r2, #2
 8001d00:	4013      	ands	r3, r2
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d124      	bne.n	8001d50 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	4013      	ands	r3, r2
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d11d      	bne.n	8001d50 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2203      	movs	r2, #3
 8001d1a:	4252      	negs	r2, r2
 8001d1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	d004      	beq.n	8001d3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	0018      	movs	r0, r3
 8001d34:	f000 f91e 	bl	8001f74 <HAL_TIM_IC_CaptureCallback>
 8001d38:	e007      	b.n	8001d4a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	f000 f911 	bl	8001f64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	0018      	movs	r0, r3
 8001d46:	f000 f91d 	bl	8001f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	2204      	movs	r2, #4
 8001d58:	4013      	ands	r3, r2
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	d125      	bne.n	8001daa <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	2204      	movs	r2, #4
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b04      	cmp	r3, #4
 8001d6a:	d11e      	bne.n	8001daa <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2205      	movs	r2, #5
 8001d72:	4252      	negs	r2, r2
 8001d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2202      	movs	r2, #2
 8001d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	699a      	ldr	r2, [r3, #24]
 8001d82:	23c0      	movs	r3, #192	; 0xc0
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4013      	ands	r3, r2
 8001d88:	d004      	beq.n	8001d94 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f000 f8f1 	bl	8001f74 <HAL_TIM_IC_CaptureCallback>
 8001d92:	e007      	b.n	8001da4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	0018      	movs	r0, r3
 8001d98:	f000 f8e4 	bl	8001f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	0018      	movs	r0, r3
 8001da0:	f000 f8f0 	bl	8001f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	2208      	movs	r2, #8
 8001db2:	4013      	ands	r3, r2
 8001db4:	2b08      	cmp	r3, #8
 8001db6:	d124      	bne.n	8001e02 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	2208      	movs	r2, #8
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	2b08      	cmp	r3, #8
 8001dc4:	d11d      	bne.n	8001e02 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2209      	movs	r2, #9
 8001dcc:	4252      	negs	r2, r2
 8001dce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2204      	movs	r2, #4
 8001dd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	69db      	ldr	r3, [r3, #28]
 8001ddc:	2203      	movs	r2, #3
 8001dde:	4013      	ands	r3, r2
 8001de0:	d004      	beq.n	8001dec <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	0018      	movs	r0, r3
 8001de6:	f000 f8c5 	bl	8001f74 <HAL_TIM_IC_CaptureCallback>
 8001dea:	e007      	b.n	8001dfc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	0018      	movs	r0, r3
 8001df0:	f000 f8b8 	bl	8001f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	0018      	movs	r0, r3
 8001df8:	f000 f8c4 	bl	8001f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	2210      	movs	r2, #16
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	2b10      	cmp	r3, #16
 8001e0e:	d125      	bne.n	8001e5c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	2210      	movs	r2, #16
 8001e18:	4013      	ands	r3, r2
 8001e1a:	2b10      	cmp	r3, #16
 8001e1c:	d11e      	bne.n	8001e5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2211      	movs	r2, #17
 8001e24:	4252      	negs	r2, r2
 8001e26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2208      	movs	r2, #8
 8001e2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	69da      	ldr	r2, [r3, #28]
 8001e34:	23c0      	movs	r3, #192	; 0xc0
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d004      	beq.n	8001e46 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	0018      	movs	r0, r3
 8001e40:	f000 f898 	bl	8001f74 <HAL_TIM_IC_CaptureCallback>
 8001e44:	e007      	b.n	8001e56 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	0018      	movs	r0, r3
 8001e4a:	f000 f88b 	bl	8001f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	0018      	movs	r0, r3
 8001e52:	f000 f897 	bl	8001f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	2201      	movs	r2, #1
 8001e64:	4013      	ands	r3, r2
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d10f      	bne.n	8001e8a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	2201      	movs	r2, #1
 8001e72:	4013      	ands	r3, r2
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d108      	bne.n	8001e8a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2202      	movs	r2, #2
 8001e7e:	4252      	negs	r2, r2
 8001e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	0018      	movs	r0, r3
 8001e86:	f000 f865 	bl	8001f54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	2280      	movs	r2, #128	; 0x80
 8001e92:	4013      	ands	r3, r2
 8001e94:	2b80      	cmp	r3, #128	; 0x80
 8001e96:	d10f      	bne.n	8001eb8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	2280      	movs	r2, #128	; 0x80
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	2b80      	cmp	r3, #128	; 0x80
 8001ea4:	d108      	bne.n	8001eb8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2281      	movs	r2, #129	; 0x81
 8001eac:	4252      	negs	r2, r2
 8001eae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	f000 f8ea 	bl	800208c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	691a      	ldr	r2, [r3, #16]
 8001ebe:	2380      	movs	r3, #128	; 0x80
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	401a      	ands	r2, r3
 8001ec4:	2380      	movs	r3, #128	; 0x80
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d10e      	bne.n	8001eea <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	2280      	movs	r2, #128	; 0x80
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	2b80      	cmp	r3, #128	; 0x80
 8001ed8:	d107      	bne.n	8001eea <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a1c      	ldr	r2, [pc, #112]	; (8001f50 <HAL_TIM_IRQHandler+0x260>)
 8001ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	f000 f8d9 	bl	800209c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	2240      	movs	r2, #64	; 0x40
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	2b40      	cmp	r3, #64	; 0x40
 8001ef6:	d10f      	bne.n	8001f18 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	2240      	movs	r2, #64	; 0x40
 8001f00:	4013      	ands	r3, r2
 8001f02:	2b40      	cmp	r3, #64	; 0x40
 8001f04:	d108      	bne.n	8001f18 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2241      	movs	r2, #65	; 0x41
 8001f0c:	4252      	negs	r2, r2
 8001f0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	0018      	movs	r0, r3
 8001f14:	f000 f83e 	bl	8001f94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	2220      	movs	r2, #32
 8001f20:	4013      	ands	r3, r2
 8001f22:	2b20      	cmp	r3, #32
 8001f24:	d10f      	bne.n	8001f46 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	2220      	movs	r2, #32
 8001f2e:	4013      	ands	r3, r2
 8001f30:	2b20      	cmp	r3, #32
 8001f32:	d108      	bne.n	8001f46 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2221      	movs	r2, #33	; 0x21
 8001f3a:	4252      	negs	r2, r2
 8001f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	0018      	movs	r0, r3
 8001f42:	f000 f89b 	bl	800207c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f46:	46c0      	nop			; (mov r8, r8)
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	b002      	add	sp, #8
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	46c0      	nop			; (mov r8, r8)
 8001f50:	fffffeff 	.word	0xfffffeff

08001f54 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001f5c:	46c0      	nop			; (mov r8, r8)
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	b002      	add	sp, #8
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f6c:	46c0      	nop			; (mov r8, r8)
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	b002      	add	sp, #8
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f7c:	46c0      	nop			; (mov r8, r8)
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	b002      	add	sp, #8
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f8c:	46c0      	nop			; (mov r8, r8)
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	b002      	add	sp, #8
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f9c:	46c0      	nop			; (mov r8, r8)
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	b002      	add	sp, #8
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a2b      	ldr	r2, [pc, #172]	; (8002064 <TIM_Base_SetConfig+0xc0>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d003      	beq.n	8001fc4 <TIM_Base_SetConfig+0x20>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a2a      	ldr	r2, [pc, #168]	; (8002068 <TIM_Base_SetConfig+0xc4>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d108      	bne.n	8001fd6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2270      	movs	r2, #112	; 0x70
 8001fc8:	4393      	bics	r3, r2
 8001fca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a22      	ldr	r2, [pc, #136]	; (8002064 <TIM_Base_SetConfig+0xc0>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d00f      	beq.n	8001ffe <TIM_Base_SetConfig+0x5a>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a21      	ldr	r2, [pc, #132]	; (8002068 <TIM_Base_SetConfig+0xc4>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d00b      	beq.n	8001ffe <TIM_Base_SetConfig+0x5a>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a20      	ldr	r2, [pc, #128]	; (800206c <TIM_Base_SetConfig+0xc8>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d007      	beq.n	8001ffe <TIM_Base_SetConfig+0x5a>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a1f      	ldr	r2, [pc, #124]	; (8002070 <TIM_Base_SetConfig+0xcc>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d003      	beq.n	8001ffe <TIM_Base_SetConfig+0x5a>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a1e      	ldr	r2, [pc, #120]	; (8002074 <TIM_Base_SetConfig+0xd0>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d108      	bne.n	8002010 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	4a1d      	ldr	r2, [pc, #116]	; (8002078 <TIM_Base_SetConfig+0xd4>)
 8002002:	4013      	ands	r3, r2
 8002004:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	4313      	orrs	r3, r2
 800200e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2280      	movs	r2, #128	; 0x80
 8002014:	4393      	bics	r3, r2
 8002016:	001a      	movs	r2, r3
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	4313      	orrs	r3, r2
 800201e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a0a      	ldr	r2, [pc, #40]	; (8002064 <TIM_Base_SetConfig+0xc0>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d007      	beq.n	800204e <TIM_Base_SetConfig+0xaa>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a0b      	ldr	r2, [pc, #44]	; (8002070 <TIM_Base_SetConfig+0xcc>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d003      	beq.n	800204e <TIM_Base_SetConfig+0xaa>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a0a      	ldr	r2, [pc, #40]	; (8002074 <TIM_Base_SetConfig+0xd0>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d103      	bne.n	8002056 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	691a      	ldr	r2, [r3, #16]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	615a      	str	r2, [r3, #20]
}
 800205c:	46c0      	nop			; (mov r8, r8)
 800205e:	46bd      	mov	sp, r7
 8002060:	b004      	add	sp, #16
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40012c00 	.word	0x40012c00
 8002068:	40000400 	.word	0x40000400
 800206c:	40002000 	.word	0x40002000
 8002070:	40014400 	.word	0x40014400
 8002074:	40014800 	.word	0x40014800
 8002078:	fffffcff 	.word	0xfffffcff

0800207c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002084:	46c0      	nop			; (mov r8, r8)
 8002086:	46bd      	mov	sp, r7
 8002088:	b002      	add	sp, #8
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002094:	46c0      	nop			; (mov r8, r8)
 8002096:	46bd      	mov	sp, r7
 8002098:	b002      	add	sp, #8
 800209a:	bd80      	pop	{r7, pc}

0800209c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80020a4:	46c0      	nop			; (mov r8, r8)
 80020a6:	46bd      	mov	sp, r7
 80020a8:	b002      	add	sp, #8
 80020aa:	bd80      	pop	{r7, pc}

080020ac <__libc_init_array>:
 80020ac:	b570      	push	{r4, r5, r6, lr}
 80020ae:	2600      	movs	r6, #0
 80020b0:	4d0c      	ldr	r5, [pc, #48]	; (80020e4 <__libc_init_array+0x38>)
 80020b2:	4c0d      	ldr	r4, [pc, #52]	; (80020e8 <__libc_init_array+0x3c>)
 80020b4:	1b64      	subs	r4, r4, r5
 80020b6:	10a4      	asrs	r4, r4, #2
 80020b8:	42a6      	cmp	r6, r4
 80020ba:	d109      	bne.n	80020d0 <__libc_init_array+0x24>
 80020bc:	2600      	movs	r6, #0
 80020be:	f000 f821 	bl	8002104 <_init>
 80020c2:	4d0a      	ldr	r5, [pc, #40]	; (80020ec <__libc_init_array+0x40>)
 80020c4:	4c0a      	ldr	r4, [pc, #40]	; (80020f0 <__libc_init_array+0x44>)
 80020c6:	1b64      	subs	r4, r4, r5
 80020c8:	10a4      	asrs	r4, r4, #2
 80020ca:	42a6      	cmp	r6, r4
 80020cc:	d105      	bne.n	80020da <__libc_init_array+0x2e>
 80020ce:	bd70      	pop	{r4, r5, r6, pc}
 80020d0:	00b3      	lsls	r3, r6, #2
 80020d2:	58eb      	ldr	r3, [r5, r3]
 80020d4:	4798      	blx	r3
 80020d6:	3601      	adds	r6, #1
 80020d8:	e7ee      	b.n	80020b8 <__libc_init_array+0xc>
 80020da:	00b3      	lsls	r3, r6, #2
 80020dc:	58eb      	ldr	r3, [r5, r3]
 80020de:	4798      	blx	r3
 80020e0:	3601      	adds	r6, #1
 80020e2:	e7f2      	b.n	80020ca <__libc_init_array+0x1e>
 80020e4:	0800215c 	.word	0x0800215c
 80020e8:	0800215c 	.word	0x0800215c
 80020ec:	0800215c 	.word	0x0800215c
 80020f0:	08002160 	.word	0x08002160

080020f4 <memset>:
 80020f4:	0003      	movs	r3, r0
 80020f6:	1882      	adds	r2, r0, r2
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d100      	bne.n	80020fe <memset+0xa>
 80020fc:	4770      	bx	lr
 80020fe:	7019      	strb	r1, [r3, #0]
 8002100:	3301      	adds	r3, #1
 8002102:	e7f9      	b.n	80020f8 <memset+0x4>

08002104 <_init>:
 8002104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002106:	46c0      	nop			; (mov r8, r8)
 8002108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800210a:	bc08      	pop	{r3}
 800210c:	469e      	mov	lr, r3
 800210e:	4770      	bx	lr

08002110 <_fini>:
 8002110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002112:	46c0      	nop			; (mov r8, r8)
 8002114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002116:	bc08      	pop	{r3}
 8002118:	469e      	mov	lr, r3
 800211a:	4770      	bx	lr
