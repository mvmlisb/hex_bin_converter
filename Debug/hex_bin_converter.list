
hex_bin_converter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020b0  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002168  08002168  00012168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021a8  080021a8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080021a8  080021a8  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021a8  080021a8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021a8  080021a8  000121a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021ac  080021ac  000121ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080021b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000005c  0800220c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  0800220c  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d9d  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a97  00000000  00000000  00029e21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  0002b8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b8  00000000  00000000  0002c348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000141bd  00000000  00000000  0002cd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc58  00000000  00000000  00040ebd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080876  00000000  00000000  0004cb15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cd38b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002558  00000000  00000000  000cd3dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000005c 	.word	0x2000005c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002150 	.word	0x08002150

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000060 	.word	0x20000060
 80000fc:	08002150 	.word	0x08002150

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b088      	sub	sp, #32
 800021c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800021e:	230c      	movs	r3, #12
 8000220:	18fb      	adds	r3, r7, r3
 8000222:	0018      	movs	r0, r3
 8000224:	2314      	movs	r3, #20
 8000226:	001a      	movs	r2, r3
 8000228:	2100      	movs	r1, #0
 800022a:	f001 ff89 	bl	8002140 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800022e:	4b0f      	ldr	r3, [pc, #60]	; (800026c <MX_GPIO_Init+0x54>)
 8000230:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000232:	4b0e      	ldr	r3, [pc, #56]	; (800026c <MX_GPIO_Init+0x54>)
 8000234:	2101      	movs	r1, #1
 8000236:	430a      	orrs	r2, r1
 8000238:	635a      	str	r2, [r3, #52]	; 0x34
 800023a:	4b0c      	ldr	r3, [pc, #48]	; (800026c <MX_GPIO_Init+0x54>)
 800023c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800023e:	2201      	movs	r2, #1
 8000240:	4013      	ands	r3, r2
 8000242:	60bb      	str	r3, [r7, #8]
 8000244:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000246:	4b09      	ldr	r3, [pc, #36]	; (800026c <MX_GPIO_Init+0x54>)
 8000248:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800024a:	4b08      	ldr	r3, [pc, #32]	; (800026c <MX_GPIO_Init+0x54>)
 800024c:	2102      	movs	r1, #2
 800024e:	430a      	orrs	r2, r1
 8000250:	635a      	str	r2, [r3, #52]	; 0x34
 8000252:	4b06      	ldr	r3, [pc, #24]	; (800026c <MX_GPIO_Init+0x54>)
 8000254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000256:	2202      	movs	r2, #2
 8000258:	4013      	ands	r3, r2
 800025a:	607b      	str	r3, [r7, #4]
 800025c:	687b      	ldr	r3, [r7, #4]

  MX_GPIO_InitConfigurationPin();
 800025e:	f000 f807 	bl	8000270 <MX_GPIO_InitConfigurationPin>
}
 8000262:	46c0      	nop			; (mov r8, r8)
 8000264:	46bd      	mov	sp, r7
 8000266:	b008      	add	sp, #32
 8000268:	bd80      	pop	{r7, pc}
 800026a:	46c0      	nop			; (mov r8, r8)
 800026c:	40021000 	.word	0x40021000

08000270 <MX_GPIO_InitConfigurationPin>:

/* USER CODE BEGIN 2 */
void MX_GPIO_InitConfigurationPin() {
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af00      	add	r7, sp, #0
  /* Init PIN of configuration mode */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	0018      	movs	r0, r3
 800027a:	2314      	movs	r3, #20
 800027c:	001a      	movs	r2, r3
 800027e:	2100      	movs	r1, #0
 8000280:	f001 ff5e 	bl	8002140 <memset>

  GPIO_InitStruct.Pin = BOARD_MODE_Pin;
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	2240      	movs	r2, #64	; 0x40
 8000288:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	2200      	movs	r2, #0
 800028e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	2200      	movs	r2, #0
 8000294:	609a      	str	r2, [r3, #8]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	4a04      	ldr	r2, [pc, #16]	; (80002ac <MX_GPIO_InitConfigurationPin+0x3c>)
 800029a:	0019      	movs	r1, r3
 800029c:	0010      	movs	r0, r2
 800029e:	f000 fe2f 	bl	8000f00 <HAL_GPIO_Init>
}
 80002a2:	46c0      	nop			; (mov r8, r8)
 80002a4:	46bd      	mov	sp, r7
 80002a6:	b006      	add	sp, #24
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	46c0      	nop			; (mov r8, r8)
 80002ac:	50000400 	.word	0x50000400

080002b0 <MX_GPIO_ReinitInBinToHexMode>:


void MX_GPIO_ReinitInBinToHexMode(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b086      	sub	sp, #24
 80002b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	0018      	movs	r0, r3
 80002ba:	2314      	movs	r3, #20
 80002bc:	001a      	movs	r2, r3
 80002be:	2100      	movs	r1, #0
 80002c0:	f001 ff3e 	bl	8002140 <memset>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISPLAY_SWITCH_Pin|OUTPUT_DISPLAY_A_Pin|OUTPUT_DISPLAY_B_Pin|OUTPUT_DISPLAY_C_Pin
 80002c4:	23a0      	movs	r3, #160	; 0xa0
 80002c6:	05db      	lsls	r3, r3, #23
 80002c8:	2200      	movs	r2, #0
 80002ca:	21ff      	movs	r1, #255	; 0xff
 80002cc:	0018      	movs	r0, r3
 80002ce:	f000 ff98 	bl	8001202 <HAL_GPIO_WritePin>
                          |OUTPUT_DISPLAY_D_Pin|OUTPUT_DISPLAY_E_Pin|OUTPUT_DISPLAY_F_Pin|OUTPUT_DISPLAY_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin PAPin PAPin PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DISPLAY_SWITCH_Pin|OUTPUT_DISPLAY_A_Pin|OUTPUT_DISPLAY_B_Pin|OUTPUT_DISPLAY_C_Pin
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	22ff      	movs	r2, #255	; 0xff
 80002d6:	601a      	str	r2, [r3, #0]
                          |OUTPUT_DISPLAY_D_Pin|OUTPUT_DISPLAY_E_Pin|OUTPUT_DISPLAY_F_Pin|OUTPUT_DISPLAY_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	2201      	movs	r2, #1
 80002dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	2200      	movs	r2, #0
 80002e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002e4:	1d3b      	adds	r3, r7, #4
 80002e6:	2200      	movs	r2, #0
 80002e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ea:	1d3a      	adds	r2, r7, #4
 80002ec:	23a0      	movs	r3, #160	; 0xa0
 80002ee:	05db      	lsls	r3, r3, #23
 80002f0:	0011      	movs	r1, r2
 80002f2:	0018      	movs	r0, r3
 80002f4:	f000 fe04 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LS_BINARY_8_Pin|LS_BINARY_2_Pin|LS_BINARY_4_Pin|MS_BINARY_2_Pin|MS_BINARY_8_Pin|MS_BINARY_1_Pin;
 80002f8:	1d3b      	adds	r3, r7, #4
 80002fa:	229f      	movs	r2, #159	; 0x9f
 80002fc:	0212      	lsls	r2, r2, #8
 80002fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	2200      	movs	r2, #0
 8000304:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	2200      	movs	r2, #0
 800030a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800030c:	1d3a      	adds	r2, r7, #4
 800030e:	23a0      	movs	r3, #160	; 0xa0
 8000310:	05db      	lsls	r3, r3, #23
 8000312:	0011      	movs	r1, r2
 8000314:	0018      	movs	r0, r3
 8000316:	f000 fdf3 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LS_BINARY_1_Pin|MS_BINARY_4_Pin|DISPLAY_MODE_Pin;
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	4a08      	ldr	r2, [pc, #32]	; (8000340 <MX_GPIO_ReinitInBinToHexMode+0x90>)
 800031e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000320:	1d3b      	adds	r3, r7, #4
 8000322:	2200      	movs	r2, #0
 8000324:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	2200      	movs	r2, #0
 800032a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	4a05      	ldr	r2, [pc, #20]	; (8000344 <MX_GPIO_ReinitInBinToHexMode+0x94>)
 8000330:	0019      	movs	r1, r3
 8000332:	0010      	movs	r0, r2
 8000334:	f000 fde4 	bl	8000f00 <HAL_GPIO_Init>
}
 8000338:	46c0      	nop			; (mov r8, r8)
 800033a:	46bd      	mov	sp, r7
 800033c:	b006      	add	sp, #24
 800033e:	bd80      	pop	{r7, pc}
 8000340:	00008030 	.word	0x00008030
 8000344:	50000400 	.word	0x50000400

08000348 <MX_GPIO_RenitInHexToBinMode>:

void MX_GPIO_RenitInHexToBinMode(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b086      	sub	sp, #24
 800034c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	0018      	movs	r0, r3
 8000352:	2314      	movs	r3, #20
 8000354:	001a      	movs	r2, r3
 8000356:	2100      	movs	r1, #0
 8000358:	f001 fef2 	bl	8002140 <memset>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISPLAY_SWITCH_Pin|OUTPUT_DISPLAY_A_Pin|OUTPUT_DISPLAY_B_Pin|OUTPUT_DISPLAY_C_Pin
 800035c:	4922      	ldr	r1, [pc, #136]	; (80003e8 <MX_GPIO_RenitInHexToBinMode+0xa0>)
 800035e:	23a0      	movs	r3, #160	; 0xa0
 8000360:	05db      	lsls	r3, r3, #23
 8000362:	2200      	movs	r2, #0
 8000364:	0018      	movs	r0, r3
 8000366:	f000 ff4c 	bl	8001202 <HAL_GPIO_WritePin>
                          |OUTPUT_DISPLAY_D_Pin|OUTPUT_DISPLAY_E_Pin|OUTPUT_DISPLAY_F_Pin|OUTPUT_DISPLAY_G_Pin
                          |LS_BINARY_8_Pin|LS_BINARY_2_Pin|LS_BINARY_4_Pin|MS_BINARY_2_Pin
                          |MS_BINARY_8_Pin|MS_BINARY_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LS_BINARY_1_Pin|MS_BINARY_4_Pin, GPIO_PIN_RESET);
 800036a:	4b20      	ldr	r3, [pc, #128]	; (80003ec <MX_GPIO_RenitInHexToBinMode+0xa4>)
 800036c:	2200      	movs	r2, #0
 800036e:	2130      	movs	r1, #48	; 0x30
 8000370:	0018      	movs	r0, r3
 8000372:	f000 ff46 	bl	8001202 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = DISPLAY_SWITCH_Pin|OUTPUT_DISPLAY_A_Pin|OUTPUT_DISPLAY_B_Pin|OUTPUT_DISPLAY_C_Pin
 8000376:	1d3b      	adds	r3, r7, #4
 8000378:	4a1b      	ldr	r2, [pc, #108]	; (80003e8 <MX_GPIO_RenitInHexToBinMode+0xa0>)
 800037a:	601a      	str	r2, [r3, #0]
                          |OUTPUT_DISPLAY_D_Pin|OUTPUT_DISPLAY_E_Pin|OUTPUT_DISPLAY_F_Pin|OUTPUT_DISPLAY_G_Pin
                          |LS_BINARY_8_Pin|LS_BINARY_2_Pin|LS_BINARY_4_Pin|MS_BINARY_2_Pin
                          |MS_BINARY_8_Pin|MS_BINARY_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800037c:	1d3b      	adds	r3, r7, #4
 800037e:	2201      	movs	r2, #1
 8000380:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	2200      	movs	r2, #0
 8000386:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000388:	1d3b      	adds	r3, r7, #4
 800038a:	2200      	movs	r2, #0
 800038c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800038e:	1d3a      	adds	r2, r7, #4
 8000390:	23a0      	movs	r3, #160	; 0xa0
 8000392:	05db      	lsls	r3, r3, #23
 8000394:	0011      	movs	r1, r2
 8000396:	0018      	movs	r0, r3
 8000398:	f000 fdb2 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = MS_INCREMENT_BUTTON_Pin|MS_DECREMENT_BUTTON_Pin|LS_INCREMENT_BUTTON_Pin|LS_DECREMENT_BUTTON_Pin;
 800039c:	1d3b      	adds	r3, r7, #4
 800039e:	220f      	movs	r2, #15
 80003a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	2200      	movs	r2, #0
 80003a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a8:	1d3b      	adds	r3, r7, #4
 80003aa:	2200      	movs	r2, #0
 80003ac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ae:	1d3b      	adds	r3, r7, #4
 80003b0:	4a0e      	ldr	r2, [pc, #56]	; (80003ec <MX_GPIO_RenitInHexToBinMode+0xa4>)
 80003b2:	0019      	movs	r1, r3
 80003b4:	0010      	movs	r0, r2
 80003b6:	f000 fda3 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LS_BINARY_1_Pin|MS_BINARY_4_Pin;
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	2230      	movs	r2, #48	; 0x30
 80003be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c0:	1d3b      	adds	r3, r7, #4
 80003c2:	2201      	movs	r2, #1
 80003c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	2200      	movs	r2, #0
 80003ca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	2200      	movs	r2, #0
 80003d0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	4a05      	ldr	r2, [pc, #20]	; (80003ec <MX_GPIO_RenitInHexToBinMode+0xa4>)
 80003d6:	0019      	movs	r1, r3
 80003d8:	0010      	movs	r0, r2
 80003da:	f000 fd91 	bl	8000f00 <HAL_GPIO_Init>
}
 80003de:	46c0      	nop			; (mov r8, r8)
 80003e0:	46bd      	mov	sp, r7
 80003e2:	b006      	add	sp, #24
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	46c0      	nop			; (mov r8, r8)
 80003e8:	00009fff 	.word	0x00009fff
 80003ec:	50000400 	.word	0x50000400

080003f0 <updateDisplayMode>:
BoardMode boardMode;

uint8_t lsNumber;
uint8_t msNumber;

void updateDisplayMode() {
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
	displayMode = (DisplayMode) HAL_GPIO_ReadPin(GPIOB, DISPLAY_MODE_Pin);
 80003f4:	2380      	movs	r3, #128	; 0x80
 80003f6:	021b      	lsls	r3, r3, #8
 80003f8:	4a05      	ldr	r2, [pc, #20]	; (8000410 <updateDisplayMode+0x20>)
 80003fa:	0019      	movs	r1, r3
 80003fc:	0010      	movs	r0, r2
 80003fe:	f000 fee3 	bl	80011c8 <HAL_GPIO_ReadPin>
 8000402:	0003      	movs	r3, r0
 8000404:	001a      	movs	r2, r3
 8000406:	4b03      	ldr	r3, [pc, #12]	; (8000414 <updateDisplayMode+0x24>)
 8000408:	701a      	strb	r2, [r3, #0]
}
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	50000400 	.word	0x50000400
 8000414:	20000078 	.word	0x20000078

08000418 <updateDisplay>:

void updateDisplay() {
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
	if(displayMode == FROM_INPUT)
 800041e:	4b35      	ldr	r3, [pc, #212]	; (80004f4 <updateDisplay+0xdc>)
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	2b01      	cmp	r3, #1
 8000424:	d062      	beq.n	80004ec <updateDisplay+0xd4>
		return;

	static ActiveDisplay activeDisplay = LS_DISPLAY;

	ActiveDisplay notActiveDisplay = activeDisplay == MS_DISPLAY ? LS_DISPLAY : MS_DISPLAY;
 8000426:	4b34      	ldr	r3, [pc, #208]	; (80004f8 <updateDisplay+0xe0>)
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	425a      	negs	r2, r3
 800042c:	4153      	adcs	r3, r2
 800042e:	b2da      	uxtb	r2, r3
 8000430:	1d7b      	adds	r3, r7, #5
 8000432:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, DISPLAY_SWITCH_Pin, notActiveDisplay);
 8000434:	1d7b      	adds	r3, r7, #5
 8000436:	781a      	ldrb	r2, [r3, #0]
 8000438:	23a0      	movs	r3, #160	; 0xa0
 800043a:	05db      	lsls	r3, r3, #23
 800043c:	2101      	movs	r1, #1
 800043e:	0018      	movs	r0, r3
 8000440:	f000 fedf 	bl	8001202 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < DISPLAY_SEGMENT_COUNT; i++)
 8000444:	1dfb      	adds	r3, r7, #7
 8000446:	2200      	movs	r2, #0
 8000448:	701a      	strb	r2, [r3, #0]
 800044a:	e00f      	b.n	800046c <updateDisplay+0x54>
	    HAL_GPIO_WritePin(GPIOA, DisplayPins[i], GPIO_PIN_RESET);
 800044c:	1dfb      	adds	r3, r7, #7
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	4a2a      	ldr	r2, [pc, #168]	; (80004fc <updateDisplay+0xe4>)
 8000452:	5cd3      	ldrb	r3, [r2, r3]
 8000454:	b299      	uxth	r1, r3
 8000456:	23a0      	movs	r3, #160	; 0xa0
 8000458:	05db      	lsls	r3, r3, #23
 800045a:	2200      	movs	r2, #0
 800045c:	0018      	movs	r0, r3
 800045e:	f000 fed0 	bl	8001202 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < DISPLAY_SEGMENT_COUNT; i++)
 8000462:	1dfb      	adds	r3, r7, #7
 8000464:	781a      	ldrb	r2, [r3, #0]
 8000466:	1dfb      	adds	r3, r7, #7
 8000468:	3201      	adds	r2, #1
 800046a:	701a      	strb	r2, [r3, #0]
 800046c:	1dfb      	adds	r3, r7, #7
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	2b06      	cmp	r3, #6
 8000472:	d9eb      	bls.n	800044c <updateDisplay+0x34>

	uint8_t number = activeDisplay == MS_DISPLAY ? msNumber : lsNumber;
 8000474:	4b20      	ldr	r3, [pc, #128]	; (80004f8 <updateDisplay+0xe0>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d102      	bne.n	8000482 <updateDisplay+0x6a>
 800047c:	4b20      	ldr	r3, [pc, #128]	; (8000500 <updateDisplay+0xe8>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	e001      	b.n	8000486 <updateDisplay+0x6e>
 8000482:	4b20      	ldr	r3, [pc, #128]	; (8000504 <updateDisplay+0xec>)
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	1d3a      	adds	r2, r7, #4
 8000488:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOA, DISPLAY_SWITCH_Pin, activeDisplay);
 800048a:	4b1b      	ldr	r3, [pc, #108]	; (80004f8 <updateDisplay+0xe0>)
 800048c:	781a      	ldrb	r2, [r3, #0]
 800048e:	23a0      	movs	r3, #160	; 0xa0
 8000490:	05db      	lsls	r3, r3, #23
 8000492:	2101      	movs	r1, #1
 8000494:	0018      	movs	r0, r3
 8000496:	f000 feb4 	bl	8001202 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < DISPLAY_SEGMENT_COUNT; i++)
 800049a:	1dbb      	adds	r3, r7, #6
 800049c:	2200      	movs	r2, #0
 800049e:	701a      	strb	r2, [r3, #0]
 80004a0:	e01b      	b.n	80004da <updateDisplay+0xc2>
	    HAL_GPIO_WritePin(GPIOA, DisplayPins[i], NumberToDisplaySegments[number] << i & 0x40);
 80004a2:	1dbb      	adds	r3, r7, #6
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	4a15      	ldr	r2, [pc, #84]	; (80004fc <updateDisplay+0xe4>)
 80004a8:	5cd3      	ldrb	r3, [r2, r3]
 80004aa:	b299      	uxth	r1, r3
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	4a15      	ldr	r2, [pc, #84]	; (8000508 <updateDisplay+0xf0>)
 80004b2:	5cd3      	ldrb	r3, [r2, r3]
 80004b4:	001a      	movs	r2, r3
 80004b6:	1dbb      	adds	r3, r7, #6
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	409a      	lsls	r2, r3
 80004bc:	0013      	movs	r3, r2
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	2240      	movs	r2, #64	; 0x40
 80004c2:	4013      	ands	r3, r2
 80004c4:	b2da      	uxtb	r2, r3
 80004c6:	23a0      	movs	r3, #160	; 0xa0
 80004c8:	05db      	lsls	r3, r3, #23
 80004ca:	0018      	movs	r0, r3
 80004cc:	f000 fe99 	bl	8001202 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < DISPLAY_SEGMENT_COUNT; i++)
 80004d0:	1dbb      	adds	r3, r7, #6
 80004d2:	781a      	ldrb	r2, [r3, #0]
 80004d4:	1dbb      	adds	r3, r7, #6
 80004d6:	3201      	adds	r2, #1
 80004d8:	701a      	strb	r2, [r3, #0]
 80004da:	1dbb      	adds	r3, r7, #6
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	2b06      	cmp	r3, #6
 80004e0:	d9df      	bls.n	80004a2 <updateDisplay+0x8a>

	activeDisplay = notActiveDisplay;
 80004e2:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <updateDisplay+0xe0>)
 80004e4:	1d7a      	adds	r2, r7, #5
 80004e6:	7812      	ldrb	r2, [r2, #0]
 80004e8:	701a      	strb	r2, [r3, #0]
 80004ea:	e000      	b.n	80004ee <updateDisplay+0xd6>
		return;
 80004ec:	46c0      	nop			; (mov r8, r8)
}
 80004ee:	46bd      	mov	sp, r7
 80004f0:	b002      	add	sp, #8
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	20000078 	.word	0x20000078
 80004f8:	2000004c 	.word	0x2000004c
 80004fc:	20000000 	.word	0x20000000
 8000500:	2000007b 	.word	0x2000007b
 8000504:	2000007a 	.word	0x2000007a
 8000508:	20000008 	.word	0x20000008

0800050c <updateButton>:

void updateButton(Button *button) {
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
	if((ButtonPinState)HAL_GPIO_ReadPin(GPIOB, button->pin) == BUTTON_IS_PRESSED && button->isButtonPressed) {
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	b29b      	uxth	r3, r3
 800051a:	4a15      	ldr	r2, [pc, #84]	; (8000570 <updateButton+0x64>)
 800051c:	0019      	movs	r1, r3
 800051e:	0010      	movs	r0, r2
 8000520:	f000 fe52 	bl	80011c8 <HAL_GPIO_ReadPin>
 8000524:	1e03      	subs	r3, r0, #0
 8000526:	d10e      	bne.n	8000546 <updateButton+0x3a>
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	785b      	ldrb	r3, [r3, #1]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d00a      	beq.n	8000546 <updateButton+0x3a>
		button->isButtonPressed = 0;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2200      	movs	r2, #0
 8000534:	705a      	strb	r2, [r3, #1]
		button->needToProcces = 1;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2201      	movs	r2, #1
 800053a:	721a      	strb	r2, [r3, #8]
		button->pressedMillis = HAL_GetTick();
 800053c:	f000 fbf8 	bl	8000d30 <HAL_GetTick>
 8000540:	0002      	movs	r2, r0
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	605a      	str	r2, [r3, #4]
	}

	if(!button->isButtonPressed && (HAL_GetTick() - button->pressedMillis) > BUTTON_DEBOUNCE_MILLIS)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	785b      	ldrb	r3, [r3, #1]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d10c      	bne.n	8000568 <updateButton+0x5c>
 800054e:	f000 fbef 	bl	8000d30 <HAL_GetTick>
 8000552:	0002      	movs	r2, r0
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	685b      	ldr	r3, [r3, #4]
 8000558:	1ad2      	subs	r2, r2, r3
 800055a:	238a      	movs	r3, #138	; 0x8a
 800055c:	005b      	lsls	r3, r3, #1
 800055e:	429a      	cmp	r2, r3
 8000560:	d302      	bcc.n	8000568 <updateButton+0x5c>
		button->isButtonPressed = 1;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	2201      	movs	r2, #1
 8000566:	705a      	strb	r2, [r3, #1]
}
 8000568:	46c0      	nop			; (mov r8, r8)
 800056a:	46bd      	mov	sp, r7
 800056c:	b002      	add	sp, #8
 800056e:	bd80      	pop	{r7, pc}
 8000570:	50000400 	.word	0x50000400

08000574 <getIncrementedNumber>:

uint8_t getIncrementedNumber(uint8_t number) {
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	0002      	movs	r2, r0
 800057c:	1dfb      	adds	r3, r7, #7
 800057e:	701a      	strb	r2, [r3, #0]
	return number == MAX_NUMBER ? MIN_NUMBER : number + 1;
 8000580:	1dfb      	adds	r3, r7, #7
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b0f      	cmp	r3, #15
 8000586:	d004      	beq.n	8000592 <getIncrementedNumber+0x1e>
 8000588:	1dfb      	adds	r3, r7, #7
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	3301      	adds	r3, #1
 800058e:	b2db      	uxtb	r3, r3
 8000590:	e000      	b.n	8000594 <getIncrementedNumber+0x20>
 8000592:	2300      	movs	r3, #0
}
 8000594:	0018      	movs	r0, r3
 8000596:	46bd      	mov	sp, r7
 8000598:	b002      	add	sp, #8
 800059a:	bd80      	pop	{r7, pc}

0800059c <getDecrementedNumber>:

uint8_t getDecrementedNumber(uint8_t number) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	0002      	movs	r2, r0
 80005a4:	1dfb      	adds	r3, r7, #7
 80005a6:	701a      	strb	r2, [r3, #0]
	return number == MIN_NUMBER ? MAX_NUMBER : number - 1;
 80005a8:	1dfb      	adds	r3, r7, #7
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d004      	beq.n	80005ba <getDecrementedNumber+0x1e>
 80005b0:	1dfb      	adds	r3, r7, #7
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	3b01      	subs	r3, #1
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	e000      	b.n	80005bc <getDecrementedNumber+0x20>
 80005ba:	230f      	movs	r3, #15
}
 80005bc:	0018      	movs	r0, r3
 80005be:	46bd      	mov	sp, r7
 80005c0:	b002      	add	sp, #8
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <proccesButton>:

void proccesButton(uint8_t buttonPin) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	0002      	movs	r2, r0
 80005cc:	1dfb      	adds	r3, r7, #7
 80005ce:	701a      	strb	r2, [r3, #0]
	switch (buttonPin) {
 80005d0:	1dfb      	adds	r3, r7, #7
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	2b08      	cmp	r3, #8
 80005d6:	d026      	beq.n	8000626 <proccesButton+0x62>
 80005d8:	dc2f      	bgt.n	800063a <proccesButton+0x76>
 80005da:	2b04      	cmp	r3, #4
 80005dc:	d019      	beq.n	8000612 <proccesButton+0x4e>
 80005de:	dc2c      	bgt.n	800063a <proccesButton+0x76>
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d002      	beq.n	80005ea <proccesButton+0x26>
 80005e4:	2b02      	cmp	r3, #2
 80005e6:	d00a      	beq.n	80005fe <proccesButton+0x3a>
	        break;
	    case LS_DECREMENT_BUTTON_Pin:
			lsNumber = getDecrementedNumber(lsNumber);
	    	break;
	}
}
 80005e8:	e027      	b.n	800063a <proccesButton+0x76>
			msNumber = getIncrementedNumber(msNumber);
 80005ea:	4b16      	ldr	r3, [pc, #88]	; (8000644 <proccesButton+0x80>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	0018      	movs	r0, r3
 80005f0:	f7ff ffc0 	bl	8000574 <getIncrementedNumber>
 80005f4:	0003      	movs	r3, r0
 80005f6:	001a      	movs	r2, r3
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <proccesButton+0x80>)
 80005fa:	701a      	strb	r2, [r3, #0]
	        break;
 80005fc:	e01d      	b.n	800063a <proccesButton+0x76>
			msNumber = getDecrementedNumber(msNumber);
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <proccesButton+0x80>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	0018      	movs	r0, r3
 8000604:	f7ff ffca 	bl	800059c <getDecrementedNumber>
 8000608:	0003      	movs	r3, r0
 800060a:	001a      	movs	r2, r3
 800060c:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <proccesButton+0x80>)
 800060e:	701a      	strb	r2, [r3, #0]
	        break;
 8000610:	e013      	b.n	800063a <proccesButton+0x76>
			lsNumber = getIncrementedNumber(lsNumber);
 8000612:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <proccesButton+0x84>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	0018      	movs	r0, r3
 8000618:	f7ff ffac 	bl	8000574 <getIncrementedNumber>
 800061c:	0003      	movs	r3, r0
 800061e:	001a      	movs	r2, r3
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <proccesButton+0x84>)
 8000622:	701a      	strb	r2, [r3, #0]
	        break;
 8000624:	e009      	b.n	800063a <proccesButton+0x76>
			lsNumber = getDecrementedNumber(lsNumber);
 8000626:	4b08      	ldr	r3, [pc, #32]	; (8000648 <proccesButton+0x84>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	0018      	movs	r0, r3
 800062c:	f7ff ffb6 	bl	800059c <getDecrementedNumber>
 8000630:	0003      	movs	r3, r0
 8000632:	001a      	movs	r2, r3
 8000634:	4b04      	ldr	r3, [pc, #16]	; (8000648 <proccesButton+0x84>)
 8000636:	701a      	strb	r2, [r3, #0]
	    	break;
 8000638:	46c0      	nop			; (mov r8, r8)
}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	46bd      	mov	sp, r7
 800063e:	b002      	add	sp, #8
 8000640:	bd80      	pop	{r7, pc}
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	2000007b 	.word	0x2000007b
 8000648:	2000007a 	.word	0x2000007a

0800064c <getInvertedBit>:

uint8_t getInvertedBit(uint8_t number, uint8_t bitPosition) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	0002      	movs	r2, r0
 8000654:	1dfb      	adds	r3, r7, #7
 8000656:	701a      	strb	r2, [r3, #0]
 8000658:	1dbb      	adds	r3, r7, #6
 800065a:	1c0a      	adds	r2, r1, #0
 800065c:	701a      	strb	r2, [r3, #0]
	return ~number >> bitPosition & 1;
 800065e:	1dfb      	adds	r3, r7, #7
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	43da      	mvns	r2, r3
 8000664:	1dbb      	adds	r3, r7, #6
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	411a      	asrs	r2, r3
 800066a:	0013      	movs	r3, r2
 800066c:	b2db      	uxtb	r3, r3
 800066e:	2201      	movs	r2, #1
 8000670:	4013      	ands	r3, r2
 8000672:	b2db      	uxtb	r3, r3
}
 8000674:	0018      	movs	r0, r3
 8000676:	46bd      	mov	sp, r7
 8000678:	b002      	add	sp, #8
 800067a:	bd80      	pop	{r7, pc}

0800067c <writeBinaryRepresention>:

void writeBinaryRepresention() {
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, MS_BINARY_1_Pin, getInvertedBit(msNumber, 0));
 8000680:	4b3b      	ldr	r3, [pc, #236]	; (8000770 <writeBinaryRepresention+0xf4>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2100      	movs	r1, #0
 8000686:	0018      	movs	r0, r3
 8000688:	f7ff ffe0 	bl	800064c <getInvertedBit>
 800068c:	0003      	movs	r3, r0
 800068e:	001a      	movs	r2, r3
 8000690:	2380      	movs	r3, #128	; 0x80
 8000692:	0219      	lsls	r1, r3, #8
 8000694:	23a0      	movs	r3, #160	; 0xa0
 8000696:	05db      	lsls	r3, r3, #23
 8000698:	0018      	movs	r0, r3
 800069a:	f000 fdb2 	bl	8001202 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, MS_BINARY_2_Pin, getInvertedBit(msNumber, 1));
 800069e:	4b34      	ldr	r3, [pc, #208]	; (8000770 <writeBinaryRepresention+0xf4>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2101      	movs	r1, #1
 80006a4:	0018      	movs	r0, r3
 80006a6:	f7ff ffd1 	bl	800064c <getInvertedBit>
 80006aa:	0003      	movs	r3, r0
 80006ac:	001a      	movs	r2, r3
 80006ae:	2380      	movs	r3, #128	; 0x80
 80006b0:	0119      	lsls	r1, r3, #4
 80006b2:	23a0      	movs	r3, #160	; 0xa0
 80006b4:	05db      	lsls	r3, r3, #23
 80006b6:	0018      	movs	r0, r3
 80006b8:	f000 fda3 	bl	8001202 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, MS_BINARY_4_Pin, getInvertedBit(msNumber, 2));
 80006bc:	4b2c      	ldr	r3, [pc, #176]	; (8000770 <writeBinaryRepresention+0xf4>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2102      	movs	r1, #2
 80006c2:	0018      	movs	r0, r3
 80006c4:	f7ff ffc2 	bl	800064c <getInvertedBit>
 80006c8:	0003      	movs	r3, r0
 80006ca:	001a      	movs	r2, r3
 80006cc:	23a0      	movs	r3, #160	; 0xa0
 80006ce:	05db      	lsls	r3, r3, #23
 80006d0:	2120      	movs	r1, #32
 80006d2:	0018      	movs	r0, r3
 80006d4:	f000 fd95 	bl	8001202 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, MS_BINARY_8_Pin, getInvertedBit(msNumber, 3));
 80006d8:	4b25      	ldr	r3, [pc, #148]	; (8000770 <writeBinaryRepresention+0xf4>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2103      	movs	r1, #3
 80006de:	0018      	movs	r0, r3
 80006e0:	f7ff ffb4 	bl	800064c <getInvertedBit>
 80006e4:	0003      	movs	r3, r0
 80006e6:	001a      	movs	r2, r3
 80006e8:	2380      	movs	r3, #128	; 0x80
 80006ea:	0159      	lsls	r1, r3, #5
 80006ec:	23a0      	movs	r3, #160	; 0xa0
 80006ee:	05db      	lsls	r3, r3, #23
 80006f0:	0018      	movs	r0, r3
 80006f2:	f000 fd86 	bl	8001202 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, LS_BINARY_1_Pin, getInvertedBit(lsNumber, 0));
 80006f6:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <writeBinaryRepresention+0xf8>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	2100      	movs	r1, #0
 80006fc:	0018      	movs	r0, r3
 80006fe:	f7ff ffa5 	bl	800064c <getInvertedBit>
 8000702:	0003      	movs	r3, r0
 8000704:	001a      	movs	r2, r3
 8000706:	23a0      	movs	r3, #160	; 0xa0
 8000708:	05db      	lsls	r3, r3, #23
 800070a:	2110      	movs	r1, #16
 800070c:	0018      	movs	r0, r3
 800070e:	f000 fd78 	bl	8001202 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LS_BINARY_2_Pin, getInvertedBit(lsNumber, 1));
 8000712:	4b18      	ldr	r3, [pc, #96]	; (8000774 <writeBinaryRepresention+0xf8>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2101      	movs	r1, #1
 8000718:	0018      	movs	r0, r3
 800071a:	f7ff ff97 	bl	800064c <getInvertedBit>
 800071e:	0003      	movs	r3, r0
 8000720:	001a      	movs	r2, r3
 8000722:	2380      	movs	r3, #128	; 0x80
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	4814      	ldr	r0, [pc, #80]	; (8000778 <writeBinaryRepresention+0xfc>)
 8000728:	0019      	movs	r1, r3
 800072a:	f000 fd6a 	bl	8001202 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LS_BINARY_4_Pin, getInvertedBit(lsNumber, 2));
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <writeBinaryRepresention+0xf8>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2102      	movs	r1, #2
 8000734:	0018      	movs	r0, r3
 8000736:	f7ff ff89 	bl	800064c <getInvertedBit>
 800073a:	0003      	movs	r3, r0
 800073c:	001a      	movs	r2, r3
 800073e:	2380      	movs	r3, #128	; 0x80
 8000740:	00db      	lsls	r3, r3, #3
 8000742:	480d      	ldr	r0, [pc, #52]	; (8000778 <writeBinaryRepresention+0xfc>)
 8000744:	0019      	movs	r1, r3
 8000746:	f000 fd5c 	bl	8001202 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LS_BINARY_8_Pin, getInvertedBit(lsNumber, 3));
 800074a:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <writeBinaryRepresention+0xf8>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	2103      	movs	r1, #3
 8000750:	0018      	movs	r0, r3
 8000752:	f7ff ff7b 	bl	800064c <getInvertedBit>
 8000756:	0003      	movs	r3, r0
 8000758:	001a      	movs	r2, r3
 800075a:	2380      	movs	r3, #128	; 0x80
 800075c:	0059      	lsls	r1, r3, #1
 800075e:	23a0      	movs	r3, #160	; 0xa0
 8000760:	05db      	lsls	r3, r3, #23
 8000762:	0018      	movs	r0, r3
 8000764:	f000 fd4d 	bl	8001202 <HAL_GPIO_WritePin>
}
 8000768:	46c0      	nop			; (mov r8, r8)
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	2000007b 	.word	0x2000007b
 8000774:	2000007a 	.word	0x2000007a
 8000778:	50000400 	.word	0x50000400

0800077c <pollAndProcessButtons>:

void pollAndProcessButtons() {
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < ButtonCount; i++)
 8000782:	1dfb      	adds	r3, r7, #7
 8000784:	2200      	movs	r2, #0
 8000786:	701a      	strb	r2, [r3, #0]
 8000788:	e00f      	b.n	80007aa <pollAndProcessButtons+0x2e>
		updateButton(&buttons[i]);
 800078a:	1dfb      	adds	r3, r7, #7
 800078c:	781a      	ldrb	r2, [r3, #0]
 800078e:	0013      	movs	r3, r2
 8000790:	005b      	lsls	r3, r3, #1
 8000792:	189b      	adds	r3, r3, r2
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	4a22      	ldr	r2, [pc, #136]	; (8000820 <pollAndProcessButtons+0xa4>)
 8000798:	189b      	adds	r3, r3, r2
 800079a:	0018      	movs	r0, r3
 800079c:	f7ff feb6 	bl	800050c <updateButton>
	for (uint8_t i = 0; i < ButtonCount; i++)
 80007a0:	1dfb      	adds	r3, r7, #7
 80007a2:	781a      	ldrb	r2, [r3, #0]
 80007a4:	1dfb      	adds	r3, r7, #7
 80007a6:	3201      	adds	r2, #1
 80007a8:	701a      	strb	r2, [r3, #0]
 80007aa:	1dfb      	adds	r3, r7, #7
 80007ac:	781a      	ldrb	r2, [r3, #0]
 80007ae:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <pollAndProcessButtons+0xa8>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	429a      	cmp	r2, r3
 80007b4:	d3e9      	bcc.n	800078a <pollAndProcessButtons+0xe>

	uint8_t updateBinaryRepresentation = 0;
 80007b6:	1dbb      	adds	r3, r7, #6
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i < ButtonCount; i++) {
 80007bc:	1d7b      	adds	r3, r7, #5
 80007be:	2200      	movs	r2, #0
 80007c0:	701a      	strb	r2, [r3, #0]
 80007c2:	e01c      	b.n	80007fe <pollAndProcessButtons+0x82>
		Button *button = &buttons[i];
 80007c4:	1d7b      	adds	r3, r7, #5
 80007c6:	781a      	ldrb	r2, [r3, #0]
 80007c8:	0013      	movs	r3, r2
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	189b      	adds	r3, r3, r2
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	4a13      	ldr	r2, [pc, #76]	; (8000820 <pollAndProcessButtons+0xa4>)
 80007d2:	189b      	adds	r3, r3, r2
 80007d4:	603b      	str	r3, [r7, #0]
		if(button->needToProcces) {
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	7a1b      	ldrb	r3, [r3, #8]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d00a      	beq.n	80007f4 <pollAndProcessButtons+0x78>
			proccesButton(button->pin);
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	0018      	movs	r0, r3
 80007e4:	f7ff feee 	bl	80005c4 <proccesButton>
			button->needToProcces = 0;
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	2200      	movs	r2, #0
 80007ec:	721a      	strb	r2, [r3, #8]

			updateBinaryRepresentation = 1;
 80007ee:	1dbb      	adds	r3, r7, #6
 80007f0:	2201      	movs	r2, #1
 80007f2:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < ButtonCount; i++) {
 80007f4:	1d7b      	adds	r3, r7, #5
 80007f6:	781a      	ldrb	r2, [r3, #0]
 80007f8:	1d7b      	adds	r3, r7, #5
 80007fa:	3201      	adds	r2, #1
 80007fc:	701a      	strb	r2, [r3, #0]
 80007fe:	1d7b      	adds	r3, r7, #5
 8000800:	781a      	ldrb	r2, [r3, #0]
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <pollAndProcessButtons+0xa8>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	429a      	cmp	r2, r3
 8000808:	d3dc      	bcc.n	80007c4 <pollAndProcessButtons+0x48>
		}
	}

	if(updateBinaryRepresentation)
 800080a:	1dbb      	adds	r3, r7, #6
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <pollAndProcessButtons+0x9a>
		writeBinaryRepresention();
 8000812:	f7ff ff33 	bl	800067c <writeBinaryRepresention>
}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	b002      	add	sp, #8
 800081c:	bd80      	pop	{r7, pc}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	20000018 	.word	0x20000018
 8000824:	20000048 	.word	0x20000048

08000828 <getNumberFromInvertedBits>:

uint8_t getNumberFromInvertedBits(uint8_t bit0, uint8_t bit1, uint8_t bit2, uint8_t bit3) {
 8000828:	b5b0      	push	{r4, r5, r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	0005      	movs	r5, r0
 8000830:	000c      	movs	r4, r1
 8000832:	0010      	movs	r0, r2
 8000834:	0019      	movs	r1, r3
 8000836:	1dfb      	adds	r3, r7, #7
 8000838:	1c2a      	adds	r2, r5, #0
 800083a:	701a      	strb	r2, [r3, #0]
 800083c:	1dbb      	adds	r3, r7, #6
 800083e:	1c22      	adds	r2, r4, #0
 8000840:	701a      	strb	r2, [r3, #0]
 8000842:	1d7b      	adds	r3, r7, #5
 8000844:	1c02      	adds	r2, r0, #0
 8000846:	701a      	strb	r2, [r3, #0]
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	1c0a      	adds	r2, r1, #0
 800084c:	701a      	strb	r2, [r3, #0]
	uint8_t res = 0;
 800084e:	200f      	movs	r0, #15
 8000850:	183b      	adds	r3, r7, r0
 8000852:	2200      	movs	r2, #0
 8000854:	701a      	strb	r2, [r3, #0]

	res|= bit0;
 8000856:	183b      	adds	r3, r7, r0
 8000858:	1839      	adds	r1, r7, r0
 800085a:	1dfa      	adds	r2, r7, #7
 800085c:	7809      	ldrb	r1, [r1, #0]
 800085e:	7812      	ldrb	r2, [r2, #0]
 8000860:	430a      	orrs	r2, r1
 8000862:	701a      	strb	r2, [r3, #0]
	res|= bit1 << 1;
 8000864:	1dbb      	adds	r3, r7, #6
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	b25a      	sxtb	r2, r3
 800086c:	0001      	movs	r1, r0
 800086e:	187b      	adds	r3, r7, r1
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	b25b      	sxtb	r3, r3
 8000874:	4313      	orrs	r3, r2
 8000876:	b25a      	sxtb	r2, r3
 8000878:	187b      	adds	r3, r7, r1
 800087a:	701a      	strb	r2, [r3, #0]
	res|= bit2 << 2;
 800087c:	1d7b      	adds	r3, r7, #5
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	b25a      	sxtb	r2, r3
 8000884:	187b      	adds	r3, r7, r1
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	b25b      	sxtb	r3, r3
 800088a:	4313      	orrs	r3, r2
 800088c:	b25a      	sxtb	r2, r3
 800088e:	187b      	adds	r3, r7, r1
 8000890:	701a      	strb	r2, [r3, #0]
	res|= bit3 << 3;
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	00db      	lsls	r3, r3, #3
 8000898:	b25a      	sxtb	r2, r3
 800089a:	187b      	adds	r3, r7, r1
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	b25b      	sxtb	r3, r3
 80008a0:	4313      	orrs	r3, r2
 80008a2:	b25a      	sxtb	r2, r3
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	701a      	strb	r2, [r3, #0]

	return ~res & 0xF;
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	43db      	mvns	r3, r3
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	220f      	movs	r2, #15
 80008b2:	4013      	ands	r3, r2
 80008b4:	b2db      	uxtb	r3, r3
}
 80008b6:	0018      	movs	r0, r3
 80008b8:	46bd      	mov	sp, r7
 80008ba:	b004      	add	sp, #16
 80008bc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080008c0 <readBinaryRepresention>:

void readBinaryRepresention() {
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	af00      	add	r7, sp, #0
	msNumber = getNumberFromInvertedBits(
		HAL_GPIO_ReadPin(GPIOA, MS_BINARY_1_Pin),
 80008c4:	2380      	movs	r3, #128	; 0x80
 80008c6:	021a      	lsls	r2, r3, #8
 80008c8:	23a0      	movs	r3, #160	; 0xa0
 80008ca:	05db      	lsls	r3, r3, #23
 80008cc:	0011      	movs	r1, r2
 80008ce:	0018      	movs	r0, r3
 80008d0:	f000 fc7a 	bl	80011c8 <HAL_GPIO_ReadPin>
 80008d4:	0003      	movs	r3, r0
 80008d6:	001c      	movs	r4, r3
		HAL_GPIO_ReadPin(GPIOA, MS_BINARY_2_Pin),
 80008d8:	2380      	movs	r3, #128	; 0x80
 80008da:	011a      	lsls	r2, r3, #4
 80008dc:	23a0      	movs	r3, #160	; 0xa0
 80008de:	05db      	lsls	r3, r3, #23
 80008e0:	0011      	movs	r1, r2
 80008e2:	0018      	movs	r0, r3
 80008e4:	f000 fc70 	bl	80011c8 <HAL_GPIO_ReadPin>
 80008e8:	0003      	movs	r3, r0
 80008ea:	001d      	movs	r5, r3
		HAL_GPIO_ReadPin(GPIOA, MS_BINARY_4_Pin),
 80008ec:	23a0      	movs	r3, #160	; 0xa0
 80008ee:	05db      	lsls	r3, r3, #23
 80008f0:	2120      	movs	r1, #32
 80008f2:	0018      	movs	r0, r3
 80008f4:	f000 fc68 	bl	80011c8 <HAL_GPIO_ReadPin>
 80008f8:	0003      	movs	r3, r0
 80008fa:	001e      	movs	r6, r3
		HAL_GPIO_ReadPin(GPIOA, MS_BINARY_8_Pin)
 80008fc:	2380      	movs	r3, #128	; 0x80
 80008fe:	015a      	lsls	r2, r3, #5
 8000900:	23a0      	movs	r3, #160	; 0xa0
 8000902:	05db      	lsls	r3, r3, #23
 8000904:	0011      	movs	r1, r2
 8000906:	0018      	movs	r0, r3
 8000908:	f000 fc5e 	bl	80011c8 <HAL_GPIO_ReadPin>
 800090c:	0003      	movs	r3, r0
	msNumber = getNumberFromInvertedBits(
 800090e:	0032      	movs	r2, r6
 8000910:	0029      	movs	r1, r5
 8000912:	0020      	movs	r0, r4
 8000914:	f7ff ff88 	bl	8000828 <getNumberFromInvertedBits>
 8000918:	0003      	movs	r3, r0
 800091a:	001a      	movs	r2, r3
 800091c:	4b18      	ldr	r3, [pc, #96]	; (8000980 <readBinaryRepresention+0xc0>)
 800091e:	701a      	strb	r2, [r3, #0]
	);
	lsNumber = getNumberFromInvertedBits(
		HAL_GPIO_ReadPin(GPIOA, LS_BINARY_1_Pin),
 8000920:	23a0      	movs	r3, #160	; 0xa0
 8000922:	05db      	lsls	r3, r3, #23
 8000924:	2110      	movs	r1, #16
 8000926:	0018      	movs	r0, r3
 8000928:	f000 fc4e 	bl	80011c8 <HAL_GPIO_ReadPin>
 800092c:	0003      	movs	r3, r0
 800092e:	001c      	movs	r4, r3
		HAL_GPIO_ReadPin(GPIOB, LS_BINARY_2_Pin),
 8000930:	2380      	movs	r3, #128	; 0x80
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	4a13      	ldr	r2, [pc, #76]	; (8000984 <readBinaryRepresention+0xc4>)
 8000936:	0019      	movs	r1, r3
 8000938:	0010      	movs	r0, r2
 800093a:	f000 fc45 	bl	80011c8 <HAL_GPIO_ReadPin>
 800093e:	0003      	movs	r3, r0
 8000940:	001d      	movs	r5, r3
		HAL_GPIO_ReadPin(GPIOB, LS_BINARY_4_Pin),
 8000942:	2380      	movs	r3, #128	; 0x80
 8000944:	00db      	lsls	r3, r3, #3
 8000946:	4a0f      	ldr	r2, [pc, #60]	; (8000984 <readBinaryRepresention+0xc4>)
 8000948:	0019      	movs	r1, r3
 800094a:	0010      	movs	r0, r2
 800094c:	f000 fc3c 	bl	80011c8 <HAL_GPIO_ReadPin>
 8000950:	0003      	movs	r3, r0
 8000952:	001e      	movs	r6, r3
		HAL_GPIO_ReadPin(GPIOA, LS_BINARY_8_Pin)
 8000954:	2380      	movs	r3, #128	; 0x80
 8000956:	005a      	lsls	r2, r3, #1
 8000958:	23a0      	movs	r3, #160	; 0xa0
 800095a:	05db      	lsls	r3, r3, #23
 800095c:	0011      	movs	r1, r2
 800095e:	0018      	movs	r0, r3
 8000960:	f000 fc32 	bl	80011c8 <HAL_GPIO_ReadPin>
 8000964:	0003      	movs	r3, r0
	lsNumber = getNumberFromInvertedBits(
 8000966:	0032      	movs	r2, r6
 8000968:	0029      	movs	r1, r5
 800096a:	0020      	movs	r0, r4
 800096c:	f7ff ff5c 	bl	8000828 <getNumberFromInvertedBits>
 8000970:	0003      	movs	r3, r0
 8000972:	001a      	movs	r2, r3
 8000974:	4b04      	ldr	r3, [pc, #16]	; (8000988 <readBinaryRepresention+0xc8>)
 8000976:	701a      	strb	r2, [r3, #0]
	);
}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	2000007b 	.word	0x2000007b
 8000984:	50000400 	.word	0x50000400
 8000988:	2000007a 	.word	0x2000007a

0800098c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000990:	f000 f952 	bl	8000c38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000994:	f000 f83a 	bl	8000a0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000998:	f7ff fc3e 	bl	8000218 <MX_GPIO_Init>
  MX_TIM14_Init();
 800099c:	f000 f8d4 	bl	8000b48 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  boardMode = HAL_GPIO_ReadPin(GPIOB, BOARD_MODE_Pin);
 80009a0:	4b16      	ldr	r3, [pc, #88]	; (80009fc <main+0x70>)
 80009a2:	2140      	movs	r1, #64	; 0x40
 80009a4:	0018      	movs	r0, r3
 80009a6:	f000 fc0f 	bl	80011c8 <HAL_GPIO_ReadPin>
 80009aa:	0003      	movs	r3, r0
 80009ac:	001a      	movs	r2, r3
 80009ae:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <main+0x74>)
 80009b0:	701a      	strb	r2, [r3, #0]

  if(boardMode == HEX_TO_BIN_MODE)
 80009b2:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <main+0x74>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d102      	bne.n	80009c0 <main+0x34>
	  MX_GPIO_RenitInHexToBinMode();
 80009ba:	f7ff fcc5 	bl	8000348 <MX_GPIO_RenitInHexToBinMode>
 80009be:	e001      	b.n	80009c4 <main+0x38>
  else
	  MX_GPIO_ReinitInBinToHexMode();
 80009c0:	f7ff fc76 	bl	80002b0 <MX_GPIO_ReinitInBinToHexMode>

  if(boardMode == HEX_TO_BIN_MODE)
 80009c4:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <main+0x74>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d102      	bne.n	80009d2 <main+0x46>
	  writeBinaryRepresention();
 80009cc:	f7ff fe56 	bl	800067c <writeBinaryRepresention>
 80009d0:	e001      	b.n	80009d6 <main+0x4a>
  else {
	  updateDisplayMode();
 80009d2:	f7ff fd0d 	bl	80003f0 <updateDisplayMode>
  }

  HAL_TIM_Base_Start_IT(&htim14);
 80009d6:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <main+0x78>)
 80009d8:	0018      	movs	r0, r3
 80009da:	f001 f961 	bl	8001ca0 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(boardMode == HEX_TO_BIN_MODE)
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <main+0x74>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d102      	bne.n	80009ec <main+0x60>
		  pollAndProcessButtons();
 80009e6:	f7ff fec9 	bl	800077c <pollAndProcessButtons>
 80009ea:	e7f8      	b.n	80009de <main+0x52>
	  else{
		  if(displayMode == FROM_BITS)
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <main+0x7c>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d1f4      	bne.n	80009de <main+0x52>
			  readBinaryRepresention();
 80009f4:	f7ff ff64 	bl	80008c0 <readBinaryRepresention>
	  if(boardMode == HEX_TO_BIN_MODE)
 80009f8:	e7f1      	b.n	80009de <main+0x52>
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	50000400 	.word	0x50000400
 8000a00:	20000079 	.word	0x20000079
 8000a04:	2000007c 	.word	0x2000007c
 8000a08:	20000078 	.word	0x20000078

08000a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a0c:	b590      	push	{r4, r7, lr}
 8000a0e:	b093      	sub	sp, #76	; 0x4c
 8000a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a12:	2414      	movs	r4, #20
 8000a14:	193b      	adds	r3, r7, r4
 8000a16:	0018      	movs	r0, r3
 8000a18:	2334      	movs	r3, #52	; 0x34
 8000a1a:	001a      	movs	r2, r3
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	f001 fb8f 	bl	8002140 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	0018      	movs	r0, r3
 8000a26:	2310      	movs	r3, #16
 8000a28:	001a      	movs	r2, r3
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	f001 fb88 	bl	8002140 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a30:	2380      	movs	r3, #128	; 0x80
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	0018      	movs	r0, r3
 8000a36:	f000 fc01 	bl	800123c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a3a:	193b      	adds	r3, r7, r4
 8000a3c:	2202      	movs	r2, #2
 8000a3e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a40:	193b      	adds	r3, r7, r4
 8000a42:	2280      	movs	r2, #128	; 0x80
 8000a44:	0052      	lsls	r2, r2, #1
 8000a46:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000a48:	193b      	adds	r3, r7, r4
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a4e:	193b      	adds	r3, r7, r4
 8000a50:	2240      	movs	r2, #64	; 0x40
 8000a52:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a54:	193b      	adds	r3, r7, r4
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5a:	193b      	adds	r3, r7, r4
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f000 fc2d 	bl	80012bc <HAL_RCC_OscConfig>
 8000a62:	1e03      	subs	r3, r0, #0
 8000a64:	d001      	beq.n	8000a6a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000a66:	f000 f819 	bl	8000a9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	2207      	movs	r2, #7
 8000a6e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	2200      	movs	r2, #0
 8000a74:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	2100      	movs	r1, #0
 8000a86:	0018      	movs	r0, r3
 8000a88:	f000 ff28 	bl	80018dc <HAL_RCC_ClockConfig>
 8000a8c:	1e03      	subs	r3, r0, #0
 8000a8e:	d001      	beq.n	8000a94 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000a90:	f000 f804 	bl	8000a9c <Error_Handler>
  }
}
 8000a94:	46c0      	nop			; (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	b013      	add	sp, #76	; 0x4c
 8000a9a:	bd90      	pop	{r4, r7, pc}

08000a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa0:	b672      	cpsid	i
}
 8000aa2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <Error_Handler+0x8>
	...

08000aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aae:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <HAL_MspInit+0x44>)
 8000ab0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <HAL_MspInit+0x44>)
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	430a      	orrs	r2, r1
 8000ab8:	641a      	str	r2, [r3, #64]	; 0x40
 8000aba:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <HAL_MspInit+0x44>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	2201      	movs	r2, #1
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac6:	4b09      	ldr	r3, [pc, #36]	; (8000aec <HAL_MspInit+0x44>)
 8000ac8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <HAL_MspInit+0x44>)
 8000acc:	2180      	movs	r1, #128	; 0x80
 8000ace:	0549      	lsls	r1, r1, #21
 8000ad0:	430a      	orrs	r2, r1
 8000ad2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ad4:	4b05      	ldr	r3, [pc, #20]	; (8000aec <HAL_MspInit+0x44>)
 8000ad6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ad8:	2380      	movs	r3, #128	; 0x80
 8000ada:	055b      	lsls	r3, r3, #21
 8000adc:	4013      	ands	r3, r2
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	b002      	add	sp, #8
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	40021000 	.word	0x40021000

08000af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <NMI_Handler+0x4>

08000af6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afa:	e7fe      	b.n	8000afa <HardFault_Handler+0x4>

08000afc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b00:	46c0      	nop			; (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b14:	f000 f8fa 	bl	8000d0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b18:	46c0      	nop			; (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */
  updateDisplay();
 8000b24:	f7ff fc78 	bl	8000418 <updateDisplay>
  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000b28:	4b03      	ldr	r3, [pc, #12]	; (8000b38 <TIM14_IRQHandler+0x18>)
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f001 f906 	bl	8001d3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000b30:	46c0      	nop			; (mov r8, r8)
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	2000007c 	.word	0x2000007c

08000b3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b40:	46c0      	nop			; (mov r8, r8)
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
	...

08000b48 <MX_TIM14_Init>:

TIM_HandleTypeDef htim14;

/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <MX_TIM14_Init+0x40>)
 8000b4e:	4a0f      	ldr	r2, [pc, #60]	; (8000b8c <MX_TIM14_Init+0x44>)
 8000b50:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000b52:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <MX_TIM14_Init+0x40>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b58:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <MX_TIM14_Init+0x40>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <MX_TIM14_Init+0x40>)
 8000b60:	4a0b      	ldr	r2, [pc, #44]	; (8000b90 <MX_TIM14_Init+0x48>)
 8000b62:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b64:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <MX_TIM14_Init+0x40>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b6a:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <MX_TIM14_Init+0x40>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <MX_TIM14_Init+0x40>)
 8000b72:	0018      	movs	r0, r3
 8000b74:	f001 f83c 	bl	8001bf0 <HAL_TIM_Base_Init>
 8000b78:	1e03      	subs	r3, r0, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000b7c:	f7ff ff8e 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000b80:	46c0      	nop			; (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	2000007c 	.word	0x2000007c
 8000b8c:	40002000 	.word	0x40002000
 8000b90:	0000ffff 	.word	0x0000ffff

08000b94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a0e      	ldr	r2, [pc, #56]	; (8000bdc <HAL_TIM_Base_MspInit+0x48>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d115      	bne.n	8000bd2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <HAL_TIM_Base_MspInit+0x4c>)
 8000ba8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000baa:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <HAL_TIM_Base_MspInit+0x4c>)
 8000bac:	2180      	movs	r1, #128	; 0x80
 8000bae:	0209      	lsls	r1, r1, #8
 8000bb0:	430a      	orrs	r2, r1
 8000bb2:	641a      	str	r2, [r3, #64]	; 0x40
 8000bb4:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <HAL_TIM_Base_MspInit+0x4c>)
 8000bb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bb8:	2380      	movs	r3, #128	; 0x80
 8000bba:	021b      	lsls	r3, r3, #8
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]

    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	2013      	movs	r0, #19
 8000bc8:	f000 f968 	bl	8000e9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000bcc:	2013      	movs	r0, #19
 8000bce:	f000 f97a 	bl	8000ec6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	b004      	add	sp, #16
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	40002000 	.word	0x40002000
 8000be0:	40021000 	.word	0x40021000

08000be4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000be4:	480d      	ldr	r0, [pc, #52]	; (8000c1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000be6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000be8:	f7ff ffa8 	bl	8000b3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bec:	480c      	ldr	r0, [pc, #48]	; (8000c20 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bee:	490d      	ldr	r1, [pc, #52]	; (8000c24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bf0:	4a0d      	ldr	r2, [pc, #52]	; (8000c28 <LoopForever+0xe>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf4:	e002      	b.n	8000bfc <LoopCopyDataInit>

08000bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bfa:	3304      	adds	r3, #4

08000bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c00:	d3f9      	bcc.n	8000bf6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c02:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c04:	4c0a      	ldr	r4, [pc, #40]	; (8000c30 <LoopForever+0x16>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c08:	e001      	b.n	8000c0e <LoopFillZerobss>

08000c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c0c:	3204      	adds	r2, #4

08000c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c10:	d3fb      	bcc.n	8000c0a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c12:	f001 fa71 	bl	80020f8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c16:	f7ff feb9 	bl	800098c <main>

08000c1a <LoopForever>:

LoopForever:
  b LoopForever
 8000c1a:	e7fe      	b.n	8000c1a <LoopForever>
  ldr   r0, =_estack
 8000c1c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000c20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c24:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c28:	080021b0 	.word	0x080021b0
  ldr r2, =_sbss
 8000c2c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c30:	200000cc 	.word	0x200000cc

08000c34 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c34:	e7fe      	b.n	8000c34 <ADC1_IRQHandler>
	...

08000c38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c3e:	1dfb      	adds	r3, r7, #7
 8000c40:	2200      	movs	r2, #0
 8000c42:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c44:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <HAL_Init+0x3c>)
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <HAL_Init+0x3c>)
 8000c4a:	2180      	movs	r1, #128	; 0x80
 8000c4c:	0049      	lsls	r1, r1, #1
 8000c4e:	430a      	orrs	r2, r1
 8000c50:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c52:	2003      	movs	r0, #3
 8000c54:	f000 f810 	bl	8000c78 <HAL_InitTick>
 8000c58:	1e03      	subs	r3, r0, #0
 8000c5a:	d003      	beq.n	8000c64 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000c5c:	1dfb      	adds	r3, r7, #7
 8000c5e:	2201      	movs	r2, #1
 8000c60:	701a      	strb	r2, [r3, #0]
 8000c62:	e001      	b.n	8000c68 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000c64:	f7ff ff20 	bl	8000aa8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c68:	1dfb      	adds	r3, r7, #7
 8000c6a:	781b      	ldrb	r3, [r3, #0]
}
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	b002      	add	sp, #8
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40022000 	.word	0x40022000

08000c78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c78:	b590      	push	{r4, r7, lr}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c80:	230f      	movs	r3, #15
 8000c82:	18fb      	adds	r3, r7, r3
 8000c84:	2200      	movs	r2, #0
 8000c86:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000c88:	4b1d      	ldr	r3, [pc, #116]	; (8000d00 <HAL_InitTick+0x88>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d02b      	beq.n	8000ce8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000c90:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <HAL_InitTick+0x8c>)
 8000c92:	681c      	ldr	r4, [r3, #0]
 8000c94:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <HAL_InitTick+0x88>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	0019      	movs	r1, r3
 8000c9a:	23fa      	movs	r3, #250	; 0xfa
 8000c9c:	0098      	lsls	r0, r3, #2
 8000c9e:	f7ff fa2f 	bl	8000100 <__udivsi3>
 8000ca2:	0003      	movs	r3, r0
 8000ca4:	0019      	movs	r1, r3
 8000ca6:	0020      	movs	r0, r4
 8000ca8:	f7ff fa2a 	bl	8000100 <__udivsi3>
 8000cac:	0003      	movs	r3, r0
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f000 f919 	bl	8000ee6 <HAL_SYSTICK_Config>
 8000cb4:	1e03      	subs	r3, r0, #0
 8000cb6:	d112      	bne.n	8000cde <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2b03      	cmp	r3, #3
 8000cbc:	d80a      	bhi.n	8000cd4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	425b      	negs	r3, r3
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	f000 f8e8 	bl	8000e9c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ccc:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <HAL_InitTick+0x90>)
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	e00d      	b.n	8000cf0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000cd4:	230f      	movs	r3, #15
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	2201      	movs	r2, #1
 8000cda:	701a      	strb	r2, [r3, #0]
 8000cdc:	e008      	b.n	8000cf0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cde:	230f      	movs	r3, #15
 8000ce0:	18fb      	adds	r3, r7, r3
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	701a      	strb	r2, [r3, #0]
 8000ce6:	e003      	b.n	8000cf0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ce8:	230f      	movs	r3, #15
 8000cea:	18fb      	adds	r3, r7, r3
 8000cec:	2201      	movs	r2, #1
 8000cee:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000cf0:	230f      	movs	r3, #15
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	781b      	ldrb	r3, [r3, #0]
}
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	b005      	add	sp, #20
 8000cfc:	bd90      	pop	{r4, r7, pc}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	20000058 	.word	0x20000058
 8000d04:	20000050 	.word	0x20000050
 8000d08:	20000054 	.word	0x20000054

08000d0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d10:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <HAL_IncTick+0x1c>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	001a      	movs	r2, r3
 8000d16:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <HAL_IncTick+0x20>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	18d2      	adds	r2, r2, r3
 8000d1c:	4b03      	ldr	r3, [pc, #12]	; (8000d2c <HAL_IncTick+0x20>)
 8000d1e:	601a      	str	r2, [r3, #0]
}
 8000d20:	46c0      	nop			; (mov r8, r8)
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	20000058 	.word	0x20000058
 8000d2c:	200000c8 	.word	0x200000c8

08000d30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  return uwTick;
 8000d34:	4b02      	ldr	r3, [pc, #8]	; (8000d40 <HAL_GetTick+0x10>)
 8000d36:	681b      	ldr	r3, [r3, #0]
}
 8000d38:	0018      	movs	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	200000c8 	.word	0x200000c8

08000d44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	0002      	movs	r2, r0
 8000d4c:	1dfb      	adds	r3, r7, #7
 8000d4e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d50:	1dfb      	adds	r3, r7, #7
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b7f      	cmp	r3, #127	; 0x7f
 8000d56:	d809      	bhi.n	8000d6c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d58:	1dfb      	adds	r3, r7, #7
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	001a      	movs	r2, r3
 8000d5e:	231f      	movs	r3, #31
 8000d60:	401a      	ands	r2, r3
 8000d62:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <__NVIC_EnableIRQ+0x30>)
 8000d64:	2101      	movs	r1, #1
 8000d66:	4091      	lsls	r1, r2
 8000d68:	000a      	movs	r2, r1
 8000d6a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000d6c:	46c0      	nop			; (mov r8, r8)
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	b002      	add	sp, #8
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	e000e100 	.word	0xe000e100

08000d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d78:	b590      	push	{r4, r7, lr}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	0002      	movs	r2, r0
 8000d80:	6039      	str	r1, [r7, #0]
 8000d82:	1dfb      	adds	r3, r7, #7
 8000d84:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d86:	1dfb      	adds	r3, r7, #7
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2b7f      	cmp	r3, #127	; 0x7f
 8000d8c:	d828      	bhi.n	8000de0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d8e:	4a2f      	ldr	r2, [pc, #188]	; (8000e4c <__NVIC_SetPriority+0xd4>)
 8000d90:	1dfb      	adds	r3, r7, #7
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	b25b      	sxtb	r3, r3
 8000d96:	089b      	lsrs	r3, r3, #2
 8000d98:	33c0      	adds	r3, #192	; 0xc0
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	589b      	ldr	r3, [r3, r2]
 8000d9e:	1dfa      	adds	r2, r7, #7
 8000da0:	7812      	ldrb	r2, [r2, #0]
 8000da2:	0011      	movs	r1, r2
 8000da4:	2203      	movs	r2, #3
 8000da6:	400a      	ands	r2, r1
 8000da8:	00d2      	lsls	r2, r2, #3
 8000daa:	21ff      	movs	r1, #255	; 0xff
 8000dac:	4091      	lsls	r1, r2
 8000dae:	000a      	movs	r2, r1
 8000db0:	43d2      	mvns	r2, r2
 8000db2:	401a      	ands	r2, r3
 8000db4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	019b      	lsls	r3, r3, #6
 8000dba:	22ff      	movs	r2, #255	; 0xff
 8000dbc:	401a      	ands	r2, r3
 8000dbe:	1dfb      	adds	r3, r7, #7
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	4003      	ands	r3, r0
 8000dc8:	00db      	lsls	r3, r3, #3
 8000dca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dcc:	481f      	ldr	r0, [pc, #124]	; (8000e4c <__NVIC_SetPriority+0xd4>)
 8000dce:	1dfb      	adds	r3, r7, #7
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	b25b      	sxtb	r3, r3
 8000dd4:	089b      	lsrs	r3, r3, #2
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	33c0      	adds	r3, #192	; 0xc0
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000dde:	e031      	b.n	8000e44 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000de0:	4a1b      	ldr	r2, [pc, #108]	; (8000e50 <__NVIC_SetPriority+0xd8>)
 8000de2:	1dfb      	adds	r3, r7, #7
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	0019      	movs	r1, r3
 8000de8:	230f      	movs	r3, #15
 8000dea:	400b      	ands	r3, r1
 8000dec:	3b08      	subs	r3, #8
 8000dee:	089b      	lsrs	r3, r3, #2
 8000df0:	3306      	adds	r3, #6
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	18d3      	adds	r3, r2, r3
 8000df6:	3304      	adds	r3, #4
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	1dfa      	adds	r2, r7, #7
 8000dfc:	7812      	ldrb	r2, [r2, #0]
 8000dfe:	0011      	movs	r1, r2
 8000e00:	2203      	movs	r2, #3
 8000e02:	400a      	ands	r2, r1
 8000e04:	00d2      	lsls	r2, r2, #3
 8000e06:	21ff      	movs	r1, #255	; 0xff
 8000e08:	4091      	lsls	r1, r2
 8000e0a:	000a      	movs	r2, r1
 8000e0c:	43d2      	mvns	r2, r2
 8000e0e:	401a      	ands	r2, r3
 8000e10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	019b      	lsls	r3, r3, #6
 8000e16:	22ff      	movs	r2, #255	; 0xff
 8000e18:	401a      	ands	r2, r3
 8000e1a:	1dfb      	adds	r3, r7, #7
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	0018      	movs	r0, r3
 8000e20:	2303      	movs	r3, #3
 8000e22:	4003      	ands	r3, r0
 8000e24:	00db      	lsls	r3, r3, #3
 8000e26:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e28:	4809      	ldr	r0, [pc, #36]	; (8000e50 <__NVIC_SetPriority+0xd8>)
 8000e2a:	1dfb      	adds	r3, r7, #7
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	001c      	movs	r4, r3
 8000e30:	230f      	movs	r3, #15
 8000e32:	4023      	ands	r3, r4
 8000e34:	3b08      	subs	r3, #8
 8000e36:	089b      	lsrs	r3, r3, #2
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	3306      	adds	r3, #6
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	18c3      	adds	r3, r0, r3
 8000e40:	3304      	adds	r3, #4
 8000e42:	601a      	str	r2, [r3, #0]
}
 8000e44:	46c0      	nop			; (mov r8, r8)
 8000e46:	46bd      	mov	sp, r7
 8000e48:	b003      	add	sp, #12
 8000e4a:	bd90      	pop	{r4, r7, pc}
 8000e4c:	e000e100 	.word	0xe000e100
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	1e5a      	subs	r2, r3, #1
 8000e60:	2380      	movs	r3, #128	; 0x80
 8000e62:	045b      	lsls	r3, r3, #17
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d301      	bcc.n	8000e6c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e68:	2301      	movs	r3, #1
 8000e6a:	e010      	b.n	8000e8e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e6c:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <SysTick_Config+0x44>)
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	3a01      	subs	r2, #1
 8000e72:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e74:	2301      	movs	r3, #1
 8000e76:	425b      	negs	r3, r3
 8000e78:	2103      	movs	r1, #3
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f7ff ff7c 	bl	8000d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e80:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <SysTick_Config+0x44>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e86:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <SysTick_Config+0x44>)
 8000e88:	2207      	movs	r2, #7
 8000e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	0018      	movs	r0, r3
 8000e90:	46bd      	mov	sp, r7
 8000e92:	b002      	add	sp, #8
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	e000e010 	.word	0xe000e010

08000e9c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60b9      	str	r1, [r7, #8]
 8000ea4:	607a      	str	r2, [r7, #4]
 8000ea6:	210f      	movs	r1, #15
 8000ea8:	187b      	adds	r3, r7, r1
 8000eaa:	1c02      	adds	r2, r0, #0
 8000eac:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000eae:	68ba      	ldr	r2, [r7, #8]
 8000eb0:	187b      	adds	r3, r7, r1
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	b25b      	sxtb	r3, r3
 8000eb6:	0011      	movs	r1, r2
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f7ff ff5d 	bl	8000d78 <__NVIC_SetPriority>
}
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	b004      	add	sp, #16
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	0002      	movs	r2, r0
 8000ece:	1dfb      	adds	r3, r7, #7
 8000ed0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ed2:	1dfb      	adds	r3, r7, #7
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	b25b      	sxtb	r3, r3
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f7ff ff33 	bl	8000d44 <__NVIC_EnableIRQ>
}
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	b002      	add	sp, #8
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f7ff ffaf 	bl	8000e54 <SysTick_Config>
 8000ef6:	0003      	movs	r3, r0
}
 8000ef8:	0018      	movs	r0, r3
 8000efa:	46bd      	mov	sp, r7
 8000efc:	b002      	add	sp, #8
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f0e:	e147      	b.n	80011a0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2101      	movs	r1, #1
 8000f16:	697a      	ldr	r2, [r7, #20]
 8000f18:	4091      	lsls	r1, r2
 8000f1a:	000a      	movs	r2, r1
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d100      	bne.n	8000f28 <HAL_GPIO_Init+0x28>
 8000f26:	e138      	b.n	800119a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	4013      	ands	r3, r2
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d005      	beq.n	8000f40 <HAL_GPIO_Init+0x40>
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	2203      	movs	r2, #3
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d130      	bne.n	8000fa2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	2203      	movs	r2, #3
 8000f4c:	409a      	lsls	r2, r3
 8000f4e:	0013      	movs	r3, r2
 8000f50:	43da      	mvns	r2, r3
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	4013      	ands	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	68da      	ldr	r2, [r3, #12]
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	409a      	lsls	r2, r3
 8000f62:	0013      	movs	r3, r2
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f76:	2201      	movs	r2, #1
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	409a      	lsls	r2, r3
 8000f7c:	0013      	movs	r3, r2
 8000f7e:	43da      	mvns	r2, r3
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	4013      	ands	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	091b      	lsrs	r3, r3, #4
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	401a      	ands	r2, r3
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	409a      	lsls	r2, r3
 8000f94:	0013      	movs	r3, r2
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	4013      	ands	r3, r2
 8000faa:	2b03      	cmp	r3, #3
 8000fac:	d017      	beq.n	8000fde <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	68db      	ldr	r3, [r3, #12]
 8000fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	2203      	movs	r2, #3
 8000fba:	409a      	lsls	r2, r3
 8000fbc:	0013      	movs	r3, r2
 8000fbe:	43da      	mvns	r2, r3
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	689a      	ldr	r2, [r3, #8]
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	409a      	lsls	r2, r3
 8000fd0:	0013      	movs	r3, r2
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d123      	bne.n	8001032 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	08da      	lsrs	r2, r3, #3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3208      	adds	r2, #8
 8000ff2:	0092      	lsls	r2, r2, #2
 8000ff4:	58d3      	ldr	r3, [r2, r3]
 8000ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	2207      	movs	r2, #7
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	220f      	movs	r2, #15
 8001002:	409a      	lsls	r2, r3
 8001004:	0013      	movs	r3, r2
 8001006:	43da      	mvns	r2, r3
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	4013      	ands	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	691a      	ldr	r2, [r3, #16]
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	2107      	movs	r1, #7
 8001016:	400b      	ands	r3, r1
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	409a      	lsls	r2, r3
 800101c:	0013      	movs	r3, r2
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	4313      	orrs	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	08da      	lsrs	r2, r3, #3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3208      	adds	r2, #8
 800102c:	0092      	lsls	r2, r2, #2
 800102e:	6939      	ldr	r1, [r7, #16]
 8001030:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	2203      	movs	r2, #3
 800103e:	409a      	lsls	r2, r3
 8001040:	0013      	movs	r3, r2
 8001042:	43da      	mvns	r2, r3
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	4013      	ands	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	2203      	movs	r2, #3
 8001050:	401a      	ands	r2, r3
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	409a      	lsls	r2, r3
 8001058:	0013      	movs	r3, r2
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	4313      	orrs	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685a      	ldr	r2, [r3, #4]
 800106a:	23c0      	movs	r3, #192	; 0xc0
 800106c:	029b      	lsls	r3, r3, #10
 800106e:	4013      	ands	r3, r2
 8001070:	d100      	bne.n	8001074 <HAL_GPIO_Init+0x174>
 8001072:	e092      	b.n	800119a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001074:	4a50      	ldr	r2, [pc, #320]	; (80011b8 <HAL_GPIO_Init+0x2b8>)
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	089b      	lsrs	r3, r3, #2
 800107a:	3318      	adds	r3, #24
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	589b      	ldr	r3, [r3, r2]
 8001080:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	2203      	movs	r2, #3
 8001086:	4013      	ands	r3, r2
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	220f      	movs	r2, #15
 800108c:	409a      	lsls	r2, r3
 800108e:	0013      	movs	r3, r2
 8001090:	43da      	mvns	r2, r3
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	4013      	ands	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	23a0      	movs	r3, #160	; 0xa0
 800109c:	05db      	lsls	r3, r3, #23
 800109e:	429a      	cmp	r2, r3
 80010a0:	d013      	beq.n	80010ca <HAL_GPIO_Init+0x1ca>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a45      	ldr	r2, [pc, #276]	; (80011bc <HAL_GPIO_Init+0x2bc>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d00d      	beq.n	80010c6 <HAL_GPIO_Init+0x1c6>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a44      	ldr	r2, [pc, #272]	; (80011c0 <HAL_GPIO_Init+0x2c0>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d007      	beq.n	80010c2 <HAL_GPIO_Init+0x1c2>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a43      	ldr	r2, [pc, #268]	; (80011c4 <HAL_GPIO_Init+0x2c4>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d101      	bne.n	80010be <HAL_GPIO_Init+0x1be>
 80010ba:	2303      	movs	r3, #3
 80010bc:	e006      	b.n	80010cc <HAL_GPIO_Init+0x1cc>
 80010be:	2305      	movs	r3, #5
 80010c0:	e004      	b.n	80010cc <HAL_GPIO_Init+0x1cc>
 80010c2:	2302      	movs	r3, #2
 80010c4:	e002      	b.n	80010cc <HAL_GPIO_Init+0x1cc>
 80010c6:	2301      	movs	r3, #1
 80010c8:	e000      	b.n	80010cc <HAL_GPIO_Init+0x1cc>
 80010ca:	2300      	movs	r3, #0
 80010cc:	697a      	ldr	r2, [r7, #20]
 80010ce:	2103      	movs	r1, #3
 80010d0:	400a      	ands	r2, r1
 80010d2:	00d2      	lsls	r2, r2, #3
 80010d4:	4093      	lsls	r3, r2
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80010dc:	4936      	ldr	r1, [pc, #216]	; (80011b8 <HAL_GPIO_Init+0x2b8>)
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	089b      	lsrs	r3, r3, #2
 80010e2:	3318      	adds	r3, #24
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010ea:	4b33      	ldr	r3, [pc, #204]	; (80011b8 <HAL_GPIO_Init+0x2b8>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	43da      	mvns	r2, r3
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	4013      	ands	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685a      	ldr	r2, [r3, #4]
 80010fe:	2380      	movs	r3, #128	; 0x80
 8001100:	035b      	lsls	r3, r3, #13
 8001102:	4013      	ands	r3, r2
 8001104:	d003      	beq.n	800110e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4313      	orrs	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800110e:	4b2a      	ldr	r3, [pc, #168]	; (80011b8 <HAL_GPIO_Init+0x2b8>)
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001114:	4b28      	ldr	r3, [pc, #160]	; (80011b8 <HAL_GPIO_Init+0x2b8>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	43da      	mvns	r2, r3
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685a      	ldr	r2, [r3, #4]
 8001128:	2380      	movs	r3, #128	; 0x80
 800112a:	039b      	lsls	r3, r3, #14
 800112c:	4013      	ands	r3, r2
 800112e:	d003      	beq.n	8001138 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001138:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <HAL_GPIO_Init+0x2b8>)
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800113e:	4a1e      	ldr	r2, [pc, #120]	; (80011b8 <HAL_GPIO_Init+0x2b8>)
 8001140:	2384      	movs	r3, #132	; 0x84
 8001142:	58d3      	ldr	r3, [r2, r3]
 8001144:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	43da      	mvns	r2, r3
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	4013      	ands	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685a      	ldr	r2, [r3, #4]
 8001154:	2380      	movs	r3, #128	; 0x80
 8001156:	029b      	lsls	r3, r3, #10
 8001158:	4013      	ands	r3, r2
 800115a:	d003      	beq.n	8001164 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	4313      	orrs	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001164:	4914      	ldr	r1, [pc, #80]	; (80011b8 <HAL_GPIO_Init+0x2b8>)
 8001166:	2284      	movs	r2, #132	; 0x84
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800116c:	4a12      	ldr	r2, [pc, #72]	; (80011b8 <HAL_GPIO_Init+0x2b8>)
 800116e:	2380      	movs	r3, #128	; 0x80
 8001170:	58d3      	ldr	r3, [r2, r3]
 8001172:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	43da      	mvns	r2, r3
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	4013      	ands	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685a      	ldr	r2, [r3, #4]
 8001182:	2380      	movs	r3, #128	; 0x80
 8001184:	025b      	lsls	r3, r3, #9
 8001186:	4013      	ands	r3, r2
 8001188:	d003      	beq.n	8001192 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4313      	orrs	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001192:	4909      	ldr	r1, [pc, #36]	; (80011b8 <HAL_GPIO_Init+0x2b8>)
 8001194:	2280      	movs	r2, #128	; 0x80
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	3301      	adds	r3, #1
 800119e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	40da      	lsrs	r2, r3
 80011a8:	1e13      	subs	r3, r2, #0
 80011aa:	d000      	beq.n	80011ae <HAL_GPIO_Init+0x2ae>
 80011ac:	e6b0      	b.n	8000f10 <HAL_GPIO_Init+0x10>
  }
}
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	46c0      	nop			; (mov r8, r8)
 80011b2:	46bd      	mov	sp, r7
 80011b4:	b006      	add	sp, #24
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40021800 	.word	0x40021800
 80011bc:	50000400 	.word	0x50000400
 80011c0:	50000800 	.word	0x50000800
 80011c4:	50000c00 	.word	0x50000c00

080011c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	000a      	movs	r2, r1
 80011d2:	1cbb      	adds	r3, r7, #2
 80011d4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	691b      	ldr	r3, [r3, #16]
 80011da:	1cba      	adds	r2, r7, #2
 80011dc:	8812      	ldrh	r2, [r2, #0]
 80011de:	4013      	ands	r3, r2
 80011e0:	d004      	beq.n	80011ec <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80011e2:	230f      	movs	r3, #15
 80011e4:	18fb      	adds	r3, r7, r3
 80011e6:	2201      	movs	r2, #1
 80011e8:	701a      	strb	r2, [r3, #0]
 80011ea:	e003      	b.n	80011f4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011ec:	230f      	movs	r3, #15
 80011ee:	18fb      	adds	r3, r7, r3
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80011f4:	230f      	movs	r3, #15
 80011f6:	18fb      	adds	r3, r7, r3
 80011f8:	781b      	ldrb	r3, [r3, #0]
}
 80011fa:	0018      	movs	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	b004      	add	sp, #16
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b082      	sub	sp, #8
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
 800120a:	0008      	movs	r0, r1
 800120c:	0011      	movs	r1, r2
 800120e:	1cbb      	adds	r3, r7, #2
 8001210:	1c02      	adds	r2, r0, #0
 8001212:	801a      	strh	r2, [r3, #0]
 8001214:	1c7b      	adds	r3, r7, #1
 8001216:	1c0a      	adds	r2, r1, #0
 8001218:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800121a:	1c7b      	adds	r3, r7, #1
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d004      	beq.n	800122c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001222:	1cbb      	adds	r3, r7, #2
 8001224:	881a      	ldrh	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800122a:	e003      	b.n	8001234 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800122c:	1cbb      	adds	r3, r7, #2
 800122e:	881a      	ldrh	r2, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001234:	46c0      	nop			; (mov r8, r8)
 8001236:	46bd      	mov	sp, r7
 8001238:	b002      	add	sp, #8
 800123a:	bd80      	pop	{r7, pc}

0800123c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001244:	4b19      	ldr	r3, [pc, #100]	; (80012ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a19      	ldr	r2, [pc, #100]	; (80012b0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800124a:	4013      	ands	r3, r2
 800124c:	0019      	movs	r1, r3
 800124e:	4b17      	ldr	r3, [pc, #92]	; (80012ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	430a      	orrs	r2, r1
 8001254:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	2380      	movs	r3, #128	; 0x80
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	429a      	cmp	r2, r3
 800125e:	d11f      	bne.n	80012a0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001260:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	0013      	movs	r3, r2
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	189b      	adds	r3, r3, r2
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	4912      	ldr	r1, [pc, #72]	; (80012b8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800126e:	0018      	movs	r0, r3
 8001270:	f7fe ff46 	bl	8000100 <__udivsi3>
 8001274:	0003      	movs	r3, r0
 8001276:	3301      	adds	r3, #1
 8001278:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800127a:	e008      	b.n	800128e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	3b01      	subs	r3, #1
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	e001      	b.n	800128e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e009      	b.n	80012a2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800128e:	4b07      	ldr	r3, [pc, #28]	; (80012ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001290:	695a      	ldr	r2, [r3, #20]
 8001292:	2380      	movs	r3, #128	; 0x80
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	401a      	ands	r2, r3
 8001298:	2380      	movs	r3, #128	; 0x80
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	429a      	cmp	r2, r3
 800129e:	d0ed      	beq.n	800127c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	0018      	movs	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	b004      	add	sp, #16
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	40007000 	.word	0x40007000
 80012b0:	fffff9ff 	.word	0xfffff9ff
 80012b4:	20000050 	.word	0x20000050
 80012b8:	000f4240 	.word	0x000f4240

080012bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b088      	sub	sp, #32
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d101      	bne.n	80012ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e2f3      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2201      	movs	r2, #1
 80012d4:	4013      	ands	r3, r2
 80012d6:	d100      	bne.n	80012da <HAL_RCC_OscConfig+0x1e>
 80012d8:	e07c      	b.n	80013d4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012da:	4bc3      	ldr	r3, [pc, #780]	; (80015e8 <HAL_RCC_OscConfig+0x32c>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	2238      	movs	r2, #56	; 0x38
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012e4:	4bc0      	ldr	r3, [pc, #768]	; (80015e8 <HAL_RCC_OscConfig+0x32c>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	2203      	movs	r2, #3
 80012ea:	4013      	ands	r3, r2
 80012ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	2b10      	cmp	r3, #16
 80012f2:	d102      	bne.n	80012fa <HAL_RCC_OscConfig+0x3e>
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	2b03      	cmp	r3, #3
 80012f8:	d002      	beq.n	8001300 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	2b08      	cmp	r3, #8
 80012fe:	d10b      	bne.n	8001318 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001300:	4bb9      	ldr	r3, [pc, #740]	; (80015e8 <HAL_RCC_OscConfig+0x32c>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	2380      	movs	r3, #128	; 0x80
 8001306:	029b      	lsls	r3, r3, #10
 8001308:	4013      	ands	r3, r2
 800130a:	d062      	beq.n	80013d2 <HAL_RCC_OscConfig+0x116>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d15e      	bne.n	80013d2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e2ce      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	025b      	lsls	r3, r3, #9
 8001320:	429a      	cmp	r2, r3
 8001322:	d107      	bne.n	8001334 <HAL_RCC_OscConfig+0x78>
 8001324:	4bb0      	ldr	r3, [pc, #704]	; (80015e8 <HAL_RCC_OscConfig+0x32c>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4baf      	ldr	r3, [pc, #700]	; (80015e8 <HAL_RCC_OscConfig+0x32c>)
 800132a:	2180      	movs	r1, #128	; 0x80
 800132c:	0249      	lsls	r1, r1, #9
 800132e:	430a      	orrs	r2, r1
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	e020      	b.n	8001376 <HAL_RCC_OscConfig+0xba>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685a      	ldr	r2, [r3, #4]
 8001338:	23a0      	movs	r3, #160	; 0xa0
 800133a:	02db      	lsls	r3, r3, #11
 800133c:	429a      	cmp	r2, r3
 800133e:	d10e      	bne.n	800135e <HAL_RCC_OscConfig+0xa2>
 8001340:	4ba9      	ldr	r3, [pc, #676]	; (80015e8 <HAL_RCC_OscConfig+0x32c>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4ba8      	ldr	r3, [pc, #672]	; (80015e8 <HAL_RCC_OscConfig+0x32c>)
 8001346:	2180      	movs	r1, #128	; 0x80
 8001348:	02c9      	lsls	r1, r1, #11
 800134a:	430a      	orrs	r2, r1
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	4ba6      	ldr	r3, [pc, #664]	; (80015e8 <HAL_RCC_OscConfig+0x32c>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	4ba5      	ldr	r3, [pc, #660]	; (80015e8 <HAL_RCC_OscConfig+0x32c>)
 8001354:	2180      	movs	r1, #128	; 0x80
 8001356:	0249      	lsls	r1, r1, #9
 8001358:	430a      	orrs	r2, r1
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	e00b      	b.n	8001376 <HAL_RCC_OscConfig+0xba>
 800135e:	4ba2      	ldr	r3, [pc, #648]	; (80015e8 <HAL_RCC_OscConfig+0x32c>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	4ba1      	ldr	r3, [pc, #644]	; (80015e8 <HAL_RCC_OscConfig+0x32c>)
 8001364:	49a1      	ldr	r1, [pc, #644]	; (80015ec <HAL_RCC_OscConfig+0x330>)
 8001366:	400a      	ands	r2, r1
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	4b9f      	ldr	r3, [pc, #636]	; (80015e8 <HAL_RCC_OscConfig+0x32c>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	4b9e      	ldr	r3, [pc, #632]	; (80015e8 <HAL_RCC_OscConfig+0x32c>)
 8001370:	499f      	ldr	r1, [pc, #636]	; (80015f0 <HAL_RCC_OscConfig+0x334>)
 8001372:	400a      	ands	r2, r1
 8001374:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d014      	beq.n	80013a8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137e:	f7ff fcd7 	bl	8000d30 <HAL_GetTick>
 8001382:	0003      	movs	r3, r0
 8001384:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001388:	f7ff fcd2 	bl	8000d30 <HAL_GetTick>
 800138c:	0002      	movs	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b64      	cmp	r3, #100	; 0x64
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e28d      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800139a:	4b93      	ldr	r3, [pc, #588]	; (80015e8 <HAL_RCC_OscConfig+0x32c>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	2380      	movs	r3, #128	; 0x80
 80013a0:	029b      	lsls	r3, r3, #10
 80013a2:	4013      	ands	r3, r2
 80013a4:	d0f0      	beq.n	8001388 <HAL_RCC_OscConfig+0xcc>
 80013a6:	e015      	b.n	80013d4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a8:	f7ff fcc2 	bl	8000d30 <HAL_GetTick>
 80013ac:	0003      	movs	r3, r0
 80013ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013b0:	e008      	b.n	80013c4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013b2:	f7ff fcbd 	bl	8000d30 <HAL_GetTick>
 80013b6:	0002      	movs	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b64      	cmp	r3, #100	; 0x64
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e278      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013c4:	4b88      	ldr	r3, [pc, #544]	; (80015e8 <HAL_RCC_OscConfig+0x32c>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	2380      	movs	r3, #128	; 0x80
 80013ca:	029b      	lsls	r3, r3, #10
 80013cc:	4013      	ands	r3, r2
 80013ce:	d1f0      	bne.n	80013b2 <HAL_RCC_OscConfig+0xf6>
 80013d0:	e000      	b.n	80013d4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2202      	movs	r2, #2
 80013da:	4013      	ands	r3, r2
 80013dc:	d100      	bne.n	80013e0 <HAL_RCC_OscConfig+0x124>
 80013de:	e099      	b.n	8001514 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013e0:	4b81      	ldr	r3, [pc, #516]	; (80015e8 <HAL_RCC_OscConfig+0x32c>)
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	2238      	movs	r2, #56	; 0x38
 80013e6:	4013      	ands	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013ea:	4b7f      	ldr	r3, [pc, #508]	; (80015e8 <HAL_RCC_OscConfig+0x32c>)
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	2203      	movs	r2, #3
 80013f0:	4013      	ands	r3, r2
 80013f2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	2b10      	cmp	r3, #16
 80013f8:	d102      	bne.n	8001400 <HAL_RCC_OscConfig+0x144>
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d002      	beq.n	8001406 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d135      	bne.n	8001472 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001406:	4b78      	ldr	r3, [pc, #480]	; (80015e8 <HAL_RCC_OscConfig+0x32c>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	2380      	movs	r3, #128	; 0x80
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	4013      	ands	r3, r2
 8001410:	d005      	beq.n	800141e <HAL_RCC_OscConfig+0x162>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d101      	bne.n	800141e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e24b      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800141e:	4b72      	ldr	r3, [pc, #456]	; (80015e8 <HAL_RCC_OscConfig+0x32c>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	4a74      	ldr	r2, [pc, #464]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 8001424:	4013      	ands	r3, r2
 8001426:	0019      	movs	r1, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	695b      	ldr	r3, [r3, #20]
 800142c:	021a      	lsls	r2, r3, #8
 800142e:	4b6e      	ldr	r3, [pc, #440]	; (80015e8 <HAL_RCC_OscConfig+0x32c>)
 8001430:	430a      	orrs	r2, r1
 8001432:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d112      	bne.n	8001460 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800143a:	4b6b      	ldr	r3, [pc, #428]	; (80015e8 <HAL_RCC_OscConfig+0x32c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a6e      	ldr	r2, [pc, #440]	; (80015f8 <HAL_RCC_OscConfig+0x33c>)
 8001440:	4013      	ands	r3, r2
 8001442:	0019      	movs	r1, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	691a      	ldr	r2, [r3, #16]
 8001448:	4b67      	ldr	r3, [pc, #412]	; (80015e8 <HAL_RCC_OscConfig+0x32c>)
 800144a:	430a      	orrs	r2, r1
 800144c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800144e:	4b66      	ldr	r3, [pc, #408]	; (80015e8 <HAL_RCC_OscConfig+0x32c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	0adb      	lsrs	r3, r3, #11
 8001454:	2207      	movs	r2, #7
 8001456:	4013      	ands	r3, r2
 8001458:	4a68      	ldr	r2, [pc, #416]	; (80015fc <HAL_RCC_OscConfig+0x340>)
 800145a:	40da      	lsrs	r2, r3
 800145c:	4b68      	ldr	r3, [pc, #416]	; (8001600 <HAL_RCC_OscConfig+0x344>)
 800145e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001460:	4b68      	ldr	r3, [pc, #416]	; (8001604 <HAL_RCC_OscConfig+0x348>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	0018      	movs	r0, r3
 8001466:	f7ff fc07 	bl	8000c78 <HAL_InitTick>
 800146a:	1e03      	subs	r3, r0, #0
 800146c:	d051      	beq.n	8001512 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e221      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d030      	beq.n	80014dc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800147a:	4b5b      	ldr	r3, [pc, #364]	; (80015e8 <HAL_RCC_OscConfig+0x32c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a5e      	ldr	r2, [pc, #376]	; (80015f8 <HAL_RCC_OscConfig+0x33c>)
 8001480:	4013      	ands	r3, r2
 8001482:	0019      	movs	r1, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	691a      	ldr	r2, [r3, #16]
 8001488:	4b57      	ldr	r3, [pc, #348]	; (80015e8 <HAL_RCC_OscConfig+0x32c>)
 800148a:	430a      	orrs	r2, r1
 800148c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800148e:	4b56      	ldr	r3, [pc, #344]	; (80015e8 <HAL_RCC_OscConfig+0x32c>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	4b55      	ldr	r3, [pc, #340]	; (80015e8 <HAL_RCC_OscConfig+0x32c>)
 8001494:	2180      	movs	r1, #128	; 0x80
 8001496:	0049      	lsls	r1, r1, #1
 8001498:	430a      	orrs	r2, r1
 800149a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800149c:	f7ff fc48 	bl	8000d30 <HAL_GetTick>
 80014a0:	0003      	movs	r3, r0
 80014a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014a6:	f7ff fc43 	bl	8000d30 <HAL_GetTick>
 80014aa:	0002      	movs	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e1fe      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014b8:	4b4b      	ldr	r3, [pc, #300]	; (80015e8 <HAL_RCC_OscConfig+0x32c>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	2380      	movs	r3, #128	; 0x80
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	4013      	ands	r3, r2
 80014c2:	d0f0      	beq.n	80014a6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c4:	4b48      	ldr	r3, [pc, #288]	; (80015e8 <HAL_RCC_OscConfig+0x32c>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	4a4a      	ldr	r2, [pc, #296]	; (80015f4 <HAL_RCC_OscConfig+0x338>)
 80014ca:	4013      	ands	r3, r2
 80014cc:	0019      	movs	r1, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	021a      	lsls	r2, r3, #8
 80014d4:	4b44      	ldr	r3, [pc, #272]	; (80015e8 <HAL_RCC_OscConfig+0x32c>)
 80014d6:	430a      	orrs	r2, r1
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	e01b      	b.n	8001514 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80014dc:	4b42      	ldr	r3, [pc, #264]	; (80015e8 <HAL_RCC_OscConfig+0x32c>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	4b41      	ldr	r3, [pc, #260]	; (80015e8 <HAL_RCC_OscConfig+0x32c>)
 80014e2:	4949      	ldr	r1, [pc, #292]	; (8001608 <HAL_RCC_OscConfig+0x34c>)
 80014e4:	400a      	ands	r2, r1
 80014e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e8:	f7ff fc22 	bl	8000d30 <HAL_GetTick>
 80014ec:	0003      	movs	r3, r0
 80014ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014f0:	e008      	b.n	8001504 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014f2:	f7ff fc1d 	bl	8000d30 <HAL_GetTick>
 80014f6:	0002      	movs	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e1d8      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001504:	4b38      	ldr	r3, [pc, #224]	; (80015e8 <HAL_RCC_OscConfig+0x32c>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	2380      	movs	r3, #128	; 0x80
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	4013      	ands	r3, r2
 800150e:	d1f0      	bne.n	80014f2 <HAL_RCC_OscConfig+0x236>
 8001510:	e000      	b.n	8001514 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001512:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2208      	movs	r2, #8
 800151a:	4013      	ands	r3, r2
 800151c:	d047      	beq.n	80015ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800151e:	4b32      	ldr	r3, [pc, #200]	; (80015e8 <HAL_RCC_OscConfig+0x32c>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	2238      	movs	r2, #56	; 0x38
 8001524:	4013      	ands	r3, r2
 8001526:	2b18      	cmp	r3, #24
 8001528:	d10a      	bne.n	8001540 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800152a:	4b2f      	ldr	r3, [pc, #188]	; (80015e8 <HAL_RCC_OscConfig+0x32c>)
 800152c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800152e:	2202      	movs	r2, #2
 8001530:	4013      	ands	r3, r2
 8001532:	d03c      	beq.n	80015ae <HAL_RCC_OscConfig+0x2f2>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d138      	bne.n	80015ae <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e1ba      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d019      	beq.n	800157c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001548:	4b27      	ldr	r3, [pc, #156]	; (80015e8 <HAL_RCC_OscConfig+0x32c>)
 800154a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800154c:	4b26      	ldr	r3, [pc, #152]	; (80015e8 <HAL_RCC_OscConfig+0x32c>)
 800154e:	2101      	movs	r1, #1
 8001550:	430a      	orrs	r2, r1
 8001552:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001554:	f7ff fbec 	bl	8000d30 <HAL_GetTick>
 8001558:	0003      	movs	r3, r0
 800155a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800155e:	f7ff fbe7 	bl	8000d30 <HAL_GetTick>
 8001562:	0002      	movs	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e1a2      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001570:	4b1d      	ldr	r3, [pc, #116]	; (80015e8 <HAL_RCC_OscConfig+0x32c>)
 8001572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001574:	2202      	movs	r2, #2
 8001576:	4013      	ands	r3, r2
 8001578:	d0f1      	beq.n	800155e <HAL_RCC_OscConfig+0x2a2>
 800157a:	e018      	b.n	80015ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800157c:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <HAL_RCC_OscConfig+0x32c>)
 800157e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001580:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <HAL_RCC_OscConfig+0x32c>)
 8001582:	2101      	movs	r1, #1
 8001584:	438a      	bics	r2, r1
 8001586:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001588:	f7ff fbd2 	bl	8000d30 <HAL_GetTick>
 800158c:	0003      	movs	r3, r0
 800158e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001592:	f7ff fbcd 	bl	8000d30 <HAL_GetTick>
 8001596:	0002      	movs	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e188      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015a4:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <HAL_RCC_OscConfig+0x32c>)
 80015a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015a8:	2202      	movs	r2, #2
 80015aa:	4013      	ands	r3, r2
 80015ac:	d1f1      	bne.n	8001592 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2204      	movs	r2, #4
 80015b4:	4013      	ands	r3, r2
 80015b6:	d100      	bne.n	80015ba <HAL_RCC_OscConfig+0x2fe>
 80015b8:	e0c6      	b.n	8001748 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ba:	231f      	movs	r3, #31
 80015bc:	18fb      	adds	r3, r7, r3
 80015be:	2200      	movs	r2, #0
 80015c0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <HAL_RCC_OscConfig+0x32c>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	2238      	movs	r2, #56	; 0x38
 80015c8:	4013      	ands	r3, r2
 80015ca:	2b20      	cmp	r3, #32
 80015cc:	d11e      	bne.n	800160c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <HAL_RCC_OscConfig+0x32c>)
 80015d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d2:	2202      	movs	r2, #2
 80015d4:	4013      	ands	r3, r2
 80015d6:	d100      	bne.n	80015da <HAL_RCC_OscConfig+0x31e>
 80015d8:	e0b6      	b.n	8001748 <HAL_RCC_OscConfig+0x48c>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d000      	beq.n	80015e4 <HAL_RCC_OscConfig+0x328>
 80015e2:	e0b1      	b.n	8001748 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e166      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fa>
 80015e8:	40021000 	.word	0x40021000
 80015ec:	fffeffff 	.word	0xfffeffff
 80015f0:	fffbffff 	.word	0xfffbffff
 80015f4:	ffff80ff 	.word	0xffff80ff
 80015f8:	ffffc7ff 	.word	0xffffc7ff
 80015fc:	00f42400 	.word	0x00f42400
 8001600:	20000050 	.word	0x20000050
 8001604:	20000054 	.word	0x20000054
 8001608:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800160c:	4bac      	ldr	r3, [pc, #688]	; (80018c0 <HAL_RCC_OscConfig+0x604>)
 800160e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001610:	2380      	movs	r3, #128	; 0x80
 8001612:	055b      	lsls	r3, r3, #21
 8001614:	4013      	ands	r3, r2
 8001616:	d101      	bne.n	800161c <HAL_RCC_OscConfig+0x360>
 8001618:	2301      	movs	r3, #1
 800161a:	e000      	b.n	800161e <HAL_RCC_OscConfig+0x362>
 800161c:	2300      	movs	r3, #0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d011      	beq.n	8001646 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001622:	4ba7      	ldr	r3, [pc, #668]	; (80018c0 <HAL_RCC_OscConfig+0x604>)
 8001624:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001626:	4ba6      	ldr	r3, [pc, #664]	; (80018c0 <HAL_RCC_OscConfig+0x604>)
 8001628:	2180      	movs	r1, #128	; 0x80
 800162a:	0549      	lsls	r1, r1, #21
 800162c:	430a      	orrs	r2, r1
 800162e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001630:	4ba3      	ldr	r3, [pc, #652]	; (80018c0 <HAL_RCC_OscConfig+0x604>)
 8001632:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001634:	2380      	movs	r3, #128	; 0x80
 8001636:	055b      	lsls	r3, r3, #21
 8001638:	4013      	ands	r3, r2
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800163e:	231f      	movs	r3, #31
 8001640:	18fb      	adds	r3, r7, r3
 8001642:	2201      	movs	r2, #1
 8001644:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001646:	4b9f      	ldr	r3, [pc, #636]	; (80018c4 <HAL_RCC_OscConfig+0x608>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	2380      	movs	r3, #128	; 0x80
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	4013      	ands	r3, r2
 8001650:	d11a      	bne.n	8001688 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001652:	4b9c      	ldr	r3, [pc, #624]	; (80018c4 <HAL_RCC_OscConfig+0x608>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	4b9b      	ldr	r3, [pc, #620]	; (80018c4 <HAL_RCC_OscConfig+0x608>)
 8001658:	2180      	movs	r1, #128	; 0x80
 800165a:	0049      	lsls	r1, r1, #1
 800165c:	430a      	orrs	r2, r1
 800165e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001660:	f7ff fb66 	bl	8000d30 <HAL_GetTick>
 8001664:	0003      	movs	r3, r0
 8001666:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800166a:	f7ff fb61 	bl	8000d30 <HAL_GetTick>
 800166e:	0002      	movs	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e11c      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800167c:	4b91      	ldr	r3, [pc, #580]	; (80018c4 <HAL_RCC_OscConfig+0x608>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	2380      	movs	r3, #128	; 0x80
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	4013      	ands	r3, r2
 8001686:	d0f0      	beq.n	800166a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d106      	bne.n	800169e <HAL_RCC_OscConfig+0x3e2>
 8001690:	4b8b      	ldr	r3, [pc, #556]	; (80018c0 <HAL_RCC_OscConfig+0x604>)
 8001692:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001694:	4b8a      	ldr	r3, [pc, #552]	; (80018c0 <HAL_RCC_OscConfig+0x604>)
 8001696:	2101      	movs	r1, #1
 8001698:	430a      	orrs	r2, r1
 800169a:	65da      	str	r2, [r3, #92]	; 0x5c
 800169c:	e01c      	b.n	80016d8 <HAL_RCC_OscConfig+0x41c>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	2b05      	cmp	r3, #5
 80016a4:	d10c      	bne.n	80016c0 <HAL_RCC_OscConfig+0x404>
 80016a6:	4b86      	ldr	r3, [pc, #536]	; (80018c0 <HAL_RCC_OscConfig+0x604>)
 80016a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016aa:	4b85      	ldr	r3, [pc, #532]	; (80018c0 <HAL_RCC_OscConfig+0x604>)
 80016ac:	2104      	movs	r1, #4
 80016ae:	430a      	orrs	r2, r1
 80016b0:	65da      	str	r2, [r3, #92]	; 0x5c
 80016b2:	4b83      	ldr	r3, [pc, #524]	; (80018c0 <HAL_RCC_OscConfig+0x604>)
 80016b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016b6:	4b82      	ldr	r3, [pc, #520]	; (80018c0 <HAL_RCC_OscConfig+0x604>)
 80016b8:	2101      	movs	r1, #1
 80016ba:	430a      	orrs	r2, r1
 80016bc:	65da      	str	r2, [r3, #92]	; 0x5c
 80016be:	e00b      	b.n	80016d8 <HAL_RCC_OscConfig+0x41c>
 80016c0:	4b7f      	ldr	r3, [pc, #508]	; (80018c0 <HAL_RCC_OscConfig+0x604>)
 80016c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016c4:	4b7e      	ldr	r3, [pc, #504]	; (80018c0 <HAL_RCC_OscConfig+0x604>)
 80016c6:	2101      	movs	r1, #1
 80016c8:	438a      	bics	r2, r1
 80016ca:	65da      	str	r2, [r3, #92]	; 0x5c
 80016cc:	4b7c      	ldr	r3, [pc, #496]	; (80018c0 <HAL_RCC_OscConfig+0x604>)
 80016ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016d0:	4b7b      	ldr	r3, [pc, #492]	; (80018c0 <HAL_RCC_OscConfig+0x604>)
 80016d2:	2104      	movs	r1, #4
 80016d4:	438a      	bics	r2, r1
 80016d6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d014      	beq.n	800170a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e0:	f7ff fb26 	bl	8000d30 <HAL_GetTick>
 80016e4:	0003      	movs	r3, r0
 80016e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016e8:	e009      	b.n	80016fe <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ea:	f7ff fb21 	bl	8000d30 <HAL_GetTick>
 80016ee:	0002      	movs	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	4a74      	ldr	r2, [pc, #464]	; (80018c8 <HAL_RCC_OscConfig+0x60c>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e0db      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016fe:	4b70      	ldr	r3, [pc, #448]	; (80018c0 <HAL_RCC_OscConfig+0x604>)
 8001700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001702:	2202      	movs	r2, #2
 8001704:	4013      	ands	r3, r2
 8001706:	d0f0      	beq.n	80016ea <HAL_RCC_OscConfig+0x42e>
 8001708:	e013      	b.n	8001732 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170a:	f7ff fb11 	bl	8000d30 <HAL_GetTick>
 800170e:	0003      	movs	r3, r0
 8001710:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001712:	e009      	b.n	8001728 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001714:	f7ff fb0c 	bl	8000d30 <HAL_GetTick>
 8001718:	0002      	movs	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	4a6a      	ldr	r2, [pc, #424]	; (80018c8 <HAL_RCC_OscConfig+0x60c>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e0c6      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001728:	4b65      	ldr	r3, [pc, #404]	; (80018c0 <HAL_RCC_OscConfig+0x604>)
 800172a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800172c:	2202      	movs	r2, #2
 800172e:	4013      	ands	r3, r2
 8001730:	d1f0      	bne.n	8001714 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001732:	231f      	movs	r3, #31
 8001734:	18fb      	adds	r3, r7, r3
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d105      	bne.n	8001748 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800173c:	4b60      	ldr	r3, [pc, #384]	; (80018c0 <HAL_RCC_OscConfig+0x604>)
 800173e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001740:	4b5f      	ldr	r3, [pc, #380]	; (80018c0 <HAL_RCC_OscConfig+0x604>)
 8001742:	4962      	ldr	r1, [pc, #392]	; (80018cc <HAL_RCC_OscConfig+0x610>)
 8001744:	400a      	ands	r2, r1
 8001746:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	69db      	ldr	r3, [r3, #28]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d100      	bne.n	8001752 <HAL_RCC_OscConfig+0x496>
 8001750:	e0b0      	b.n	80018b4 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001752:	4b5b      	ldr	r3, [pc, #364]	; (80018c0 <HAL_RCC_OscConfig+0x604>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	2238      	movs	r2, #56	; 0x38
 8001758:	4013      	ands	r3, r2
 800175a:	2b10      	cmp	r3, #16
 800175c:	d100      	bne.n	8001760 <HAL_RCC_OscConfig+0x4a4>
 800175e:	e078      	b.n	8001852 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	2b02      	cmp	r3, #2
 8001766:	d153      	bne.n	8001810 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001768:	4b55      	ldr	r3, [pc, #340]	; (80018c0 <HAL_RCC_OscConfig+0x604>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	4b54      	ldr	r3, [pc, #336]	; (80018c0 <HAL_RCC_OscConfig+0x604>)
 800176e:	4958      	ldr	r1, [pc, #352]	; (80018d0 <HAL_RCC_OscConfig+0x614>)
 8001770:	400a      	ands	r2, r1
 8001772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001774:	f7ff fadc 	bl	8000d30 <HAL_GetTick>
 8001778:	0003      	movs	r3, r0
 800177a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800177e:	f7ff fad7 	bl	8000d30 <HAL_GetTick>
 8001782:	0002      	movs	r2, r0
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e092      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001790:	4b4b      	ldr	r3, [pc, #300]	; (80018c0 <HAL_RCC_OscConfig+0x604>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	2380      	movs	r3, #128	; 0x80
 8001796:	049b      	lsls	r3, r3, #18
 8001798:	4013      	ands	r3, r2
 800179a:	d1f0      	bne.n	800177e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800179c:	4b48      	ldr	r3, [pc, #288]	; (80018c0 <HAL_RCC_OscConfig+0x604>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	4a4c      	ldr	r2, [pc, #304]	; (80018d4 <HAL_RCC_OscConfig+0x618>)
 80017a2:	4013      	ands	r3, r2
 80017a4:	0019      	movs	r1, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a1a      	ldr	r2, [r3, #32]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ae:	431a      	orrs	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b4:	021b      	lsls	r3, r3, #8
 80017b6:	431a      	orrs	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017bc:	431a      	orrs	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	431a      	orrs	r2, r3
 80017c4:	4b3e      	ldr	r3, [pc, #248]	; (80018c0 <HAL_RCC_OscConfig+0x604>)
 80017c6:	430a      	orrs	r2, r1
 80017c8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017ca:	4b3d      	ldr	r3, [pc, #244]	; (80018c0 <HAL_RCC_OscConfig+0x604>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	4b3c      	ldr	r3, [pc, #240]	; (80018c0 <HAL_RCC_OscConfig+0x604>)
 80017d0:	2180      	movs	r1, #128	; 0x80
 80017d2:	0449      	lsls	r1, r1, #17
 80017d4:	430a      	orrs	r2, r1
 80017d6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80017d8:	4b39      	ldr	r3, [pc, #228]	; (80018c0 <HAL_RCC_OscConfig+0x604>)
 80017da:	68da      	ldr	r2, [r3, #12]
 80017dc:	4b38      	ldr	r3, [pc, #224]	; (80018c0 <HAL_RCC_OscConfig+0x604>)
 80017de:	2180      	movs	r1, #128	; 0x80
 80017e0:	0549      	lsls	r1, r1, #21
 80017e2:	430a      	orrs	r2, r1
 80017e4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e6:	f7ff faa3 	bl	8000d30 <HAL_GetTick>
 80017ea:	0003      	movs	r3, r0
 80017ec:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f0:	f7ff fa9e 	bl	8000d30 <HAL_GetTick>
 80017f4:	0002      	movs	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e059      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001802:	4b2f      	ldr	r3, [pc, #188]	; (80018c0 <HAL_RCC_OscConfig+0x604>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	2380      	movs	r3, #128	; 0x80
 8001808:	049b      	lsls	r3, r3, #18
 800180a:	4013      	ands	r3, r2
 800180c:	d0f0      	beq.n	80017f0 <HAL_RCC_OscConfig+0x534>
 800180e:	e051      	b.n	80018b4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001810:	4b2b      	ldr	r3, [pc, #172]	; (80018c0 <HAL_RCC_OscConfig+0x604>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	4b2a      	ldr	r3, [pc, #168]	; (80018c0 <HAL_RCC_OscConfig+0x604>)
 8001816:	492e      	ldr	r1, [pc, #184]	; (80018d0 <HAL_RCC_OscConfig+0x614>)
 8001818:	400a      	ands	r2, r1
 800181a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181c:	f7ff fa88 	bl	8000d30 <HAL_GetTick>
 8001820:	0003      	movs	r3, r0
 8001822:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001826:	f7ff fa83 	bl	8000d30 <HAL_GetTick>
 800182a:	0002      	movs	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e03e      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001838:	4b21      	ldr	r3, [pc, #132]	; (80018c0 <HAL_RCC_OscConfig+0x604>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	2380      	movs	r3, #128	; 0x80
 800183e:	049b      	lsls	r3, r3, #18
 8001840:	4013      	ands	r3, r2
 8001842:	d1f0      	bne.n	8001826 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001844:	4b1e      	ldr	r3, [pc, #120]	; (80018c0 <HAL_RCC_OscConfig+0x604>)
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	4b1d      	ldr	r3, [pc, #116]	; (80018c0 <HAL_RCC_OscConfig+0x604>)
 800184a:	4923      	ldr	r1, [pc, #140]	; (80018d8 <HAL_RCC_OscConfig+0x61c>)
 800184c:	400a      	ands	r2, r1
 800184e:	60da      	str	r2, [r3, #12]
 8001850:	e030      	b.n	80018b4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d101      	bne.n	800185e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e02b      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800185e:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <HAL_RCC_OscConfig+0x604>)
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	2203      	movs	r2, #3
 8001868:	401a      	ands	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	429a      	cmp	r2, r3
 8001870:	d11e      	bne.n	80018b0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	2270      	movs	r2, #112	; 0x70
 8001876:	401a      	ands	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800187c:	429a      	cmp	r2, r3
 800187e:	d117      	bne.n	80018b0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001880:	697a      	ldr	r2, [r7, #20]
 8001882:	23fe      	movs	r3, #254	; 0xfe
 8001884:	01db      	lsls	r3, r3, #7
 8001886:	401a      	ands	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800188e:	429a      	cmp	r2, r3
 8001890:	d10e      	bne.n	80018b0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	23f8      	movs	r3, #248	; 0xf8
 8001896:	039b      	lsls	r3, r3, #14
 8001898:	401a      	ands	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800189e:	429a      	cmp	r2, r3
 80018a0:	d106      	bne.n	80018b0 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	0f5b      	lsrs	r3, r3, #29
 80018a6:	075a      	lsls	r2, r3, #29
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d001      	beq.n	80018b4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e000      	b.n	80018b6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	0018      	movs	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	b008      	add	sp, #32
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	46c0      	nop			; (mov r8, r8)
 80018c0:	40021000 	.word	0x40021000
 80018c4:	40007000 	.word	0x40007000
 80018c8:	00001388 	.word	0x00001388
 80018cc:	efffffff 	.word	0xefffffff
 80018d0:	feffffff 	.word	0xfeffffff
 80018d4:	1fc1808c 	.word	0x1fc1808c
 80018d8:	effefffc 	.word	0xeffefffc

080018dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d101      	bne.n	80018f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e0e9      	b.n	8001ac4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018f0:	4b76      	ldr	r3, [pc, #472]	; (8001acc <HAL_RCC_ClockConfig+0x1f0>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2207      	movs	r2, #7
 80018f6:	4013      	ands	r3, r2
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d91e      	bls.n	800193c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018fe:	4b73      	ldr	r3, [pc, #460]	; (8001acc <HAL_RCC_ClockConfig+0x1f0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2207      	movs	r2, #7
 8001904:	4393      	bics	r3, r2
 8001906:	0019      	movs	r1, r3
 8001908:	4b70      	ldr	r3, [pc, #448]	; (8001acc <HAL_RCC_ClockConfig+0x1f0>)
 800190a:	683a      	ldr	r2, [r7, #0]
 800190c:	430a      	orrs	r2, r1
 800190e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001910:	f7ff fa0e 	bl	8000d30 <HAL_GetTick>
 8001914:	0003      	movs	r3, r0
 8001916:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001918:	e009      	b.n	800192e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800191a:	f7ff fa09 	bl	8000d30 <HAL_GetTick>
 800191e:	0002      	movs	r2, r0
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	4a6a      	ldr	r2, [pc, #424]	; (8001ad0 <HAL_RCC_ClockConfig+0x1f4>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d901      	bls.n	800192e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e0ca      	b.n	8001ac4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800192e:	4b67      	ldr	r3, [pc, #412]	; (8001acc <HAL_RCC_ClockConfig+0x1f0>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2207      	movs	r2, #7
 8001934:	4013      	ands	r3, r2
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	429a      	cmp	r2, r3
 800193a:	d1ee      	bne.n	800191a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2202      	movs	r2, #2
 8001942:	4013      	ands	r3, r2
 8001944:	d015      	beq.n	8001972 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2204      	movs	r2, #4
 800194c:	4013      	ands	r3, r2
 800194e:	d006      	beq.n	800195e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001950:	4b60      	ldr	r3, [pc, #384]	; (8001ad4 <HAL_RCC_ClockConfig+0x1f8>)
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	4b5f      	ldr	r3, [pc, #380]	; (8001ad4 <HAL_RCC_ClockConfig+0x1f8>)
 8001956:	21e0      	movs	r1, #224	; 0xe0
 8001958:	01c9      	lsls	r1, r1, #7
 800195a:	430a      	orrs	r2, r1
 800195c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800195e:	4b5d      	ldr	r3, [pc, #372]	; (8001ad4 <HAL_RCC_ClockConfig+0x1f8>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	4a5d      	ldr	r2, [pc, #372]	; (8001ad8 <HAL_RCC_ClockConfig+0x1fc>)
 8001964:	4013      	ands	r3, r2
 8001966:	0019      	movs	r1, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	4b59      	ldr	r3, [pc, #356]	; (8001ad4 <HAL_RCC_ClockConfig+0x1f8>)
 800196e:	430a      	orrs	r2, r1
 8001970:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2201      	movs	r2, #1
 8001978:	4013      	ands	r3, r2
 800197a:	d057      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d107      	bne.n	8001994 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001984:	4b53      	ldr	r3, [pc, #332]	; (8001ad4 <HAL_RCC_ClockConfig+0x1f8>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	029b      	lsls	r3, r3, #10
 800198c:	4013      	ands	r3, r2
 800198e:	d12b      	bne.n	80019e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e097      	b.n	8001ac4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2b02      	cmp	r3, #2
 800199a:	d107      	bne.n	80019ac <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800199c:	4b4d      	ldr	r3, [pc, #308]	; (8001ad4 <HAL_RCC_ClockConfig+0x1f8>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	049b      	lsls	r3, r3, #18
 80019a4:	4013      	ands	r3, r2
 80019a6:	d11f      	bne.n	80019e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e08b      	b.n	8001ac4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d107      	bne.n	80019c4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019b4:	4b47      	ldr	r3, [pc, #284]	; (8001ad4 <HAL_RCC_ClockConfig+0x1f8>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	2380      	movs	r3, #128	; 0x80
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	4013      	ands	r3, r2
 80019be:	d113      	bne.n	80019e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e07f      	b.n	8001ac4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b03      	cmp	r3, #3
 80019ca:	d106      	bne.n	80019da <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019cc:	4b41      	ldr	r3, [pc, #260]	; (8001ad4 <HAL_RCC_ClockConfig+0x1f8>)
 80019ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019d0:	2202      	movs	r2, #2
 80019d2:	4013      	ands	r3, r2
 80019d4:	d108      	bne.n	80019e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e074      	b.n	8001ac4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019da:	4b3e      	ldr	r3, [pc, #248]	; (8001ad4 <HAL_RCC_ClockConfig+0x1f8>)
 80019dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019de:	2202      	movs	r2, #2
 80019e0:	4013      	ands	r3, r2
 80019e2:	d101      	bne.n	80019e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e06d      	b.n	8001ac4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019e8:	4b3a      	ldr	r3, [pc, #232]	; (8001ad4 <HAL_RCC_ClockConfig+0x1f8>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	2207      	movs	r2, #7
 80019ee:	4393      	bics	r3, r2
 80019f0:	0019      	movs	r1, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	4b37      	ldr	r3, [pc, #220]	; (8001ad4 <HAL_RCC_ClockConfig+0x1f8>)
 80019f8:	430a      	orrs	r2, r1
 80019fa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019fc:	f7ff f998 	bl	8000d30 <HAL_GetTick>
 8001a00:	0003      	movs	r3, r0
 8001a02:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a04:	e009      	b.n	8001a1a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a06:	f7ff f993 	bl	8000d30 <HAL_GetTick>
 8001a0a:	0002      	movs	r2, r0
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	4a2f      	ldr	r2, [pc, #188]	; (8001ad0 <HAL_RCC_ClockConfig+0x1f4>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e054      	b.n	8001ac4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1a:	4b2e      	ldr	r3, [pc, #184]	; (8001ad4 <HAL_RCC_ClockConfig+0x1f8>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	2238      	movs	r2, #56	; 0x38
 8001a20:	401a      	ands	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d1ec      	bne.n	8001a06 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a2c:	4b27      	ldr	r3, [pc, #156]	; (8001acc <HAL_RCC_ClockConfig+0x1f0>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2207      	movs	r2, #7
 8001a32:	4013      	ands	r3, r2
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d21e      	bcs.n	8001a78 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3a:	4b24      	ldr	r3, [pc, #144]	; (8001acc <HAL_RCC_ClockConfig+0x1f0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2207      	movs	r2, #7
 8001a40:	4393      	bics	r3, r2
 8001a42:	0019      	movs	r1, r3
 8001a44:	4b21      	ldr	r3, [pc, #132]	; (8001acc <HAL_RCC_ClockConfig+0x1f0>)
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a4c:	f7ff f970 	bl	8000d30 <HAL_GetTick>
 8001a50:	0003      	movs	r3, r0
 8001a52:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a54:	e009      	b.n	8001a6a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a56:	f7ff f96b 	bl	8000d30 <HAL_GetTick>
 8001a5a:	0002      	movs	r2, r0
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	4a1b      	ldr	r2, [pc, #108]	; (8001ad0 <HAL_RCC_ClockConfig+0x1f4>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e02c      	b.n	8001ac4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a6a:	4b18      	ldr	r3, [pc, #96]	; (8001acc <HAL_RCC_ClockConfig+0x1f0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2207      	movs	r2, #7
 8001a70:	4013      	ands	r3, r2
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d1ee      	bne.n	8001a56 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2204      	movs	r2, #4
 8001a7e:	4013      	ands	r3, r2
 8001a80:	d009      	beq.n	8001a96 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a82:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <HAL_RCC_ClockConfig+0x1f8>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	4a15      	ldr	r2, [pc, #84]	; (8001adc <HAL_RCC_ClockConfig+0x200>)
 8001a88:	4013      	ands	r3, r2
 8001a8a:	0019      	movs	r1, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68da      	ldr	r2, [r3, #12]
 8001a90:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <HAL_RCC_ClockConfig+0x1f8>)
 8001a92:	430a      	orrs	r2, r1
 8001a94:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001a96:	f000 f829 	bl	8001aec <HAL_RCC_GetSysClockFreq>
 8001a9a:	0001      	movs	r1, r0
 8001a9c:	4b0d      	ldr	r3, [pc, #52]	; (8001ad4 <HAL_RCC_ClockConfig+0x1f8>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	0a1b      	lsrs	r3, r3, #8
 8001aa2:	220f      	movs	r2, #15
 8001aa4:	401a      	ands	r2, r3
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <HAL_RCC_ClockConfig+0x204>)
 8001aa8:	0092      	lsls	r2, r2, #2
 8001aaa:	58d3      	ldr	r3, [r2, r3]
 8001aac:	221f      	movs	r2, #31
 8001aae:	4013      	ands	r3, r2
 8001ab0:	000a      	movs	r2, r1
 8001ab2:	40da      	lsrs	r2, r3
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <HAL_RCC_ClockConfig+0x208>)
 8001ab6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <HAL_RCC_ClockConfig+0x20c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	0018      	movs	r0, r3
 8001abe:	f7ff f8db 	bl	8000c78 <HAL_InitTick>
 8001ac2:	0003      	movs	r3, r0
}
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	b004      	add	sp, #16
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40022000 	.word	0x40022000
 8001ad0:	00001388 	.word	0x00001388
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	fffff0ff 	.word	0xfffff0ff
 8001adc:	ffff8fff 	.word	0xffff8fff
 8001ae0:	08002168 	.word	0x08002168
 8001ae4:	20000050 	.word	0x20000050
 8001ae8:	20000054 	.word	0x20000054

08001aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001af2:	4b3c      	ldr	r3, [pc, #240]	; (8001be4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	2238      	movs	r2, #56	; 0x38
 8001af8:	4013      	ands	r3, r2
 8001afa:	d10f      	bne.n	8001b1c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001afc:	4b39      	ldr	r3, [pc, #228]	; (8001be4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	0adb      	lsrs	r3, r3, #11
 8001b02:	2207      	movs	r2, #7
 8001b04:	4013      	ands	r3, r2
 8001b06:	2201      	movs	r2, #1
 8001b08:	409a      	lsls	r2, r3
 8001b0a:	0013      	movs	r3, r2
 8001b0c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001b0e:	6839      	ldr	r1, [r7, #0]
 8001b10:	4835      	ldr	r0, [pc, #212]	; (8001be8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b12:	f7fe faf5 	bl	8000100 <__udivsi3>
 8001b16:	0003      	movs	r3, r0
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	e05d      	b.n	8001bd8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b1c:	4b31      	ldr	r3, [pc, #196]	; (8001be4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	2238      	movs	r2, #56	; 0x38
 8001b22:	4013      	ands	r3, r2
 8001b24:	2b08      	cmp	r3, #8
 8001b26:	d102      	bne.n	8001b2e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b28:	4b30      	ldr	r3, [pc, #192]	; (8001bec <HAL_RCC_GetSysClockFreq+0x100>)
 8001b2a:	613b      	str	r3, [r7, #16]
 8001b2c:	e054      	b.n	8001bd8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b2e:	4b2d      	ldr	r3, [pc, #180]	; (8001be4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	2238      	movs	r2, #56	; 0x38
 8001b34:	4013      	ands	r3, r2
 8001b36:	2b10      	cmp	r3, #16
 8001b38:	d138      	bne.n	8001bac <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001b3a:	4b2a      	ldr	r3, [pc, #168]	; (8001be4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	2203      	movs	r2, #3
 8001b40:	4013      	ands	r3, r2
 8001b42:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b44:	4b27      	ldr	r3, [pc, #156]	; (8001be4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	091b      	lsrs	r3, r3, #4
 8001b4a:	2207      	movs	r2, #7
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	3301      	adds	r3, #1
 8001b50:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2b03      	cmp	r3, #3
 8001b56:	d10d      	bne.n	8001b74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b58:	68b9      	ldr	r1, [r7, #8]
 8001b5a:	4824      	ldr	r0, [pc, #144]	; (8001bec <HAL_RCC_GetSysClockFreq+0x100>)
 8001b5c:	f7fe fad0 	bl	8000100 <__udivsi3>
 8001b60:	0003      	movs	r3, r0
 8001b62:	0019      	movs	r1, r3
 8001b64:	4b1f      	ldr	r3, [pc, #124]	; (8001be4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	0a1b      	lsrs	r3, r3, #8
 8001b6a:	227f      	movs	r2, #127	; 0x7f
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	434b      	muls	r3, r1
 8001b70:	617b      	str	r3, [r7, #20]
        break;
 8001b72:	e00d      	b.n	8001b90 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001b74:	68b9      	ldr	r1, [r7, #8]
 8001b76:	481c      	ldr	r0, [pc, #112]	; (8001be8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b78:	f7fe fac2 	bl	8000100 <__udivsi3>
 8001b7c:	0003      	movs	r3, r0
 8001b7e:	0019      	movs	r1, r3
 8001b80:	4b18      	ldr	r3, [pc, #96]	; (8001be4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	0a1b      	lsrs	r3, r3, #8
 8001b86:	227f      	movs	r2, #127	; 0x7f
 8001b88:	4013      	ands	r3, r2
 8001b8a:	434b      	muls	r3, r1
 8001b8c:	617b      	str	r3, [r7, #20]
        break;
 8001b8e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001b90:	4b14      	ldr	r3, [pc, #80]	; (8001be4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	0f5b      	lsrs	r3, r3, #29
 8001b96:	2207      	movs	r2, #7
 8001b98:	4013      	ands	r3, r2
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	6978      	ldr	r0, [r7, #20]
 8001ba2:	f7fe faad 	bl	8000100 <__udivsi3>
 8001ba6:	0003      	movs	r3, r0
 8001ba8:	613b      	str	r3, [r7, #16]
 8001baa:	e015      	b.n	8001bd8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001bac:	4b0d      	ldr	r3, [pc, #52]	; (8001be4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	2238      	movs	r2, #56	; 0x38
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	2b20      	cmp	r3, #32
 8001bb6:	d103      	bne.n	8001bc0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001bb8:	2380      	movs	r3, #128	; 0x80
 8001bba:	021b      	lsls	r3, r3, #8
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	e00b      	b.n	8001bd8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001bc0:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	2238      	movs	r2, #56	; 0x38
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	2b18      	cmp	r3, #24
 8001bca:	d103      	bne.n	8001bd4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001bcc:	23fa      	movs	r3, #250	; 0xfa
 8001bce:	01db      	lsls	r3, r3, #7
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	e001      	b.n	8001bd8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001bd8:	693b      	ldr	r3, [r7, #16]
}
 8001bda:	0018      	movs	r0, r3
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	b006      	add	sp, #24
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	46c0      	nop			; (mov r8, r8)
 8001be4:	40021000 	.word	0x40021000
 8001be8:	00f42400 	.word	0x00f42400
 8001bec:	007a1200 	.word	0x007a1200

08001bf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e04a      	b.n	8001c98 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	223d      	movs	r2, #61	; 0x3d
 8001c06:	5c9b      	ldrb	r3, [r3, r2]
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d107      	bne.n	8001c1e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	223c      	movs	r2, #60	; 0x3c
 8001c12:	2100      	movs	r1, #0
 8001c14:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	0018      	movs	r0, r3
 8001c1a:	f7fe ffbb 	bl	8000b94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	223d      	movs	r2, #61	; 0x3d
 8001c22:	2102      	movs	r1, #2
 8001c24:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	0019      	movs	r1, r3
 8001c30:	0010      	movs	r0, r2
 8001c32:	f000 f9dd 	bl	8001ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2248      	movs	r2, #72	; 0x48
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	223e      	movs	r2, #62	; 0x3e
 8001c42:	2101      	movs	r1, #1
 8001c44:	5499      	strb	r1, [r3, r2]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	223f      	movs	r2, #63	; 0x3f
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	5499      	strb	r1, [r3, r2]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2240      	movs	r2, #64	; 0x40
 8001c52:	2101      	movs	r1, #1
 8001c54:	5499      	strb	r1, [r3, r2]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2241      	movs	r2, #65	; 0x41
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	5499      	strb	r1, [r3, r2]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2242      	movs	r2, #66	; 0x42
 8001c62:	2101      	movs	r1, #1
 8001c64:	5499      	strb	r1, [r3, r2]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2243      	movs	r2, #67	; 0x43
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2244      	movs	r2, #68	; 0x44
 8001c72:	2101      	movs	r1, #1
 8001c74:	5499      	strb	r1, [r3, r2]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2245      	movs	r2, #69	; 0x45
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	5499      	strb	r1, [r3, r2]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2246      	movs	r2, #70	; 0x46
 8001c82:	2101      	movs	r1, #1
 8001c84:	5499      	strb	r1, [r3, r2]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2247      	movs	r2, #71	; 0x47
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	223d      	movs	r2, #61	; 0x3d
 8001c92:	2101      	movs	r1, #1
 8001c94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	0018      	movs	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	b002      	add	sp, #8
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	223d      	movs	r2, #61	; 0x3d
 8001cac:	5c9b      	ldrb	r3, [r3, r2]
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d001      	beq.n	8001cb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e037      	b.n	8001d28 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	223d      	movs	r2, #61	; 0x3d
 8001cbc:	2102      	movs	r1, #2
 8001cbe:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68da      	ldr	r2, [r3, #12]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2101      	movs	r1, #1
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a16      	ldr	r2, [pc, #88]	; (8001d30 <HAL_TIM_Base_Start_IT+0x90>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d004      	beq.n	8001ce4 <HAL_TIM_Base_Start_IT+0x44>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a15      	ldr	r2, [pc, #84]	; (8001d34 <HAL_TIM_Base_Start_IT+0x94>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d116      	bne.n	8001d12 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	4a13      	ldr	r2, [pc, #76]	; (8001d38 <HAL_TIM_Base_Start_IT+0x98>)
 8001cec:	4013      	ands	r3, r2
 8001cee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2b06      	cmp	r3, #6
 8001cf4:	d016      	beq.n	8001d24 <HAL_TIM_Base_Start_IT+0x84>
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	2380      	movs	r3, #128	; 0x80
 8001cfa:	025b      	lsls	r3, r3, #9
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d011      	beq.n	8001d24 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d10:	e008      	b.n	8001d24 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	e000      	b.n	8001d26 <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d24:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	0018      	movs	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	b004      	add	sp, #16
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40012c00 	.word	0x40012c00
 8001d34:	40000400 	.word	0x40000400
 8001d38:	00010007 	.word	0x00010007

08001d3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d124      	bne.n	8001d9c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	2202      	movs	r2, #2
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d11d      	bne.n	8001d9c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2203      	movs	r2, #3
 8001d66:	4252      	negs	r2, r2
 8001d68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	2203      	movs	r2, #3
 8001d78:	4013      	ands	r3, r2
 8001d7a:	d004      	beq.n	8001d86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	0018      	movs	r0, r3
 8001d80:	f000 f91e 	bl	8001fc0 <HAL_TIM_IC_CaptureCallback>
 8001d84:	e007      	b.n	8001d96 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	0018      	movs	r0, r3
 8001d8a:	f000 f911 	bl	8001fb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	0018      	movs	r0, r3
 8001d92:	f000 f91d 	bl	8001fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	2204      	movs	r2, #4
 8001da4:	4013      	ands	r3, r2
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	d125      	bne.n	8001df6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	2204      	movs	r2, #4
 8001db2:	4013      	ands	r3, r2
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d11e      	bne.n	8001df6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2205      	movs	r2, #5
 8001dbe:	4252      	negs	r2, r2
 8001dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	699a      	ldr	r2, [r3, #24]
 8001dce:	23c0      	movs	r3, #192	; 0xc0
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	d004      	beq.n	8001de0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	0018      	movs	r0, r3
 8001dda:	f000 f8f1 	bl	8001fc0 <HAL_TIM_IC_CaptureCallback>
 8001dde:	e007      	b.n	8001df0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	0018      	movs	r0, r3
 8001de4:	f000 f8e4 	bl	8001fb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	0018      	movs	r0, r3
 8001dec:	f000 f8f0 	bl	8001fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	2208      	movs	r2, #8
 8001dfe:	4013      	ands	r3, r2
 8001e00:	2b08      	cmp	r3, #8
 8001e02:	d124      	bne.n	8001e4e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	2208      	movs	r2, #8
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	2b08      	cmp	r3, #8
 8001e10:	d11d      	bne.n	8001e4e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2209      	movs	r2, #9
 8001e18:	4252      	negs	r2, r2
 8001e1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2204      	movs	r2, #4
 8001e20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	69db      	ldr	r3, [r3, #28]
 8001e28:	2203      	movs	r2, #3
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d004      	beq.n	8001e38 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	0018      	movs	r0, r3
 8001e32:	f000 f8c5 	bl	8001fc0 <HAL_TIM_IC_CaptureCallback>
 8001e36:	e007      	b.n	8001e48 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	f000 f8b8 	bl	8001fb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	0018      	movs	r0, r3
 8001e44:	f000 f8c4 	bl	8001fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	2210      	movs	r2, #16
 8001e56:	4013      	ands	r3, r2
 8001e58:	2b10      	cmp	r3, #16
 8001e5a:	d125      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	2210      	movs	r2, #16
 8001e64:	4013      	ands	r3, r2
 8001e66:	2b10      	cmp	r3, #16
 8001e68:	d11e      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2211      	movs	r2, #17
 8001e70:	4252      	negs	r2, r2
 8001e72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2208      	movs	r2, #8
 8001e78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	69da      	ldr	r2, [r3, #28]
 8001e80:	23c0      	movs	r3, #192	; 0xc0
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4013      	ands	r3, r2
 8001e86:	d004      	beq.n	8001e92 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	f000 f898 	bl	8001fc0 <HAL_TIM_IC_CaptureCallback>
 8001e90:	e007      	b.n	8001ea2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	0018      	movs	r0, r3
 8001e96:	f000 f88b 	bl	8001fb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	f000 f897 	bl	8001fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d10f      	bne.n	8001ed6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d108      	bne.n	8001ed6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2202      	movs	r2, #2
 8001eca:	4252      	negs	r2, r2
 8001ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	f000 f865 	bl	8001fa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	2280      	movs	r2, #128	; 0x80
 8001ede:	4013      	ands	r3, r2
 8001ee0:	2b80      	cmp	r3, #128	; 0x80
 8001ee2:	d10f      	bne.n	8001f04 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	2280      	movs	r2, #128	; 0x80
 8001eec:	4013      	ands	r3, r2
 8001eee:	2b80      	cmp	r3, #128	; 0x80
 8001ef0:	d108      	bne.n	8001f04 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2281      	movs	r2, #129	; 0x81
 8001ef8:	4252      	negs	r2, r2
 8001efa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	0018      	movs	r0, r3
 8001f00:	f000 f8ea 	bl	80020d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	691a      	ldr	r2, [r3, #16]
 8001f0a:	2380      	movs	r3, #128	; 0x80
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	401a      	ands	r2, r3
 8001f10:	2380      	movs	r3, #128	; 0x80
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d10e      	bne.n	8001f36 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	2280      	movs	r2, #128	; 0x80
 8001f20:	4013      	ands	r3, r2
 8001f22:	2b80      	cmp	r3, #128	; 0x80
 8001f24:	d107      	bne.n	8001f36 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a1c      	ldr	r2, [pc, #112]	; (8001f9c <HAL_TIM_IRQHandler+0x260>)
 8001f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	0018      	movs	r0, r3
 8001f32:	f000 f8d9 	bl	80020e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	2240      	movs	r2, #64	; 0x40
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2b40      	cmp	r3, #64	; 0x40
 8001f42:	d10f      	bne.n	8001f64 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	2240      	movs	r2, #64	; 0x40
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	2b40      	cmp	r3, #64	; 0x40
 8001f50:	d108      	bne.n	8001f64 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2241      	movs	r2, #65	; 0x41
 8001f58:	4252      	negs	r2, r2
 8001f5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	0018      	movs	r0, r3
 8001f60:	f000 f83e 	bl	8001fe0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	2b20      	cmp	r3, #32
 8001f70:	d10f      	bne.n	8001f92 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	2220      	movs	r2, #32
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	2b20      	cmp	r3, #32
 8001f7e:	d108      	bne.n	8001f92 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2221      	movs	r2, #33	; 0x21
 8001f86:	4252      	negs	r2, r2
 8001f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	f000 f89b 	bl	80020c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f92:	46c0      	nop			; (mov r8, r8)
 8001f94:	46bd      	mov	sp, r7
 8001f96:	b002      	add	sp, #8
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	46c0      	nop			; (mov r8, r8)
 8001f9c:	fffffeff 	.word	0xfffffeff

08001fa0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001fa8:	46c0      	nop			; (mov r8, r8)
 8001faa:	46bd      	mov	sp, r7
 8001fac:	b002      	add	sp, #8
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fb8:	46c0      	nop			; (mov r8, r8)
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	b002      	add	sp, #8
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fc8:	46c0      	nop			; (mov r8, r8)
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	b002      	add	sp, #8
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fd8:	46c0      	nop			; (mov r8, r8)
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	b002      	add	sp, #8
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fe8:	46c0      	nop			; (mov r8, r8)
 8001fea:	46bd      	mov	sp, r7
 8001fec:	b002      	add	sp, #8
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a2b      	ldr	r2, [pc, #172]	; (80020b0 <TIM_Base_SetConfig+0xc0>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d003      	beq.n	8002010 <TIM_Base_SetConfig+0x20>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a2a      	ldr	r2, [pc, #168]	; (80020b4 <TIM_Base_SetConfig+0xc4>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d108      	bne.n	8002022 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2270      	movs	r2, #112	; 0x70
 8002014:	4393      	bics	r3, r2
 8002016:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	4313      	orrs	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a22      	ldr	r2, [pc, #136]	; (80020b0 <TIM_Base_SetConfig+0xc0>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d00f      	beq.n	800204a <TIM_Base_SetConfig+0x5a>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a21      	ldr	r2, [pc, #132]	; (80020b4 <TIM_Base_SetConfig+0xc4>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d00b      	beq.n	800204a <TIM_Base_SetConfig+0x5a>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a20      	ldr	r2, [pc, #128]	; (80020b8 <TIM_Base_SetConfig+0xc8>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d007      	beq.n	800204a <TIM_Base_SetConfig+0x5a>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a1f      	ldr	r2, [pc, #124]	; (80020bc <TIM_Base_SetConfig+0xcc>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d003      	beq.n	800204a <TIM_Base_SetConfig+0x5a>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a1e      	ldr	r2, [pc, #120]	; (80020c0 <TIM_Base_SetConfig+0xd0>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d108      	bne.n	800205c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	4a1d      	ldr	r2, [pc, #116]	; (80020c4 <TIM_Base_SetConfig+0xd4>)
 800204e:	4013      	ands	r3, r2
 8002050:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	4313      	orrs	r3, r2
 800205a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2280      	movs	r2, #128	; 0x80
 8002060:	4393      	bics	r3, r2
 8002062:	001a      	movs	r2, r3
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	4313      	orrs	r3, r2
 800206a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	689a      	ldr	r2, [r3, #8]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a0a      	ldr	r2, [pc, #40]	; (80020b0 <TIM_Base_SetConfig+0xc0>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d007      	beq.n	800209a <TIM_Base_SetConfig+0xaa>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a0b      	ldr	r2, [pc, #44]	; (80020bc <TIM_Base_SetConfig+0xcc>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d003      	beq.n	800209a <TIM_Base_SetConfig+0xaa>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a0a      	ldr	r2, [pc, #40]	; (80020c0 <TIM_Base_SetConfig+0xd0>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d103      	bne.n	80020a2 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	691a      	ldr	r2, [r3, #16]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2201      	movs	r2, #1
 80020a6:	615a      	str	r2, [r3, #20]
}
 80020a8:	46c0      	nop			; (mov r8, r8)
 80020aa:	46bd      	mov	sp, r7
 80020ac:	b004      	add	sp, #16
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40012c00 	.word	0x40012c00
 80020b4:	40000400 	.word	0x40000400
 80020b8:	40002000 	.word	0x40002000
 80020bc:	40014400 	.word	0x40014400
 80020c0:	40014800 	.word	0x40014800
 80020c4:	fffffcff 	.word	0xfffffcff

080020c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020d0:	46c0      	nop			; (mov r8, r8)
 80020d2:	46bd      	mov	sp, r7
 80020d4:	b002      	add	sp, #8
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020e0:	46c0      	nop			; (mov r8, r8)
 80020e2:	46bd      	mov	sp, r7
 80020e4:	b002      	add	sp, #8
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80020f0:	46c0      	nop			; (mov r8, r8)
 80020f2:	46bd      	mov	sp, r7
 80020f4:	b002      	add	sp, #8
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <__libc_init_array>:
 80020f8:	b570      	push	{r4, r5, r6, lr}
 80020fa:	2600      	movs	r6, #0
 80020fc:	4d0c      	ldr	r5, [pc, #48]	; (8002130 <__libc_init_array+0x38>)
 80020fe:	4c0d      	ldr	r4, [pc, #52]	; (8002134 <__libc_init_array+0x3c>)
 8002100:	1b64      	subs	r4, r4, r5
 8002102:	10a4      	asrs	r4, r4, #2
 8002104:	42a6      	cmp	r6, r4
 8002106:	d109      	bne.n	800211c <__libc_init_array+0x24>
 8002108:	2600      	movs	r6, #0
 800210a:	f000 f821 	bl	8002150 <_init>
 800210e:	4d0a      	ldr	r5, [pc, #40]	; (8002138 <__libc_init_array+0x40>)
 8002110:	4c0a      	ldr	r4, [pc, #40]	; (800213c <__libc_init_array+0x44>)
 8002112:	1b64      	subs	r4, r4, r5
 8002114:	10a4      	asrs	r4, r4, #2
 8002116:	42a6      	cmp	r6, r4
 8002118:	d105      	bne.n	8002126 <__libc_init_array+0x2e>
 800211a:	bd70      	pop	{r4, r5, r6, pc}
 800211c:	00b3      	lsls	r3, r6, #2
 800211e:	58eb      	ldr	r3, [r5, r3]
 8002120:	4798      	blx	r3
 8002122:	3601      	adds	r6, #1
 8002124:	e7ee      	b.n	8002104 <__libc_init_array+0xc>
 8002126:	00b3      	lsls	r3, r6, #2
 8002128:	58eb      	ldr	r3, [r5, r3]
 800212a:	4798      	blx	r3
 800212c:	3601      	adds	r6, #1
 800212e:	e7f2      	b.n	8002116 <__libc_init_array+0x1e>
 8002130:	080021a8 	.word	0x080021a8
 8002134:	080021a8 	.word	0x080021a8
 8002138:	080021a8 	.word	0x080021a8
 800213c:	080021ac 	.word	0x080021ac

08002140 <memset>:
 8002140:	0003      	movs	r3, r0
 8002142:	1882      	adds	r2, r0, r2
 8002144:	4293      	cmp	r3, r2
 8002146:	d100      	bne.n	800214a <memset+0xa>
 8002148:	4770      	bx	lr
 800214a:	7019      	strb	r1, [r3, #0]
 800214c:	3301      	adds	r3, #1
 800214e:	e7f9      	b.n	8002144 <memset+0x4>

08002150 <_init>:
 8002150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002156:	bc08      	pop	{r3}
 8002158:	469e      	mov	lr, r3
 800215a:	4770      	bx	lr

0800215c <_fini>:
 800215c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800215e:	46c0      	nop			; (mov r8, r8)
 8002160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002162:	bc08      	pop	{r3}
 8002164:	469e      	mov	lr, r3
 8002166:	4770      	bx	lr
